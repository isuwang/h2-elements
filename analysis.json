{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "```html\n\n<h2-loading opened></h2-loading>\n```\n\n`h2-loading`",
      "summary": "",
      "path": "h2-loading.html",
      "properties": [],
      "methods": [],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/h2-loading/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 41,
          "column": 4
        },
        "end": {
          "line": 49,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "H2Loading",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "h2-loading"
    },
    {
      "description": "标签组件\n\n`h2-label`",
      "summary": "",
      "path": "h2-label.html",
      "properties": [
        {
          "name": "__serializing",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 123,
              "column": 8
            },
            "end": {
              "line": 123,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataCounter",
          "type": "number",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1152,
              "column": 8
            },
            "end": {
              "line": 1152,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataEnabled",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 127,
              "column": 8
            },
            "end": {
              "line": 127,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 129,
              "column": 8
            },
            "end": {
              "line": 129,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataInvalid",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 131,
              "column": 8
            },
            "end": {
              "line": 131,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__data",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1134,
              "column": 8
            },
            "end": {
              "line": 1134,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPending",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1136,
              "column": 8
            },
            "end": {
              "line": 1136,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataOld",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1138,
              "column": 8
            },
            "end": {
              "line": 1138,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataProto",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 139,
              "column": 8
            },
            "end": {
              "line": 139,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataHasAccessor",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 141,
              "column": 8
            },
            "end": {
              "line": 141,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataInstanceProps",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 143,
              "column": 8
            },
            "end": {
              "line": 143,
              "column": 33
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataClientsReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1116,
              "column": 8
            },
            "end": {
              "line": 1116,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPendingClients",
          "type": "Array",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1118,
              "column": 8
            },
            "end": {
              "line": 1118,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataToNotify",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1120,
              "column": 8
            },
            "end": {
              "line": 1120,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataLinkedPaths",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1122,
              "column": 8
            },
            "end": {
              "line": 1122,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHasPaths",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1124,
              "column": 8
            },
            "end": {
              "line": 1124,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataCompoundStorage",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1126,
              "column": 8
            },
            "end": {
              "line": 1126,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHost",
          "type": "Polymer_PropertyEffects",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1128,
              "column": 8
            },
            "end": {
              "line": 1128,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataTemp",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1130,
              "column": 8
            },
            "end": {
              "line": 1130,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataClientsInitialized",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1132,
              "column": 8
            },
            "end": {
              "line": 1132,
              "column": 38
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__computeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1140,
              "column": 8
            },
            "end": {
              "line": 1140,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__reflectEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1142,
              "column": 8
            },
            "end": {
              "line": 1142,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__notifyEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1144,
              "column": 8
            },
            "end": {
              "line": 1144,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__propagateEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1146,
              "column": 8
            },
            "end": {
              "line": 1146,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__observeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1148,
              "column": 8
            },
            "end": {
              "line": 1148,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__readOnly",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1150,
              "column": 8
            },
            "end": {
              "line": 1150,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__templateInfo",
          "type": "!TemplateInfo",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1154,
              "column": 8
            },
            "end": {
              "line": 1154,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_template",
          "type": "HTMLTemplateElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 519,
              "column": 8
            },
            "end": {
              "line": 519,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_importPath",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 521,
              "column": 8
            },
            "end": {
              "line": 521,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "rootPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 523,
              "column": 8
            },
            "end": {
              "line": 523,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "importPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 525,
              "column": 8
            },
            "end": {
              "line": 525,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "root",
          "type": "(StampedTemplate|HTMLElement|ShadowRoot)",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 527,
              "column": 8
            },
            "end": {
              "line": 527,
              "column": 18
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "$",
          "type": "!Object.<string, !Node>",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 529,
              "column": 8
            },
            "end": {
              "line": 529,
              "column": 15
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "value",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 44,
              "column": 10
            },
            "end": {
              "line": 46,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "_stampTemplate",
          "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2320,
              "column": 6
            },
            "end": {
              "line": 2345,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to stamp"
            }
          ],
          "return": {
            "type": "!StampedTemplate",
            "desc": "Cloned template content"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addMethodEventListenerToNode",
          "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 451,
              "column": 6
            },
            "end": {
              "line": 456,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to add listener on"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of method"
            },
            {
              "name": "context",
              "type": "*=",
              "description": "Context the method will be called on (defaults\n  to `node`)"
            }
          ],
          "return": {
            "type": "Function",
            "desc": "Generated handler function"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_addEventListenerToNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 465,
              "column": 6
            },
            "end": {
              "line": 467,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to add event listener to"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "Function",
              "description": "Listener function to add"
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_removeEventListenerFromNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 476,
              "column": 6
            },
            "end": {
              "line": 478,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to remove event listener from"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "Function",
              "description": "Listener function to remove"
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "attributeChangedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`attributeChangedCallback`.\n\nBy default, attributes declared in `properties` metadata are\ndeserialized using their `type` information to properties of the\nsame name.  \"Dash-cased\" attributes are deserialized to \"camelCase\"\nproperties.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 723,
              "column": 6
            },
            "end": {
              "line": 731,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of attribute."
            },
            {
              "name": "old",
              "type": "?string",
              "description": "Old value of attribute."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "Current value of attribute."
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeProperties",
          "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 543,
              "column": 6
            },
            "end": {
              "line": 577,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeProtoProperties",
          "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1184,
              "column": 6
            },
            "end": {
              "line": 1188,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the prototype"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_initializeInstanceProperties",
          "description": "Overrides `Polymer.PropertyAccessors` implementation to avoid setting\n`_setProperty`'s `shouldNotify: true`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1197,
              "column": 6
            },
            "end": {
              "line": 1206,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the instance"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_ensureAttribute",
          "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 236,
              "column": 6
            },
            "end": {
              "line": 240,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to ensure is set."
            },
            {
              "name": "value",
              "type": "string",
              "description": "of the attribute."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_attributeToProperty",
          "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 252,
              "column": 6
            },
            "end": {
              "line": 258,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to deserialize."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "of the attribute."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "type to deserialize to."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_propertyToAttribute",
          "description": "Serializes a property to its associated attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 267,
              "column": 6
            },
            "end": {
              "line": 273,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name to reflect."
            },
            {
              "name": "attribute",
              "type": "string=",
              "description": "Attribute name to reflect."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Property value to refect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_valueToNodeAttribute",
          "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 287,
              "column": 6
            },
            "end": {
              "line": 294,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Element to set attribute to."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to serialize."
            },
            {
              "name": "attribute",
              "type": "string",
              "description": "Attribute name to serialize to."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_serializeValue",
          "description": "Converts a typed JavaScript value to a string.\n\nThis method is called by Polymer when setting JS property values to\nHTML attributes.  Users may override this method on Polymer element\nprototypes to provide serialization for custom types.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 306,
              "column": 6
            },
            "end": {
              "line": 326,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "*",
              "description": "Property value to serialize."
            }
          ],
          "return": {
            "type": "(string|undefined)",
            "desc": "String serialized from the provided property value."
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_deserializeValue",
          "description": "Converts a string to a typed JavaScript value.\n\nThis method is called by Polymer when reading HTML attribute values to\nJS properties.  Users may override this method on Polymer element\nprototypes to provide deserialization for custom `type`s.  Note,\nthe `type` argument is the value of the `type` field provided in the\n`properties` configuration object for a given property, and is\nby convention the constructor for the type to deserialize.\n\nNote: The return value of `undefined` is used as a sentinel value to\nindicate the attribute should be removed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 387,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "?string",
              "description": "Attribute value to deserialize."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "Type to deserialize the string to."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Typed value deserialized from the provided string."
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_createPropertyAccessor",
          "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.  When calling on\na prototype, any overwritten values are saved in `__dataProto`,\nand it is up to the subclasser to decide how/when to set those\nproperties back into the accessor.  When calling on an instance,\nthe overwritten value is set via `_setPendingProperty`, and the\nuser should call `_invalidateProperties` or `_flushProperties`\nfor the values to take effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 411,
              "column": 6
            },
            "end": {
              "line": 431,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "readOnly",
              "type": "boolean=",
              "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_hasAccessor",
          "description": "Returns true if this library created an accessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 439,
              "column": 6
            },
            "end": {
              "line": 441,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if an accessor was created"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_setProperty",
          "description": "Overrides base implementation to ensure all accessors set `shouldNotify`\nto true, for per-property notification tracking.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1473,
              "column": 6
            },
            "end": {
              "line": 1477,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setPendingProperty",
          "description": "Overrides the `PropertyAccessors` implementation to introduce special\ndirty check logic depending on the property & value being set:\n\n1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n   Stored in `__dataTemp`, dirty checked against `__dataTemp`\n2. Object set to simple property (e.g. 'prop': {...})\n   Stored in `__dataTemp` and `__data`, dirty checked against\n   `__dataTemp` by default implementation of `_shouldPropertyChange`\n3. Primitive value set to simple property (e.g. 'prop': 42)\n   Stored in `__data`, dirty checked against `__data`\n\nThe dirty-check is important to prevent cycles due to two-way\nnotification, but paths and objects are only dirty checked against any\nprevious value set during this turn via a \"temporary cache\" that is\ncleared when the last `_propertiesChanged` exits. This is so:\na. any cached array paths (e.g. 'array.3.prop') may be invalidated\n   due to array mutations like shift/unshift/splice; this is fine\n   since path changes are dirty-checked at user entry points like `set`\nb. dirty-checking for objects only lasts one turn to allow the user\n   to mutate the object in-place and re-set it with the same identity\n   and have all sub-properties re-propagated in a subsequent turn.\n\nThe temp cache is not necessarily sufficient to prevent invalid array\npaths, since a splice can happen during the same turn (with pathological\nuser code); we could introduce a \"fixup\" for temporarily cached array\npaths if needed: https://github.com/Polymer/polymer/issues/4227",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1436,
              "column": 6
            },
            "end": {
              "line": 1465,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "True if property should fire notification\n  event (applies only for `notify: true` properties)"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property changed"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_isPropertyPending",
          "description": "Returns true if the specified property has a pending change.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 493,
              "column": 6
            },
            "end": {
              "line": 495,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if property has a pending change"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_invalidateProperties",
          "description": "Overrides `PropertyAccessor`'s default async queuing of\n`_propertiesChanged`: if `__dataReady` is false (has not yet been\nmanually flushed), the function no-ops; otherwise flushes\n`_propertiesChanged` synchronously.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1487,
              "column": 6
            },
            "end": {
              "line": 1491,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_enableProperties",
          "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 523,
              "column": 6
            },
            "end": {
              "line": 532,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_flushProperties",
          "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 543,
              "column": 6
            },
            "end": {
              "line": 551,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "ready",
          "description": "Stamps the element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 651,
              "column": 6
            },
            "end": {
              "line": 657,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_propertiesChanged",
          "description": "Implements `PropertyAccessors`'s properties changed callback.\n\nRuns each class of effects for the batch of changed properties in\na specific order (compute, propagate, reflect, observe, notify).",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1626,
              "column": 6
            },
            "end": {
              "line": 1659,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "currentProps"
            },
            {
              "name": "changedProps"
            },
            {
              "name": "oldProps"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_shouldPropertyChange",
          "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` for primitive types if a\nstrict equality check fails, and returns `true` for all Object/Arrays.\nThe method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 606,
              "column": 6
            },
            "end": {
              "line": 609,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "value",
              "type": "*",
              "description": "New property value"
            },
            {
              "name": "old",
              "type": "*",
              "description": "Previous property value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Whether the property should be considered a change\n  and enqueue a `_propertiesChanged` callback"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_addPropertyEffect",
          "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1220,
              "column": 6
            },
            "end": {
              "line": 1228,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removePropertyEffect",
          "description": "Removes the given property effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1237,
              "column": 6
            },
            "end": {
              "line": 1243,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property the effect was associated with"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object to remove"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasPropertyEffect",
          "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1254,
              "column": 6
            },
            "end": {
              "line": 1257,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "type",
              "type": "string=",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReadOnlyEffect",
          "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1267,
              "column": 6
            },
            "end": {
              "line": 1269,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasNotifyEffect",
          "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1279,
              "column": 6
            },
            "end": {
              "line": 1281,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReflectEffect",
          "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1291,
              "column": 6
            },
            "end": {
              "line": 1293,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasComputedEffect",
          "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1303,
              "column": 6
            },
            "end": {
              "line": 1305,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setPendingPropertyOrPath",
          "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1337,
              "column": 6
            },
            "end": {
              "line": 1369,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(number|string)>)",
              "description": "Path to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "Set to true if this change should\n cause a property notification event dispatch"
            },
            {
              "name": "isPathNotification",
              "type": "boolean=",
              "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setUnmanagedPropertyToNode",
          "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1391,
              "column": 6
            },
            "end": {
              "line": 1399,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "The node to set a property on"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "The property to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value to set"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_enqueueClient",
          "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1501,
              "column": 6
            },
            "end": {
              "line": 1506,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "client",
              "type": "Object",
              "description": "PropertyEffects client to enqueue"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_flushClients",
          "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1514,
              "column": 6
            },
            "end": {
              "line": 1525,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__enableOrFlushClients",
          "description": "(c) the stamped dom enables.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1539,
              "column": 6
            },
            "end": {
              "line": 1552,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_readyClients",
          "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 668,
              "column": 6
            },
            "end": {
              "line": 677,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "setProperties",
          "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1579,
              "column": 6
            },
            "end": {
              "line": 1590,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
            },
            {
              "name": "setReadOnly",
              "type": "boolean=",
              "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_propagatePropertyChanges",
          "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1670,
              "column": 6
            },
            "end": {
              "line": 1680,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProps",
              "type": "Object",
              "description": "Bag of changed properties"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "linkPaths",
          "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1690,
              "column": 6
            },
            "end": {
              "line": 1695,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "to",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Target path to link."
            },
            {
              "name": "from",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Source path to link."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unlinkPaths",
          "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1706,
              "column": 6
            },
            "end": {
              "line": 1711,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Target path to unlink."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifySplices",
          "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1742,
              "column": 6
            },
            "end": {
              "line": 1746,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "splices",
              "type": "Array",
              "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "get",
          "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1767,
              "column": 6
            },
            "end": {
              "line": 1769,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "set",
          "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1791,
              "column": 6
            },
            "end": {
              "line": 1801,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set at the specified path."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "push",
          "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1817,
              "column": 6
            },
            "end": {
              "line": 1826,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to push onto array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "pop",
          "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1841,
              "column": 6
            },
            "end": {
              "line": 1850,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "splice",
          "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1869,
              "column": 6
            },
            "end": {
              "line": 1886,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "start",
              "type": "number",
              "description": "Index from which to start removing/inserting."
            },
            {
              "name": "deleteCount",
              "type": "number",
              "description": "Number of items to remove."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert into array."
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Array of removed items."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "shift",
          "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1901,
              "column": 6
            },
            "end": {
              "line": 1910,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unshift",
          "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1926,
              "column": 6
            },
            "end": {
              "line": 1934,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert info array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifyPath",
          "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1948,
              "column": 6
            },
            "end": {
              "line": 1965,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Value at the path (optional)."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReadOnlyProperty",
          "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1977,
              "column": 6
            },
            "end": {
              "line": 1984,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createPropertyObserver",
          "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1997,
              "column": 6
            },
            "end": {
              "line": 2007,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createMethodObserver",
          "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2019,
              "column": 6
            },
            "end": {
              "line": 2025,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createNotifyingProperty",
          "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2035,
              "column": 6
            },
            "end": {
              "line": 2043,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReflectedProperty",
          "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2053,
              "column": 6
            },
            "end": {
              "line": 2066,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createComputedProperty",
          "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2079,
              "column": 6
            },
            "end": {
              "line": 2085,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_bindTemplate",
          "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2255,
              "column": 6
            },
            "end": {
              "line": 2278,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            },
            {
              "name": "instanceBinding",
              "type": "boolean=",
              "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removeBoundDom",
          "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2355,
              "column": 6
            },
            "end": {
              "line": 2376,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "!StampedTemplate",
              "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "connectedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 633,
              "column": 6
            },
            "end": {
              "line": 638,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`disconnectedCallback`.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 644,
              "column": 6
            },
            "end": {
              "line": 644,
              "column": 31
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_attachDom",
          "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 691,
              "column": 6
            },
            "end": {
              "line": 707,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "StampedTemplate",
              "description": "to attach to the element."
            }
          ],
          "return": {
            "type": "ShadowRoot",
            "desc": "node to which the dom has been attached."
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "updateStyles",
          "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 750,
              "column": 6
            },
            "end": {
              "line": 754,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "properties",
              "type": "Object=",
              "description": "Bag of custom property key/values to\n  apply to this element."
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "resolveUrl",
          "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 767,
              "column": 6
            },
            "end": {
              "line": 772,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "string",
              "description": "URL to resolve."
            },
            {
              "name": "base",
              "type": "string=",
              "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
            }
          ],
          "return": {
            "type": "string",
            "desc": "Rewritten URL relative to base"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        }
      ],
      "staticMethods": [
        {
          "name": "_parseTemplate",
          "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 197,
              "column": 6
            },
            "end": {
              "line": 208,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to parse"
            },
            {
              "name": "outerTemplateInfo",
              "type": "TemplateInfo=",
              "description": "Template metadata from the outer\n  template, for parsing nested templates"
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Parsed template metadata"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateContent",
          "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 783,
              "column": 6
            },
            "end": {
              "line": 786,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template"
            },
            {
              "name": "templateInfo"
            },
            {
              "name": "nodeInfo"
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_parseTemplateNode",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2395,
              "column": 6
            },
            "end": {
              "line": 2409,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateChildNodes",
          "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 257,
              "column": 6
            },
            "end": {
              "line": 294,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "root",
              "type": "Node",
              "description": "Root node whose `childNodes` will be parsed"
            },
            {
              "name": "templateInfo",
              "type": "!TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "!NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNestedTemplate",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2482,
              "column": 6
            },
            "end": {
              "line": 2492,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateNodeAttributes",
          "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 332,
              "column": 6
            },
            "end": {
              "line": 341,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNodeAttribute",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2430,
              "column": 6
            },
            "end": {
              "line": 2466,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            },
            {
              "name": "name",
              "type": "string",
              "description": "Attribute name"
            },
            {
              "name": "value",
              "type": "string",
              "description": "Attribute value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_contentForTemplate",
          "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 387,
              "column": 6
            },
            "end": {
              "line": 390,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template to retrieve `content` for"
            }
          ],
          "return": {
            "type": "DocumentFragment",
            "desc": "Content fragment"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "createPropertiesForAttributes",
          "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 113,
              "column": 6
            },
            "end": {
              "line": 118,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "addPropertyEffect",
          "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2124,
              "column": 6
            },
            "end": {
              "line": 2126,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createPropertyObserver",
          "description": "Creates a single-property observer for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2137,
              "column": 6
            },
            "end": {
              "line": 2139,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createMethodObserver",
          "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2153,
              "column": 6
            },
            "end": {
              "line": 2155,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createNotifyingProperty",
          "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2164,
              "column": 6
            },
            "end": {
              "line": 2166,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReadOnlyProperty",
          "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2183,
              "column": 6
            },
            "end": {
              "line": 2185,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReflectedProperty",
          "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2194,
              "column": 6
            },
            "end": {
              "line": 2196,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createComputedProperty",
          "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2211,
              "column": 6
            },
            "end": {
              "line": 2213,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "bindTemplate",
          "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2227,
              "column": 6
            },
            "end": {
              "line": 2229,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Template metadata object"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addTemplatePropertyEffect",
          "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2292,
              "column": 6
            },
            "end": {
              "line": 2298,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Template metadata to add effect to"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseBindings",
          "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2527,
              "column": 6
            },
            "end": {
              "line": 2592,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "text",
              "type": "string",
              "description": "Text to parse from attribute or textContent"
            },
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Current template metadata"
            }
          ],
          "return": {
            "type": "Array.<!BindingPart>",
            "desc": "Array of binding part metadata"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_evaluateBinding",
          "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2608,
              "column": 6
            },
            "end": {
              "line": 2625,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "inst",
              "type": "this",
              "description": "Element that should be used as scope for\n  binding dependencies"
            },
            {
              "name": "part",
              "type": "BindingPart",
              "description": "Binding part metadata"
            },
            {
              "name": "path",
              "type": "string",
              "description": "Property/path that triggered this effect"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of current property changes"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value the binding part evaluated to"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "finalize",
          "description": "Called automatically when the first element instance is created to\nensure that class finalization work has been completed.\nMay be called by users to eagerly perform class finalization work\nprior to the creation of the first element instance.\n\nClass finalization work generally includes meta-programming such as\ncreating property accessors and any property effect metadata needed for\nthe features used.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 441,
              "column": 6
            },
            "end": {
              "line": 445,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_processStyleText",
          "description": "Gather style text for the template",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 588,
              "column": 6
            },
            "end": {
              "line": 591,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "is",
              "type": "string",
              "description": "Tag name for this element"
            },
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to process"
            },
            {
              "name": "baseURI",
              "type": "string",
              "description": "Base URI to rebase CSS paths against"
            }
          ],
          "return": {
            "type": "string",
            "desc": "The combined CSS text"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_finalizeTemplate",
          "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 602,
              "column": 6
            },
            "end": {
              "line": 621,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "is",
              "type": "string",
              "description": "Tag name (or type extension name) for this element"
            },
            {
              "name": "ext",
              "type": "string=",
              "description": "For type extensions, the tag name that was extended"
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        }
      ],
      "demos": [
        {
          "url": "demo/h2-label/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 41,
          "column": 4
        },
        "end": {
          "line": 53,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "H2Label",
      "attributes": [
        {
          "name": "value",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 44,
              "column": 10
            },
            "end": {
              "line": 46,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "h2-label"
    },
    {
      "description": "```html\n<h2-input label=\"文本框\"></h2-input>\n<h2-input label=\"数字框\" type=\"number\"></h2-input>\n<h2-input label=\"电话\" type=\"tel\" maxlength=\"11\"></h2-input>\n<h2-input label=\"密码框\" type=\"password\"></h2-input>\n<h2-input label=\"颜色框\" type=\"color\"></h2-input>\n<h2-input label=\"日期框\" type=\"date\"></h2-input>\n<h2-input label=\"日期时间框\" type=\"datetime-local\"></h2-input>\n```\n\n`h2-input`",
      "summary": "",
      "path": "h2-input.html",
      "properties": [
        {
          "name": "label",
          "type": "string",
          "description": "组件前面的标签",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 203,
              "column": 10
            },
            "end": {
              "line": 205,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "placeholder",
          "type": "string",
          "description": "占位符",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 210,
              "column": 10
            },
            "end": {
              "line": 212,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "type",
          "type": "string",
          "description": "input 类型,支持的类型见https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 219,
              "column": 10
            },
            "end": {
              "line": 222,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"text\""
        },
        {
          "name": "allowedPattern",
          "type": "string",
          "description": "匹配的正则表达式",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 227,
              "column": 10
            },
            "end": {
              "line": 229,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "preventInvalidInput",
          "type": "boolean",
          "description": "判断是否用正则匹配校验输入",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 234,
              "column": 10
            },
            "end": {
              "line": 237,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "value",
          "type": "string",
          "description": "组件的value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 242,
              "column": 10
            },
            "end": {
              "line": 245,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "required",
          "type": "boolean",
          "description": "Set to true, if the input is required.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 251,
              "column": 10
            },
            "end": {
              "line": 254,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "readonly",
          "type": "boolean",
          "description": "Set to true, if the input is readonly.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 260,
              "column": 10
            },
            "end": {
              "line": 263,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "prefixUnit",
          "type": "string",
          "description": "前缀单位（￥$元吨托等等）",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 268,
              "column": 10
            },
            "end": {
              "line": 270,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "suffixUnit",
          "type": "string",
          "description": "后缀单位（￥$元吨托等等）",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 275,
              "column": 10
            },
            "end": {
              "line": 277,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "minlength",
          "type": "number",
          "description": "输入的最小长度（暂无实际使用）",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 282,
              "column": 10
            },
            "end": {
              "line": 284,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "maxlength",
          "type": "number",
          "description": "输入的最大长度",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 289,
              "column": 10
            },
            "end": {
              "line": 291,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "min",
          "type": "string",
          "description": "最小输入值(数字或日期时间)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 297,
              "column": 10
            },
            "end": {
              "line": 299,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "max",
          "type": "string",
          "description": "最大输入值(数字或日期时间)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 304,
              "column": 10
            },
            "end": {
              "line": 306,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "prompt",
          "type": "string",
          "description": "校验不通过时的提示语内容",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 312,
              "column": 10
            },
            "end": {
              "line": 314,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "__allowedPatternChanged",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 330,
              "column": 6
            },
            "end": {
              "line": 335,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "__refreshUIState",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 337,
              "column": 6
            },
            "end": {
              "line": 343,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "doFocus",
          "description": "输入框获取焦点",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 348,
              "column": 6
            },
            "end": {
              "line": 350,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "validate",
          "description": "校验方法",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 356,
              "column": 6
            },
            "end": {
              "line": 368,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "*"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/h2-input/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 196,
          "column": 4
        },
        "end": {
          "line": 369,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "H2Input",
      "attributes": [
        {
          "name": "label",
          "description": "组件前面的标签",
          "sourceRange": {
            "start": {
              "line": 203,
              "column": 10
            },
            "end": {
              "line": 205,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "placeholder",
          "description": "占位符",
          "sourceRange": {
            "start": {
              "line": 210,
              "column": 10
            },
            "end": {
              "line": 212,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "type",
          "description": "input 类型,支持的类型见https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input",
          "sourceRange": {
            "start": {
              "line": 219,
              "column": 10
            },
            "end": {
              "line": 222,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "allowed-pattern",
          "description": "匹配的正则表达式",
          "sourceRange": {
            "start": {
              "line": 227,
              "column": 10
            },
            "end": {
              "line": 229,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "prevent-invalid-input",
          "description": "判断是否用正则匹配校验输入",
          "sourceRange": {
            "start": {
              "line": 234,
              "column": 10
            },
            "end": {
              "line": 237,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "value",
          "description": "组件的value",
          "sourceRange": {
            "start": {
              "line": 242,
              "column": 10
            },
            "end": {
              "line": 245,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "required",
          "description": "Set to true, if the input is required.",
          "sourceRange": {
            "start": {
              "line": 251,
              "column": 10
            },
            "end": {
              "line": 254,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "readonly",
          "description": "Set to true, if the input is readonly.",
          "sourceRange": {
            "start": {
              "line": 260,
              "column": 10
            },
            "end": {
              "line": 263,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "prefix-unit",
          "description": "前缀单位（￥$元吨托等等）",
          "sourceRange": {
            "start": {
              "line": 268,
              "column": 10
            },
            "end": {
              "line": 270,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "suffix-unit",
          "description": "后缀单位（￥$元吨托等等）",
          "sourceRange": {
            "start": {
              "line": 275,
              "column": 10
            },
            "end": {
              "line": 277,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "minlength",
          "description": "输入的最小长度（暂无实际使用）",
          "sourceRange": {
            "start": {
              "line": 282,
              "column": 10
            },
            "end": {
              "line": 284,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "maxlength",
          "description": "输入的最大长度",
          "sourceRange": {
            "start": {
              "line": 289,
              "column": 10
            },
            "end": {
              "line": 291,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "min",
          "description": "最小输入值(数字或日期时间)",
          "sourceRange": {
            "start": {
              "line": 297,
              "column": 10
            },
            "end": {
              "line": 299,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "max",
          "description": "最大输入值(数字或日期时间)",
          "sourceRange": {
            "start": {
              "line": 304,
              "column": 10
            },
            "end": {
              "line": 306,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "prompt",
          "description": "校验不通过时的提示语内容",
          "sourceRange": {
            "start": {
              "line": 312,
              "column": 10
            },
            "end": {
              "line": 314,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "h2-input"
    },
    {
      "description": "日期选择框\n\n`h2-input-date`",
      "summary": "",
      "path": "h2-input-date.html",
      "properties": [
        {
          "name": "__serializing",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 123,
              "column": 8
            },
            "end": {
              "line": 123,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataCounter",
          "type": "number",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1152,
              "column": 8
            },
            "end": {
              "line": 1152,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataEnabled",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 127,
              "column": 8
            },
            "end": {
              "line": 127,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 129,
              "column": 8
            },
            "end": {
              "line": 129,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataInvalid",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 131,
              "column": 8
            },
            "end": {
              "line": 131,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__data",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1134,
              "column": 8
            },
            "end": {
              "line": 1134,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPending",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1136,
              "column": 8
            },
            "end": {
              "line": 1136,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataOld",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1138,
              "column": 8
            },
            "end": {
              "line": 1138,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataProto",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 139,
              "column": 8
            },
            "end": {
              "line": 139,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataHasAccessor",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 141,
              "column": 8
            },
            "end": {
              "line": 141,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataInstanceProps",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 143,
              "column": 8
            },
            "end": {
              "line": 143,
              "column": 33
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataClientsReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1116,
              "column": 8
            },
            "end": {
              "line": 1116,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPendingClients",
          "type": "Array",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1118,
              "column": 8
            },
            "end": {
              "line": 1118,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataToNotify",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1120,
              "column": 8
            },
            "end": {
              "line": 1120,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataLinkedPaths",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1122,
              "column": 8
            },
            "end": {
              "line": 1122,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHasPaths",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1124,
              "column": 8
            },
            "end": {
              "line": 1124,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataCompoundStorage",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1126,
              "column": 8
            },
            "end": {
              "line": 1126,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHost",
          "type": "Polymer_PropertyEffects",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1128,
              "column": 8
            },
            "end": {
              "line": 1128,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataTemp",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1130,
              "column": 8
            },
            "end": {
              "line": 1130,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataClientsInitialized",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1132,
              "column": 8
            },
            "end": {
              "line": 1132,
              "column": 38
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__computeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1140,
              "column": 8
            },
            "end": {
              "line": 1140,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__reflectEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1142,
              "column": 8
            },
            "end": {
              "line": 1142,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__notifyEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1144,
              "column": 8
            },
            "end": {
              "line": 1144,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__propagateEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1146,
              "column": 8
            },
            "end": {
              "line": 1146,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__observeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1148,
              "column": 8
            },
            "end": {
              "line": 1148,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__readOnly",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1150,
              "column": 8
            },
            "end": {
              "line": 1150,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__templateInfo",
          "type": "!TemplateInfo",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1154,
              "column": 8
            },
            "end": {
              "line": 1154,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_template",
          "type": "HTMLTemplateElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 519,
              "column": 8
            },
            "end": {
              "line": 519,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_importPath",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 521,
              "column": 8
            },
            "end": {
              "line": 521,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "rootPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 523,
              "column": 8
            },
            "end": {
              "line": 523,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "importPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 525,
              "column": 8
            },
            "end": {
              "line": 525,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "root",
          "type": "(StampedTemplate|HTMLElement|ShadowRoot)",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 527,
              "column": 8
            },
            "end": {
              "line": 527,
              "column": 18
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "$",
          "type": "!Object.<string, !Node>",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 529,
              "column": 8
            },
            "end": {
              "line": 529,
              "column": 15
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "value",
          "type": "string",
          "description": "组件返回的时间字符串，默认格式yyyy-MM-dd",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 10
            },
            "end": {
              "line": 68,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_valueChange\""
            }
          }
        },
        {
          "name": "time",
          "type": "number",
          "description": "根据时间字符串返回的时间戳,long型\n（建议用time属性进行初始化赋值和取值）",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 10
            },
            "end": {
              "line": 77,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_timeChange\""
            }
          }
        },
        {
          "name": "label",
          "type": "string",
          "description": "组件标签名",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 10
            },
            "end": {
              "line": 83,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "placeholder",
          "type": "string",
          "description": "组件占位符",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 10
            },
            "end": {
              "line": 89,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "required",
          "type": "boolean",
          "description": "Set to true, if the input is required.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 10
            },
            "end": {
              "line": 98,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "readonly",
          "type": "boolean",
          "description": "Set to true, if the input is readonly.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 104,
              "column": 10
            },
            "end": {
              "line": 107,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "min",
          "type": "string",
          "description": "最小输入值(数字或日期时间)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 111,
              "column": 10
            },
            "end": {
              "line": 113,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "max",
          "type": "string",
          "description": "最大输入值(数字或日期时间)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 10
            },
            "end": {
              "line": 119,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "_stampTemplate",
          "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2320,
              "column": 6
            },
            "end": {
              "line": 2345,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to stamp"
            }
          ],
          "return": {
            "type": "!StampedTemplate",
            "desc": "Cloned template content"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addMethodEventListenerToNode",
          "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 451,
              "column": 6
            },
            "end": {
              "line": 456,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to add listener on"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of method"
            },
            {
              "name": "context",
              "type": "*=",
              "description": "Context the method will be called on (defaults\n  to `node`)"
            }
          ],
          "return": {
            "type": "Function",
            "desc": "Generated handler function"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_addEventListenerToNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 465,
              "column": 6
            },
            "end": {
              "line": 467,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to add event listener to"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "Function",
              "description": "Listener function to add"
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_removeEventListenerFromNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 476,
              "column": 6
            },
            "end": {
              "line": 478,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to remove event listener from"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "Function",
              "description": "Listener function to remove"
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "attributeChangedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`attributeChangedCallback`.\n\nBy default, attributes declared in `properties` metadata are\ndeserialized using their `type` information to properties of the\nsame name.  \"Dash-cased\" attributes are deserialized to \"camelCase\"\nproperties.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 723,
              "column": 6
            },
            "end": {
              "line": 731,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of attribute."
            },
            {
              "name": "old",
              "type": "?string",
              "description": "Old value of attribute."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "Current value of attribute."
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeProperties",
          "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 543,
              "column": 6
            },
            "end": {
              "line": 577,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeProtoProperties",
          "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1184,
              "column": 6
            },
            "end": {
              "line": 1188,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the prototype"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_initializeInstanceProperties",
          "description": "Overrides `Polymer.PropertyAccessors` implementation to avoid setting\n`_setProperty`'s `shouldNotify: true`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1197,
              "column": 6
            },
            "end": {
              "line": 1206,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the instance"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_ensureAttribute",
          "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 236,
              "column": 6
            },
            "end": {
              "line": 240,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to ensure is set."
            },
            {
              "name": "value",
              "type": "string",
              "description": "of the attribute."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_attributeToProperty",
          "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 252,
              "column": 6
            },
            "end": {
              "line": 258,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to deserialize."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "of the attribute."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "type to deserialize to."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_propertyToAttribute",
          "description": "Serializes a property to its associated attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 267,
              "column": 6
            },
            "end": {
              "line": 273,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name to reflect."
            },
            {
              "name": "attribute",
              "type": "string=",
              "description": "Attribute name to reflect."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Property value to refect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_valueToNodeAttribute",
          "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 287,
              "column": 6
            },
            "end": {
              "line": 294,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Element to set attribute to."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to serialize."
            },
            {
              "name": "attribute",
              "type": "string",
              "description": "Attribute name to serialize to."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_serializeValue",
          "description": "Converts a typed JavaScript value to a string.\n\nThis method is called by Polymer when setting JS property values to\nHTML attributes.  Users may override this method on Polymer element\nprototypes to provide serialization for custom types.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 306,
              "column": 6
            },
            "end": {
              "line": 326,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "*",
              "description": "Property value to serialize."
            }
          ],
          "return": {
            "type": "(string|undefined)",
            "desc": "String serialized from the provided property value."
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_deserializeValue",
          "description": "Converts a string to a typed JavaScript value.\n\nThis method is called by Polymer when reading HTML attribute values to\nJS properties.  Users may override this method on Polymer element\nprototypes to provide deserialization for custom `type`s.  Note,\nthe `type` argument is the value of the `type` field provided in the\n`properties` configuration object for a given property, and is\nby convention the constructor for the type to deserialize.\n\nNote: The return value of `undefined` is used as a sentinel value to\nindicate the attribute should be removed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 387,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "?string",
              "description": "Attribute value to deserialize."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "Type to deserialize the string to."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Typed value deserialized from the provided string."
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_createPropertyAccessor",
          "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.  When calling on\na prototype, any overwritten values are saved in `__dataProto`,\nand it is up to the subclasser to decide how/when to set those\nproperties back into the accessor.  When calling on an instance,\nthe overwritten value is set via `_setPendingProperty`, and the\nuser should call `_invalidateProperties` or `_flushProperties`\nfor the values to take effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 411,
              "column": 6
            },
            "end": {
              "line": 431,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "readOnly",
              "type": "boolean=",
              "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_hasAccessor",
          "description": "Returns true if this library created an accessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 439,
              "column": 6
            },
            "end": {
              "line": 441,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if an accessor was created"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_setProperty",
          "description": "Overrides base implementation to ensure all accessors set `shouldNotify`\nto true, for per-property notification tracking.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1473,
              "column": 6
            },
            "end": {
              "line": 1477,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setPendingProperty",
          "description": "Overrides the `PropertyAccessors` implementation to introduce special\ndirty check logic depending on the property & value being set:\n\n1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n   Stored in `__dataTemp`, dirty checked against `__dataTemp`\n2. Object set to simple property (e.g. 'prop': {...})\n   Stored in `__dataTemp` and `__data`, dirty checked against\n   `__dataTemp` by default implementation of `_shouldPropertyChange`\n3. Primitive value set to simple property (e.g. 'prop': 42)\n   Stored in `__data`, dirty checked against `__data`\n\nThe dirty-check is important to prevent cycles due to two-way\nnotification, but paths and objects are only dirty checked against any\nprevious value set during this turn via a \"temporary cache\" that is\ncleared when the last `_propertiesChanged` exits. This is so:\na. any cached array paths (e.g. 'array.3.prop') may be invalidated\n   due to array mutations like shift/unshift/splice; this is fine\n   since path changes are dirty-checked at user entry points like `set`\nb. dirty-checking for objects only lasts one turn to allow the user\n   to mutate the object in-place and re-set it with the same identity\n   and have all sub-properties re-propagated in a subsequent turn.\n\nThe temp cache is not necessarily sufficient to prevent invalid array\npaths, since a splice can happen during the same turn (with pathological\nuser code); we could introduce a \"fixup\" for temporarily cached array\npaths if needed: https://github.com/Polymer/polymer/issues/4227",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1436,
              "column": 6
            },
            "end": {
              "line": 1465,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "True if property should fire notification\n  event (applies only for `notify: true` properties)"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property changed"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_isPropertyPending",
          "description": "Returns true if the specified property has a pending change.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 493,
              "column": 6
            },
            "end": {
              "line": 495,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if property has a pending change"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_invalidateProperties",
          "description": "Overrides `PropertyAccessor`'s default async queuing of\n`_propertiesChanged`: if `__dataReady` is false (has not yet been\nmanually flushed), the function no-ops; otherwise flushes\n`_propertiesChanged` synchronously.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1487,
              "column": 6
            },
            "end": {
              "line": 1491,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_enableProperties",
          "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 523,
              "column": 6
            },
            "end": {
              "line": 532,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_flushProperties",
          "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 543,
              "column": 6
            },
            "end": {
              "line": 551,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "ready",
          "description": "Stamps the element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 651,
              "column": 6
            },
            "end": {
              "line": 657,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_propertiesChanged",
          "description": "Implements `PropertyAccessors`'s properties changed callback.\n\nRuns each class of effects for the batch of changed properties in\na specific order (compute, propagate, reflect, observe, notify).",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1626,
              "column": 6
            },
            "end": {
              "line": 1659,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "currentProps"
            },
            {
              "name": "changedProps"
            },
            {
              "name": "oldProps"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_shouldPropertyChange",
          "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` for primitive types if a\nstrict equality check fails, and returns `true` for all Object/Arrays.\nThe method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 606,
              "column": 6
            },
            "end": {
              "line": 609,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "value",
              "type": "*",
              "description": "New property value"
            },
            {
              "name": "old",
              "type": "*",
              "description": "Previous property value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Whether the property should be considered a change\n  and enqueue a `_propertiesChanged` callback"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_addPropertyEffect",
          "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1220,
              "column": 6
            },
            "end": {
              "line": 1228,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removePropertyEffect",
          "description": "Removes the given property effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1237,
              "column": 6
            },
            "end": {
              "line": 1243,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property the effect was associated with"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object to remove"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasPropertyEffect",
          "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1254,
              "column": 6
            },
            "end": {
              "line": 1257,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "type",
              "type": "string=",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReadOnlyEffect",
          "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1267,
              "column": 6
            },
            "end": {
              "line": 1269,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasNotifyEffect",
          "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1279,
              "column": 6
            },
            "end": {
              "line": 1281,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReflectEffect",
          "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1291,
              "column": 6
            },
            "end": {
              "line": 1293,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasComputedEffect",
          "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1303,
              "column": 6
            },
            "end": {
              "line": 1305,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setPendingPropertyOrPath",
          "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1337,
              "column": 6
            },
            "end": {
              "line": 1369,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(number|string)>)",
              "description": "Path to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "Set to true if this change should\n cause a property notification event dispatch"
            },
            {
              "name": "isPathNotification",
              "type": "boolean=",
              "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setUnmanagedPropertyToNode",
          "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1391,
              "column": 6
            },
            "end": {
              "line": 1399,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "The node to set a property on"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "The property to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value to set"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_enqueueClient",
          "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1501,
              "column": 6
            },
            "end": {
              "line": 1506,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "client",
              "type": "Object",
              "description": "PropertyEffects client to enqueue"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_flushClients",
          "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1514,
              "column": 6
            },
            "end": {
              "line": 1525,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__enableOrFlushClients",
          "description": "(c) the stamped dom enables.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1539,
              "column": 6
            },
            "end": {
              "line": 1552,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_readyClients",
          "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 668,
              "column": 6
            },
            "end": {
              "line": 677,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "setProperties",
          "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1579,
              "column": 6
            },
            "end": {
              "line": 1590,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
            },
            {
              "name": "setReadOnly",
              "type": "boolean=",
              "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_propagatePropertyChanges",
          "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1670,
              "column": 6
            },
            "end": {
              "line": 1680,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProps",
              "type": "Object",
              "description": "Bag of changed properties"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "linkPaths",
          "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1690,
              "column": 6
            },
            "end": {
              "line": 1695,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "to",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Target path to link."
            },
            {
              "name": "from",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Source path to link."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unlinkPaths",
          "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1706,
              "column": 6
            },
            "end": {
              "line": 1711,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Target path to unlink."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifySplices",
          "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1742,
              "column": 6
            },
            "end": {
              "line": 1746,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "splices",
              "type": "Array",
              "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "get",
          "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1767,
              "column": 6
            },
            "end": {
              "line": 1769,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "set",
          "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1791,
              "column": 6
            },
            "end": {
              "line": 1801,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set at the specified path."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "push",
          "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1817,
              "column": 6
            },
            "end": {
              "line": 1826,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to push onto array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "pop",
          "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1841,
              "column": 6
            },
            "end": {
              "line": 1850,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "splice",
          "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1869,
              "column": 6
            },
            "end": {
              "line": 1886,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "start",
              "type": "number",
              "description": "Index from which to start removing/inserting."
            },
            {
              "name": "deleteCount",
              "type": "number",
              "description": "Number of items to remove."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert into array."
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Array of removed items."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "shift",
          "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1901,
              "column": 6
            },
            "end": {
              "line": 1910,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unshift",
          "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1926,
              "column": 6
            },
            "end": {
              "line": 1934,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert info array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifyPath",
          "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1948,
              "column": 6
            },
            "end": {
              "line": 1965,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Value at the path (optional)."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReadOnlyProperty",
          "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1977,
              "column": 6
            },
            "end": {
              "line": 1984,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createPropertyObserver",
          "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1997,
              "column": 6
            },
            "end": {
              "line": 2007,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createMethodObserver",
          "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2019,
              "column": 6
            },
            "end": {
              "line": 2025,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createNotifyingProperty",
          "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2035,
              "column": 6
            },
            "end": {
              "line": 2043,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReflectedProperty",
          "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2053,
              "column": 6
            },
            "end": {
              "line": 2066,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createComputedProperty",
          "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2079,
              "column": 6
            },
            "end": {
              "line": 2085,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_bindTemplate",
          "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2255,
              "column": 6
            },
            "end": {
              "line": 2278,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            },
            {
              "name": "instanceBinding",
              "type": "boolean=",
              "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removeBoundDom",
          "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2355,
              "column": 6
            },
            "end": {
              "line": 2376,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "!StampedTemplate",
              "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "connectedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 633,
              "column": 6
            },
            "end": {
              "line": 638,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`disconnectedCallback`.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 644,
              "column": 6
            },
            "end": {
              "line": 644,
              "column": 31
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_attachDom",
          "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 691,
              "column": 6
            },
            "end": {
              "line": 707,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "StampedTemplate",
              "description": "to attach to the element."
            }
          ],
          "return": {
            "type": "ShadowRoot",
            "desc": "node to which the dom has been attached."
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "updateStyles",
          "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 750,
              "column": 6
            },
            "end": {
              "line": 754,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "properties",
              "type": "Object=",
              "description": "Bag of custom property key/values to\n  apply to this element."
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "resolveUrl",
          "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 767,
              "column": 6
            },
            "end": {
              "line": 772,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "string",
              "description": "URL to resolve."
            },
            {
              "name": "base",
              "type": "string=",
              "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
            }
          ],
          "return": {
            "type": "string",
            "desc": "Rewritten URL relative to base"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_valueChange",
          "description": "返回的时间字符串改变时，设置time为对应的long型的时间戳",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 132,
              "column": 6
            },
            "end": {
              "line": 139,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "_timeChange",
          "description": "long型时间戳改变时，设置value为对应的yyyy-MM-dd格式的时间字符串",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 146,
              "column": 6
            },
            "end": {
              "line": 153,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "time"
            }
          ]
        },
        {
          "name": "_preReplenish",
          "description": "前置填充",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 161,
              "column": 6
            },
            "end": {
              "line": 163,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "str",
              "type": "*"
            },
            {
              "name": "totalLen",
              "type": "number",
              "defaultValue": "0",
              "description": "填充后的长度"
            },
            {
              "name": "replenisher",
              "type": "string",
              "defaultValue": "''",
              "description": "填充的字符"
            }
          ]
        },
        {
          "name": "doFocus",
          "description": "获取输入框焦点",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 168,
              "column": 6
            },
            "end": {
              "line": 170,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "validate",
          "description": "校验",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 175,
              "column": 6
            },
            "end": {
              "line": 177,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [
        {
          "name": "_parseTemplate",
          "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 197,
              "column": 6
            },
            "end": {
              "line": 208,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to parse"
            },
            {
              "name": "outerTemplateInfo",
              "type": "TemplateInfo=",
              "description": "Template metadata from the outer\n  template, for parsing nested templates"
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Parsed template metadata"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateContent",
          "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 783,
              "column": 6
            },
            "end": {
              "line": 786,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template"
            },
            {
              "name": "templateInfo"
            },
            {
              "name": "nodeInfo"
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_parseTemplateNode",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2395,
              "column": 6
            },
            "end": {
              "line": 2409,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateChildNodes",
          "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 257,
              "column": 6
            },
            "end": {
              "line": 294,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "root",
              "type": "Node",
              "description": "Root node whose `childNodes` will be parsed"
            },
            {
              "name": "templateInfo",
              "type": "!TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "!NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNestedTemplate",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2482,
              "column": 6
            },
            "end": {
              "line": 2492,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateNodeAttributes",
          "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 332,
              "column": 6
            },
            "end": {
              "line": 341,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNodeAttribute",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2430,
              "column": 6
            },
            "end": {
              "line": 2466,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            },
            {
              "name": "name",
              "type": "string",
              "description": "Attribute name"
            },
            {
              "name": "value",
              "type": "string",
              "description": "Attribute value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_contentForTemplate",
          "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 387,
              "column": 6
            },
            "end": {
              "line": 390,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template to retrieve `content` for"
            }
          ],
          "return": {
            "type": "DocumentFragment",
            "desc": "Content fragment"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "createPropertiesForAttributes",
          "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 113,
              "column": 6
            },
            "end": {
              "line": 118,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "addPropertyEffect",
          "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2124,
              "column": 6
            },
            "end": {
              "line": 2126,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createPropertyObserver",
          "description": "Creates a single-property observer for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2137,
              "column": 6
            },
            "end": {
              "line": 2139,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createMethodObserver",
          "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2153,
              "column": 6
            },
            "end": {
              "line": 2155,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createNotifyingProperty",
          "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2164,
              "column": 6
            },
            "end": {
              "line": 2166,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReadOnlyProperty",
          "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2183,
              "column": 6
            },
            "end": {
              "line": 2185,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReflectedProperty",
          "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2194,
              "column": 6
            },
            "end": {
              "line": 2196,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createComputedProperty",
          "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2211,
              "column": 6
            },
            "end": {
              "line": 2213,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "bindTemplate",
          "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2227,
              "column": 6
            },
            "end": {
              "line": 2229,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Template metadata object"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addTemplatePropertyEffect",
          "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2292,
              "column": 6
            },
            "end": {
              "line": 2298,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Template metadata to add effect to"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseBindings",
          "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2527,
              "column": 6
            },
            "end": {
              "line": 2592,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "text",
              "type": "string",
              "description": "Text to parse from attribute or textContent"
            },
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Current template metadata"
            }
          ],
          "return": {
            "type": "Array.<!BindingPart>",
            "desc": "Array of binding part metadata"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_evaluateBinding",
          "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2608,
              "column": 6
            },
            "end": {
              "line": 2625,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "inst",
              "type": "this",
              "description": "Element that should be used as scope for\n  binding dependencies"
            },
            {
              "name": "part",
              "type": "BindingPart",
              "description": "Binding part metadata"
            },
            {
              "name": "path",
              "type": "string",
              "description": "Property/path that triggered this effect"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of current property changes"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value the binding part evaluated to"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "finalize",
          "description": "Called automatically when the first element instance is created to\nensure that class finalization work has been completed.\nMay be called by users to eagerly perform class finalization work\nprior to the creation of the first element instance.\n\nClass finalization work generally includes meta-programming such as\ncreating property accessors and any property effect metadata needed for\nthe features used.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 441,
              "column": 6
            },
            "end": {
              "line": 445,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_processStyleText",
          "description": "Gather style text for the template",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 588,
              "column": 6
            },
            "end": {
              "line": 591,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "is",
              "type": "string",
              "description": "Tag name for this element"
            },
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to process"
            },
            {
              "name": "baseURI",
              "type": "string",
              "description": "Base URI to rebase CSS paths against"
            }
          ],
          "return": {
            "type": "string",
            "desc": "The combined CSS text"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_finalizeTemplate",
          "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 602,
              "column": 6
            },
            "end": {
              "line": 621,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "is",
              "type": "string",
              "description": "Tag name (or type extension name) for this element"
            },
            {
              "name": "ext",
              "type": "string=",
              "description": "For type extensions, the tag name that was extended"
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        }
      ],
      "demos": [
        {
          "url": "demo/h2-input-date/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 58,
          "column": 4
        },
        "end": {
          "line": 178,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "H2InputDate",
      "attributes": [
        {
          "name": "value",
          "description": "组件返回的时间字符串，默认格式yyyy-MM-dd",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 10
            },
            "end": {
              "line": 68,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "time",
          "description": "根据时间字符串返回的时间戳,long型\n（建议用time属性进行初始化赋值和取值）",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 10
            },
            "end": {
              "line": 77,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "label",
          "description": "组件标签名",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 10
            },
            "end": {
              "line": 83,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "placeholder",
          "description": "组件占位符",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 10
            },
            "end": {
              "line": 89,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "required",
          "description": "Set to true, if the input is required.",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 10
            },
            "end": {
              "line": 98,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "readonly",
          "description": "Set to true, if the input is readonly.",
          "sourceRange": {
            "start": {
              "line": 104,
              "column": 10
            },
            "end": {
              "line": 107,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "min",
          "description": "最小输入值(数字或日期时间)",
          "sourceRange": {
            "start": {
              "line": 111,
              "column": 10
            },
            "end": {
              "line": 113,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "max",
          "description": "最大输入值(数字或日期时间)",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 10
            },
            "end": {
              "line": 119,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "time-changed",
          "description": "Fired when the `time` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "h2-input-date"
    },
    {
      "description": "日期时间选择框\n\n`h2-input-datetime`",
      "summary": "",
      "path": "h2-input-datetime.html",
      "properties": [
        {
          "name": "value",
          "type": "string",
          "description": "组件返回的时间字符串，默认格式yyyy-MM-ddTHH:mm，如2017-10-26T12:20",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 65,
              "column": 10
            },
            "end": {
              "line": 69,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_valueChange\""
            }
          }
        },
        {
          "name": "timestamp",
          "type": "number",
          "description": "时间戳",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 10
            },
            "end": {
              "line": 77,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_timestampChange\""
            }
          }
        },
        {
          "name": "label",
          "type": "string",
          "description": "组件标签名",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 10
            },
            "end": {
              "line": 83,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "placeholder",
          "type": "string",
          "description": "组件占位符",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 10
            },
            "end": {
              "line": 89,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "required",
          "type": "boolean",
          "description": "Set to true, if the input is required.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 10
            },
            "end": {
              "line": 98,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "readonly",
          "type": "boolean",
          "description": "Set to true, if the input is readonly.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 104,
              "column": 10
            },
            "end": {
              "line": 107,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "min",
          "type": "string",
          "description": "最小输入值(数字或日期时间)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 111,
              "column": 10
            },
            "end": {
              "line": 113,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "max",
          "type": "string",
          "description": "最大输入值(数字或日期时间)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 10
            },
            "end": {
              "line": 119,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "_valueChange",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 131,
              "column": 6
            },
            "end": {
              "line": 138,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "_timestampChange",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 144,
              "column": 6
            },
            "end": {
              "line": 151,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "timestamp"
            }
          ]
        },
        {
          "name": "doFocus",
          "description": "获取输入框焦点",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 156,
              "column": 6
            },
            "end": {
              "line": 158,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "validate",
          "description": "校验",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 163,
              "column": 6
            },
            "end": {
              "line": 165,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/h2-input-datetime/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 59,
          "column": 4
        },
        "end": {
          "line": 166,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "H2InputDatetime",
      "attributes": [
        {
          "name": "value",
          "description": "组件返回的时间字符串，默认格式yyyy-MM-ddTHH:mm，如2017-10-26T12:20",
          "sourceRange": {
            "start": {
              "line": 65,
              "column": 10
            },
            "end": {
              "line": 69,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "timestamp",
          "description": "时间戳",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 10
            },
            "end": {
              "line": 77,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "label",
          "description": "组件标签名",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 10
            },
            "end": {
              "line": 83,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "placeholder",
          "description": "组件占位符",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 10
            },
            "end": {
              "line": 89,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "required",
          "description": "Set to true, if the input is required.",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 10
            },
            "end": {
              "line": 98,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "readonly",
          "description": "Set to true, if the input is readonly.",
          "sourceRange": {
            "start": {
              "line": 104,
              "column": 10
            },
            "end": {
              "line": 107,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "min",
          "description": "最小输入值(数字或日期时间)",
          "sourceRange": {
            "start": {
              "line": 111,
              "column": 10
            },
            "end": {
              "line": 113,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "max",
          "description": "最大输入值(数字或日期时间)",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 10
            },
            "end": {
              "line": 119,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "timestamp-changed",
          "description": "Fired when the `timestamp` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "h2-input-datetime"
    },
    {
      "description": "Example:\n```html\n<h2-select label=\"球员\" placeholder=\"选择球员\" items=\"[[items]]\"></h2-select>\n<h2-select label=\"球员\" placeholder=\"选择球员\" multi items=\"[[items]]\" value=\"1,2\"></h2-select>\n\n<script>\n  items = [\n    {\"label\": \"梅西\", \"value\": 1},\n    {\"label\": \"C罗\", \"value\": 2},\n    {\"label\": \"苏亚雷斯\", \"value\": 3},\n    {\"label\": \"库蒂尼奥\", \"value\": 4},\n    {\"label\": \"特尔斯特根\", \"value\": 5},\n    {\"label\": \"保利尼奥\", \"value\": 6},\n    {\"label\": \"内马尔\", \"value\": 13}\n  ];\n```\n## Styling\n\nThe following custom properties and mixins are available for styling:\n\n|Custom property | Description | Default|\n|----------------|-------------|----------|\n|`--h2-select-label` | Mixin applied to the select label | {}\n|`--h2-select-tag` | Mixin applied to the selected tag (the eyeball) | {}\n|`--h2-select-tag-deleter` | Mixin applied to the deleter of each tag| {}\n|`--h2-select-tag-cursor` | Mixin applied to the cursor of the select | {}\n|`--h2-select-dropdown` | Mixin applied to the dropdown snippet of the select | {}",
      "summary": "",
      "path": "h2-select.html",
      "properties": [
        {
          "name": "value",
          "type": "string",
          "description": "The selected value of this select,  if `multi` is true,\nthe value will join with comma ( `selectedValues.map(selected => selected[this.attrForValue]).join(',')` ).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 291,
              "column": 10
            },
            "end": {
              "line": 294,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "selectedValues",
          "type": "array",
          "description": "The selected value objects of this select.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 300,
              "column": 10
            },
            "end": {
              "line": 303,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "items",
          "type": "array",
          "description": "The candidate selection of this select.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 312,
              "column": 10
            },
            "end": {
              "line": 314,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "__selected",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 316,
              "column": 10
            },
            "end": {
              "line": 318,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "label",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 325,
              "column": 10
            },
            "end": {
              "line": 327,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "placeholder",
          "type": "string",
          "description": "The placeholder of the select.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 332,
              "column": 10
            },
            "end": {
              "line": 334,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "multi",
          "type": "boolean",
          "description": "If true, multiple selections are allowed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 340,
              "column": 10
            },
            "end": {
              "line": 343,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "required",
          "type": "boolean",
          "description": "Set to true, if the selection is required.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 350,
              "column": 10
            },
            "end": {
              "line": 353,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "readonly",
          "type": "boolean",
          "description": "Set to true, if the select is readonly.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 359,
              "column": 10
            },
            "end": {
              "line": 362,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "attrForValue",
          "type": "string",
          "description": "用来取值的字段，默认为value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 367,
              "column": 10
            },
            "end": {
              "line": 370,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"value\""
        },
        {
          "name": "attrForLabel",
          "type": "string",
          "description": "用来展示的字段，默认为label",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 375,
              "column": 10
            },
            "end": {
              "line": 378,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"label\""
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 394,
              "column": 6
            },
            "end": {
              "line": 399,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_onInputClick",
          "description": "点击事件",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 404,
              "column": 6
            },
            "end": {
              "line": 410,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "{\n    target: {classList}\n}"
            }
          ]
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 412,
              "column": 6
            },
            "end": {
              "line": 428,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "items = []"
            }
          ]
        },
        {
          "name": "_selectedValuesChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 430,
              "column": 6
            },
            "end": {
              "line": 433,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "__selectedChanged",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 435,
              "column": 6
            },
            "end": {
              "line": 437,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_deleteTag",
          "description": "删除Tag项，事件处理函数",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 442,
              "column": 6
            },
            "end": {
              "line": 446,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_updatePressed",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 452,
              "column": 6
            },
            "end": {
              "line": 472,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ]
        },
        {
          "name": "__focusOnLast",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 474,
              "column": 6
            },
            "end": {
              "line": 477,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_displayPlaceholder",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 479,
              "column": 6
            },
            "end": {
              "line": 481,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "display"
            }
          ]
        },
        {
          "name": "openCollapse",
          "description": "Open collapse.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 486,
              "column": 6
            },
            "end": {
              "line": 489,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "closeCollapse",
          "description": "Close collapse.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 494,
              "column": 6
            },
            "end": {
              "line": 497,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "toggleCollapse",
          "description": "Toggle collapse.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 502,
              "column": 6
            },
            "end": {
              "line": 509,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "doFocus",
          "description": "Set focus to select.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 514,
              "column": 6
            },
            "end": {
              "line": 516,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "validate",
          "description": "Validate, true if the select is set to be required and this.selectedValues.length > 0, or else false.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 522,
              "column": 6
            },
            "end": {
              "line": 524,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/h2-select/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 283,
          "column": 4
        },
        "end": {
          "line": 525,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "H2Select",
      "attributes": [
        {
          "name": "value",
          "description": "The selected value of this select,  if `multi` is true,\nthe value will join with comma ( `selectedValues.map(selected => selected[this.attrForValue]).join(',')` ).",
          "sourceRange": {
            "start": {
              "line": 291,
              "column": 10
            },
            "end": {
              "line": 294,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "selected-values",
          "description": "The selected value objects of this select.",
          "sourceRange": {
            "start": {
              "line": 300,
              "column": 10
            },
            "end": {
              "line": 303,
              "column": 11
            }
          },
          "metadata": {},
          "type": "array"
        },
        {
          "name": "items",
          "description": "The candidate selection of this select.",
          "sourceRange": {
            "start": {
              "line": 312,
              "column": 10
            },
            "end": {
              "line": 314,
              "column": 11
            }
          },
          "metadata": {},
          "type": "array"
        },
        {
          "name": "label",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 325,
              "column": 10
            },
            "end": {
              "line": 327,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "placeholder",
          "description": "The placeholder of the select.",
          "sourceRange": {
            "start": {
              "line": 332,
              "column": 10
            },
            "end": {
              "line": 334,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "multi",
          "description": "If true, multiple selections are allowed.",
          "sourceRange": {
            "start": {
              "line": 340,
              "column": 10
            },
            "end": {
              "line": 343,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "required",
          "description": "Set to true, if the selection is required.",
          "sourceRange": {
            "start": {
              "line": 350,
              "column": 10
            },
            "end": {
              "line": 353,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "readonly",
          "description": "Set to true, if the select is readonly.",
          "sourceRange": {
            "start": {
              "line": 359,
              "column": 10
            },
            "end": {
              "line": 362,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "attr-for-value",
          "description": "用来取值的字段，默认为value",
          "sourceRange": {
            "start": {
              "line": 367,
              "column": 10
            },
            "end": {
              "line": 370,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "attr-for-label",
          "description": "用来展示的字段，默认为label",
          "sourceRange": {
            "start": {
              "line": 375,
              "column": 10
            },
            "end": {
              "line": 378,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "selected-values-changed",
          "description": "Fired when the `selectedValues` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "h2-select"
    },
    {
      "description": "`h2-checkbox-group`\n\nExample:\n```html\n<h2-checkbox-group label=\"材料\" value=\"0\" items=\"{{items}}\"></h2-checkbox-group>\n\n<script>\n  items = [\n    {label: '薄膜', value: 0},\n    {label: '纤维', value: 1},\n    {label: '塑料', value: 2},\n    {label: '其它', value: 3}\n  ];\n</script>\n```\n\n## Styling\n\nThe following custom properties and mixins are available for styling:\n\n|Custom property | Description | Default|\n|----------------|-------------|----------|\n|`--h2-checkbox-group-label` | Mixin applied to the label of checkbox | {}\n|`--h2-checkbox-group-checked-color` | Mixin applied to color of the checkbox when it is checked | #0099FF",
      "summary": "",
      "path": "h2-checkbox-group.html",
      "properties": [
        {
          "name": "label",
          "type": "string",
          "description": "The label of the Checkbox",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 10
            },
            "end": {
              "line": 89,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "items",
          "type": "array",
          "description": "Candidates of the checkbox group.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 10
            },
            "end": {
              "line": 97,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_items",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 99,
              "column": 10
            },
            "end": {
              "line": 102,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "value",
          "type": "string",
          "description": "The selected value of checkbox group.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 108,
              "column": 10
            },
            "end": {
              "line": 111,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "selectedValues",
          "type": "array",
          "description": "The selected value items of checkbox group.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 10
            },
            "end": {
              "line": 120,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "attrForValue",
          "type": "string",
          "description": "Attribute name for label.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 126,
              "column": 10
            },
            "end": {
              "line": 129,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"value\""
        },
        {
          "name": "attrForLabel",
          "type": "string",
          "description": "Attribute name for label.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 137,
              "column": 10
            },
            "end": {
              "line": 140,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"label\""
        },
        {
          "name": "required",
          "type": "boolean",
          "description": "Set to true if the selection is required.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 10
            },
            "end": {
              "line": 150,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "__computedInnerItems",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 164,
              "column": 6
            },
            "end": {
              "line": 168,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "items = []"
            },
            {
              "name": "value",
              "defaultValue": "''"
            }
          ]
        },
        {
          "name": "__checkedChangeHandler",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 170,
              "column": 6
            },
            "end": {
              "line": 172,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "__valueChanged",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 177,
              "column": 6
            },
            "end": {
              "line": 180,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "defaultValue": "''"
            },
            {
              "name": "items = []"
            }
          ]
        },
        {
          "name": "__parseValues",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 185,
              "column": 6
            },
            "end": {
              "line": 187,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "defaultValue": "''"
            }
          ]
        },
        {
          "name": "validate",
          "description": "Validate, true if the select is set to be required and this.selectedValues.length > 0, or else false.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 193,
              "column": 6
            },
            "end": {
              "line": 195,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/h2-checkbox-group/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 78,
          "column": 4
        },
        "end": {
          "line": 197,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "H2CheckboxGroup",
      "attributes": [
        {
          "name": "label",
          "description": "The label of the Checkbox",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 10
            },
            "end": {
              "line": 89,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "items",
          "description": "Candidates of the checkbox group.",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 10
            },
            "end": {
              "line": 97,
              "column": 11
            }
          },
          "metadata": {},
          "type": "array"
        },
        {
          "name": "value",
          "description": "The selected value of checkbox group.",
          "sourceRange": {
            "start": {
              "line": 108,
              "column": 10
            },
            "end": {
              "line": 111,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "selected-values",
          "description": "The selected value items of checkbox group.",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 10
            },
            "end": {
              "line": 120,
              "column": 11
            }
          },
          "metadata": {},
          "type": "array"
        },
        {
          "name": "attr-for-value",
          "description": "Attribute name for label.",
          "sourceRange": {
            "start": {
              "line": 126,
              "column": 10
            },
            "end": {
              "line": 129,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "attr-for-label",
          "description": "Attribute name for label.",
          "sourceRange": {
            "start": {
              "line": 137,
              "column": 10
            },
            "end": {
              "line": 140,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "required",
          "description": "Set to true if the selection is required.",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 10
            },
            "end": {
              "line": 150,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "selected-values-changed",
          "description": "Fired when the `selectedValues` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "h2-checkbox-group"
    },
    {
      "description": "```html\n\n<h2-radio id=\"radio\" label=\"性别\" value=1></h2-radio>\n<h2-radio id=\"radio2\" label=\"姓名\" attr-for-value=\"id\" attr-for-label=\"name\" value=\"3\"></h2-radio>\n\n<script>\n    radio.items = [{value: 1, label: \"男\"}, {value: 2, label: \"女\"}];\n    radio2.items = [{id: 1, name: \"张三\"}, {id: 2, name: \"李四\"}, {id: 3, name: \"王五\"}]\n</script>\n```\n\n`h2-radio`",
      "summary": "",
      "path": "h2-radio.html",
      "properties": [
        {
          "name": "label",
          "type": "string",
          "description": "标签名字",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 10
            },
            "end": {
              "line": 114,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "value",
          "type": "string",
          "description": "初始选择项和items的value值相对应\neg：1",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 10
            },
            "end": {
              "line": 126,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "items",
          "type": "array",
          "description": "需要展示的数据项\neg：[{value:1, label:\"全部\", count:\"19\"}]",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 135,
              "column": 10
            },
            "end": {
              "line": 137,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "required",
          "type": "boolean",
          "description": "Set to true, if the selection is required.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 10
            },
            "end": {
              "line": 146,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "readonly",
          "type": "boolean",
          "description": "Set to true, if the radio is readonly.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 152,
              "column": 10
            },
            "end": {
              "line": 155,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "attrForValue",
          "type": "string",
          "description": "值字段名，默认为value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 161,
              "column": 10
            },
            "end": {
              "line": 164,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"value\""
        },
        {
          "name": "attrForLabel",
          "type": "string",
          "description": "用来展示的字段名，默认为label",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 170,
              "column": 10
            },
            "end": {
              "line": 173,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"label\""
        }
      ],
      "methods": [
        {
          "name": "_requiredChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 187,
              "column": 6
            },
            "end": {
              "line": 192,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "required"
            },
            {
              "name": "items = []"
            }
          ]
        },
        {
          "name": "validate",
          "description": "It always return true.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 6
            },
            "end": {
              "line": 200,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/h2-radio/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 102,
          "column": 4
        },
        "end": {
          "line": 201,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "H2Radio",
      "attributes": [
        {
          "name": "label",
          "description": "标签名字",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 10
            },
            "end": {
              "line": 114,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "value",
          "description": "初始选择项和items的value值相对应\neg：1",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 10
            },
            "end": {
              "line": 126,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "items",
          "description": "需要展示的数据项\neg：[{value:1, label:\"全部\", count:\"19\"}]",
          "sourceRange": {
            "start": {
              "line": 135,
              "column": 10
            },
            "end": {
              "line": 137,
              "column": 11
            }
          },
          "metadata": {},
          "type": "array"
        },
        {
          "name": "required",
          "description": "Set to true, if the selection is required.",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 10
            },
            "end": {
              "line": 146,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "readonly",
          "description": "Set to true, if the radio is readonly.",
          "sourceRange": {
            "start": {
              "line": 152,
              "column": 10
            },
            "end": {
              "line": 155,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "attr-for-value",
          "description": "值字段名，默认为value",
          "sourceRange": {
            "start": {
              "line": 161,
              "column": 10
            },
            "end": {
              "line": 164,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "attr-for-label",
          "description": "用来展示的字段名，默认为label",
          "sourceRange": {
            "start": {
              "line": 170,
              "column": 10
            },
            "end": {
              "line": 173,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "h2-radio"
    },
    {
      "description": "```javascript\n\n<h2-textarea label=\"备注\"></h2-textarea>\n<h2-textarea label=\"备注\" required></h2-textarea>\n```\n\n`h2-textarea`",
      "summary": "",
      "path": "h2-textarea.html",
      "properties": [
        {
          "name": "__serializing",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 123,
              "column": 8
            },
            "end": {
              "line": 123,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataCounter",
          "type": "number",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1152,
              "column": 8
            },
            "end": {
              "line": 1152,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataEnabled",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 127,
              "column": 8
            },
            "end": {
              "line": 127,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 129,
              "column": 8
            },
            "end": {
              "line": 129,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataInvalid",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 131,
              "column": 8
            },
            "end": {
              "line": 131,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__data",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1134,
              "column": 8
            },
            "end": {
              "line": 1134,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPending",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1136,
              "column": 8
            },
            "end": {
              "line": 1136,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataOld",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1138,
              "column": 8
            },
            "end": {
              "line": 1138,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataProto",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 139,
              "column": 8
            },
            "end": {
              "line": 139,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataHasAccessor",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 141,
              "column": 8
            },
            "end": {
              "line": 141,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataInstanceProps",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 143,
              "column": 8
            },
            "end": {
              "line": 143,
              "column": 33
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataClientsReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1116,
              "column": 8
            },
            "end": {
              "line": 1116,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPendingClients",
          "type": "Array",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1118,
              "column": 8
            },
            "end": {
              "line": 1118,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataToNotify",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1120,
              "column": 8
            },
            "end": {
              "line": 1120,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataLinkedPaths",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1122,
              "column": 8
            },
            "end": {
              "line": 1122,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHasPaths",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1124,
              "column": 8
            },
            "end": {
              "line": 1124,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataCompoundStorage",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1126,
              "column": 8
            },
            "end": {
              "line": 1126,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHost",
          "type": "Polymer_PropertyEffects",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1128,
              "column": 8
            },
            "end": {
              "line": 1128,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataTemp",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1130,
              "column": 8
            },
            "end": {
              "line": 1130,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataClientsInitialized",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1132,
              "column": 8
            },
            "end": {
              "line": 1132,
              "column": 38
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__computeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1140,
              "column": 8
            },
            "end": {
              "line": 1140,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__reflectEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1142,
              "column": 8
            },
            "end": {
              "line": 1142,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__notifyEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1144,
              "column": 8
            },
            "end": {
              "line": 1144,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__propagateEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1146,
              "column": 8
            },
            "end": {
              "line": 1146,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__observeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1148,
              "column": 8
            },
            "end": {
              "line": 1148,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__readOnly",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1150,
              "column": 8
            },
            "end": {
              "line": 1150,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__templateInfo",
          "type": "!TemplateInfo",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1154,
              "column": 8
            },
            "end": {
              "line": 1154,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_template",
          "type": "HTMLTemplateElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 519,
              "column": 8
            },
            "end": {
              "line": 519,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_importPath",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 521,
              "column": 8
            },
            "end": {
              "line": 521,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "rootPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 523,
              "column": 8
            },
            "end": {
              "line": 523,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "importPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 525,
              "column": 8
            },
            "end": {
              "line": 525,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "root",
          "type": "(StampedTemplate|HTMLElement|ShadowRoot)",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 527,
              "column": 8
            },
            "end": {
              "line": 527,
              "column": 18
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "$",
          "type": "!Object.<string, !Node>",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 529,
              "column": 8
            },
            "end": {
              "line": 529,
              "column": 15
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "value",
          "type": "(string|number)",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 10
            },
            "end": {
              "line": 115,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "rows",
          "type": "number",
          "description": "The initial number of rows.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 124,
              "column": 10
            },
            "end": {
              "line": 127,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1"
        },
        {
          "name": "autocomplete",
          "type": "string",
          "description": "Bound to the textarea's `autocomplete` attribute.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 132,
              "column": 10
            },
            "end": {
              "line": 135,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"off\""
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "description": "Bound to the textarea's `autofocus` attribute.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 10
            },
            "end": {
              "line": 143,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "inputmode",
          "type": "string",
          "description": "Bound to the textarea's `inputmode` attribute.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 148,
              "column": 10
            },
            "end": {
              "line": 150,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "placeholder",
          "type": "string",
          "description": "Bound to the textarea's `placeholder` attribute.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 10
            },
            "end": {
              "line": 157,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "readonly",
          "type": "boolean",
          "description": "Bound to the textarea's `readonly` attribute.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 162,
              "column": 10
            },
            "end": {
              "line": 164,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "required",
          "type": "boolean",
          "description": "Set to true to mark the textarea as required.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 169,
              "column": 10
            },
            "end": {
              "line": 171,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "minlength",
          "type": "number",
          "description": "The minimum length of the input value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 176,
              "column": 10
            },
            "end": {
              "line": 178,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "maxlength",
          "type": "number",
          "description": "The maximum length of the input value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 183,
              "column": 10
            },
            "end": {
              "line": 185,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "label",
          "type": "string",
          "description": "Bound to the textarea's `aria-label` attribute.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 190,
              "column": 10
            },
            "end": {
              "line": 192,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "prompt",
          "type": "string",
          "description": "The prompt to show when textarea is invalid.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 196,
              "column": 10
            },
            "end": {
              "line": 198,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "_stampTemplate",
          "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2320,
              "column": 6
            },
            "end": {
              "line": 2345,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to stamp"
            }
          ],
          "return": {
            "type": "!StampedTemplate",
            "desc": "Cloned template content"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addMethodEventListenerToNode",
          "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 451,
              "column": 6
            },
            "end": {
              "line": 456,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to add listener on"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of method"
            },
            {
              "name": "context",
              "type": "*=",
              "description": "Context the method will be called on (defaults\n  to `node`)"
            }
          ],
          "return": {
            "type": "Function",
            "desc": "Generated handler function"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_addEventListenerToNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 465,
              "column": 6
            },
            "end": {
              "line": 467,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to add event listener to"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "Function",
              "description": "Listener function to add"
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_removeEventListenerFromNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 476,
              "column": 6
            },
            "end": {
              "line": 478,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to remove event listener from"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "Function",
              "description": "Listener function to remove"
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "attributeChangedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`attributeChangedCallback`.\n\nBy default, attributes declared in `properties` metadata are\ndeserialized using their `type` information to properties of the\nsame name.  \"Dash-cased\" attributes are deserialized to \"camelCase\"\nproperties.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 723,
              "column": 6
            },
            "end": {
              "line": 731,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of attribute."
            },
            {
              "name": "old",
              "type": "?string",
              "description": "Old value of attribute."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "Current value of attribute."
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeProperties",
          "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 543,
              "column": 6
            },
            "end": {
              "line": 577,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeProtoProperties",
          "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1184,
              "column": 6
            },
            "end": {
              "line": 1188,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the prototype"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_initializeInstanceProperties",
          "description": "Overrides `Polymer.PropertyAccessors` implementation to avoid setting\n`_setProperty`'s `shouldNotify: true`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1197,
              "column": 6
            },
            "end": {
              "line": 1206,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the instance"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_ensureAttribute",
          "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 236,
              "column": 6
            },
            "end": {
              "line": 240,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to ensure is set."
            },
            {
              "name": "value",
              "type": "string",
              "description": "of the attribute."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_attributeToProperty",
          "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 252,
              "column": 6
            },
            "end": {
              "line": 258,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to deserialize."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "of the attribute."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "type to deserialize to."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_propertyToAttribute",
          "description": "Serializes a property to its associated attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 267,
              "column": 6
            },
            "end": {
              "line": 273,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name to reflect."
            },
            {
              "name": "attribute",
              "type": "string=",
              "description": "Attribute name to reflect."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Property value to refect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_valueToNodeAttribute",
          "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 287,
              "column": 6
            },
            "end": {
              "line": 294,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Element to set attribute to."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to serialize."
            },
            {
              "name": "attribute",
              "type": "string",
              "description": "Attribute name to serialize to."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_serializeValue",
          "description": "Converts a typed JavaScript value to a string.\n\nThis method is called by Polymer when setting JS property values to\nHTML attributes.  Users may override this method on Polymer element\nprototypes to provide serialization for custom types.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 306,
              "column": 6
            },
            "end": {
              "line": 326,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "*",
              "description": "Property value to serialize."
            }
          ],
          "return": {
            "type": "(string|undefined)",
            "desc": "String serialized from the provided property value."
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_deserializeValue",
          "description": "Converts a string to a typed JavaScript value.\n\nThis method is called by Polymer when reading HTML attribute values to\nJS properties.  Users may override this method on Polymer element\nprototypes to provide deserialization for custom `type`s.  Note,\nthe `type` argument is the value of the `type` field provided in the\n`properties` configuration object for a given property, and is\nby convention the constructor for the type to deserialize.\n\nNote: The return value of `undefined` is used as a sentinel value to\nindicate the attribute should be removed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 387,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "?string",
              "description": "Attribute value to deserialize."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "Type to deserialize the string to."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Typed value deserialized from the provided string."
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_createPropertyAccessor",
          "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.  When calling on\na prototype, any overwritten values are saved in `__dataProto`,\nand it is up to the subclasser to decide how/when to set those\nproperties back into the accessor.  When calling on an instance,\nthe overwritten value is set via `_setPendingProperty`, and the\nuser should call `_invalidateProperties` or `_flushProperties`\nfor the values to take effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 411,
              "column": 6
            },
            "end": {
              "line": 431,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "readOnly",
              "type": "boolean=",
              "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_hasAccessor",
          "description": "Returns true if this library created an accessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 439,
              "column": 6
            },
            "end": {
              "line": 441,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if an accessor was created"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_setProperty",
          "description": "Overrides base implementation to ensure all accessors set `shouldNotify`\nto true, for per-property notification tracking.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1473,
              "column": 6
            },
            "end": {
              "line": 1477,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setPendingProperty",
          "description": "Overrides the `PropertyAccessors` implementation to introduce special\ndirty check logic depending on the property & value being set:\n\n1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n   Stored in `__dataTemp`, dirty checked against `__dataTemp`\n2. Object set to simple property (e.g. 'prop': {...})\n   Stored in `__dataTemp` and `__data`, dirty checked against\n   `__dataTemp` by default implementation of `_shouldPropertyChange`\n3. Primitive value set to simple property (e.g. 'prop': 42)\n   Stored in `__data`, dirty checked against `__data`\n\nThe dirty-check is important to prevent cycles due to two-way\nnotification, but paths and objects are only dirty checked against any\nprevious value set during this turn via a \"temporary cache\" that is\ncleared when the last `_propertiesChanged` exits. This is so:\na. any cached array paths (e.g. 'array.3.prop') may be invalidated\n   due to array mutations like shift/unshift/splice; this is fine\n   since path changes are dirty-checked at user entry points like `set`\nb. dirty-checking for objects only lasts one turn to allow the user\n   to mutate the object in-place and re-set it with the same identity\n   and have all sub-properties re-propagated in a subsequent turn.\n\nThe temp cache is not necessarily sufficient to prevent invalid array\npaths, since a splice can happen during the same turn (with pathological\nuser code); we could introduce a \"fixup\" for temporarily cached array\npaths if needed: https://github.com/Polymer/polymer/issues/4227",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1436,
              "column": 6
            },
            "end": {
              "line": 1465,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "True if property should fire notification\n  event (applies only for `notify: true` properties)"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property changed"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_isPropertyPending",
          "description": "Returns true if the specified property has a pending change.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 493,
              "column": 6
            },
            "end": {
              "line": 495,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if property has a pending change"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_invalidateProperties",
          "description": "Overrides `PropertyAccessor`'s default async queuing of\n`_propertiesChanged`: if `__dataReady` is false (has not yet been\nmanually flushed), the function no-ops; otherwise flushes\n`_propertiesChanged` synchronously.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1487,
              "column": 6
            },
            "end": {
              "line": 1491,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_enableProperties",
          "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 523,
              "column": 6
            },
            "end": {
              "line": 532,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_flushProperties",
          "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 543,
              "column": 6
            },
            "end": {
              "line": 551,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "ready",
          "description": "Stamps the element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 651,
              "column": 6
            },
            "end": {
              "line": 657,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_propertiesChanged",
          "description": "Implements `PropertyAccessors`'s properties changed callback.\n\nRuns each class of effects for the batch of changed properties in\na specific order (compute, propagate, reflect, observe, notify).",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1626,
              "column": 6
            },
            "end": {
              "line": 1659,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "currentProps"
            },
            {
              "name": "changedProps"
            },
            {
              "name": "oldProps"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_shouldPropertyChange",
          "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` for primitive types if a\nstrict equality check fails, and returns `true` for all Object/Arrays.\nThe method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 606,
              "column": 6
            },
            "end": {
              "line": 609,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "value",
              "type": "*",
              "description": "New property value"
            },
            {
              "name": "old",
              "type": "*",
              "description": "Previous property value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Whether the property should be considered a change\n  and enqueue a `_propertiesChanged` callback"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_addPropertyEffect",
          "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1220,
              "column": 6
            },
            "end": {
              "line": 1228,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removePropertyEffect",
          "description": "Removes the given property effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1237,
              "column": 6
            },
            "end": {
              "line": 1243,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property the effect was associated with"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object to remove"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasPropertyEffect",
          "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1254,
              "column": 6
            },
            "end": {
              "line": 1257,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "type",
              "type": "string=",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReadOnlyEffect",
          "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1267,
              "column": 6
            },
            "end": {
              "line": 1269,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasNotifyEffect",
          "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1279,
              "column": 6
            },
            "end": {
              "line": 1281,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReflectEffect",
          "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1291,
              "column": 6
            },
            "end": {
              "line": 1293,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasComputedEffect",
          "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1303,
              "column": 6
            },
            "end": {
              "line": 1305,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setPendingPropertyOrPath",
          "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1337,
              "column": 6
            },
            "end": {
              "line": 1369,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(number|string)>)",
              "description": "Path to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "Set to true if this change should\n cause a property notification event dispatch"
            },
            {
              "name": "isPathNotification",
              "type": "boolean=",
              "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setUnmanagedPropertyToNode",
          "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1391,
              "column": 6
            },
            "end": {
              "line": 1399,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "The node to set a property on"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "The property to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value to set"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_enqueueClient",
          "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1501,
              "column": 6
            },
            "end": {
              "line": 1506,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "client",
              "type": "Object",
              "description": "PropertyEffects client to enqueue"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_flushClients",
          "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1514,
              "column": 6
            },
            "end": {
              "line": 1525,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__enableOrFlushClients",
          "description": "(c) the stamped dom enables.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1539,
              "column": 6
            },
            "end": {
              "line": 1552,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_readyClients",
          "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 668,
              "column": 6
            },
            "end": {
              "line": 677,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "setProperties",
          "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1579,
              "column": 6
            },
            "end": {
              "line": 1590,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
            },
            {
              "name": "setReadOnly",
              "type": "boolean=",
              "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_propagatePropertyChanges",
          "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1670,
              "column": 6
            },
            "end": {
              "line": 1680,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProps",
              "type": "Object",
              "description": "Bag of changed properties"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "linkPaths",
          "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1690,
              "column": 6
            },
            "end": {
              "line": 1695,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "to",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Target path to link."
            },
            {
              "name": "from",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Source path to link."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unlinkPaths",
          "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1706,
              "column": 6
            },
            "end": {
              "line": 1711,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Target path to unlink."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifySplices",
          "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1742,
              "column": 6
            },
            "end": {
              "line": 1746,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "splices",
              "type": "Array",
              "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "get",
          "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1767,
              "column": 6
            },
            "end": {
              "line": 1769,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "set",
          "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1791,
              "column": 6
            },
            "end": {
              "line": 1801,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set at the specified path."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "push",
          "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1817,
              "column": 6
            },
            "end": {
              "line": 1826,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to push onto array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "pop",
          "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1841,
              "column": 6
            },
            "end": {
              "line": 1850,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "splice",
          "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1869,
              "column": 6
            },
            "end": {
              "line": 1886,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "start",
              "type": "number",
              "description": "Index from which to start removing/inserting."
            },
            {
              "name": "deleteCount",
              "type": "number",
              "description": "Number of items to remove."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert into array."
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Array of removed items."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "shift",
          "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1901,
              "column": 6
            },
            "end": {
              "line": 1910,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unshift",
          "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1926,
              "column": 6
            },
            "end": {
              "line": 1934,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert info array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifyPath",
          "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1948,
              "column": 6
            },
            "end": {
              "line": 1965,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Value at the path (optional)."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReadOnlyProperty",
          "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1977,
              "column": 6
            },
            "end": {
              "line": 1984,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createPropertyObserver",
          "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1997,
              "column": 6
            },
            "end": {
              "line": 2007,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createMethodObserver",
          "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2019,
              "column": 6
            },
            "end": {
              "line": 2025,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createNotifyingProperty",
          "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2035,
              "column": 6
            },
            "end": {
              "line": 2043,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReflectedProperty",
          "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2053,
              "column": 6
            },
            "end": {
              "line": 2066,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createComputedProperty",
          "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2079,
              "column": 6
            },
            "end": {
              "line": 2085,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_bindTemplate",
          "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2255,
              "column": 6
            },
            "end": {
              "line": 2278,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            },
            {
              "name": "instanceBinding",
              "type": "boolean=",
              "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removeBoundDom",
          "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2355,
              "column": 6
            },
            "end": {
              "line": 2376,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "!StampedTemplate",
              "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "connectedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 633,
              "column": 6
            },
            "end": {
              "line": 638,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`disconnectedCallback`.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 644,
              "column": 6
            },
            "end": {
              "line": 644,
              "column": 31
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_attachDom",
          "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 691,
              "column": 6
            },
            "end": {
              "line": 707,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "StampedTemplate",
              "description": "to attach to the element."
            }
          ],
          "return": {
            "type": "ShadowRoot",
            "desc": "node to which the dom has been attached."
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "updateStyles",
          "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 750,
              "column": 6
            },
            "end": {
              "line": 754,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "properties",
              "type": "Object=",
              "description": "Bag of custom property key/values to\n  apply to this element."
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "resolveUrl",
          "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 767,
              "column": 6
            },
            "end": {
              "line": 772,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "string",
              "description": "URL to resolve."
            },
            {
              "name": "base",
              "type": "string=",
              "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
            }
          ],
          "return": {
            "type": "string",
            "desc": "Rewritten URL relative to base"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "__refreshUIState",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 250,
              "column": 6
            },
            "end": {
              "line": 256,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "validate",
          "description": "Returns true if `value` is valid. Use`textarea`'s validity.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 263,
              "column": 6
            },
            "end": {
              "line": 265,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "True if the value is valid."
          }
        },
        {
          "name": "doFocus",
          "description": "Set focus to textarea.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 270,
              "column": 6
            },
            "end": {
              "line": 272,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [
        {
          "name": "_parseTemplate",
          "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 197,
              "column": 6
            },
            "end": {
              "line": 208,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to parse"
            },
            {
              "name": "outerTemplateInfo",
              "type": "TemplateInfo=",
              "description": "Template metadata from the outer\n  template, for parsing nested templates"
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Parsed template metadata"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateContent",
          "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 783,
              "column": 6
            },
            "end": {
              "line": 786,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template"
            },
            {
              "name": "templateInfo"
            },
            {
              "name": "nodeInfo"
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_parseTemplateNode",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2395,
              "column": 6
            },
            "end": {
              "line": 2409,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateChildNodes",
          "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 257,
              "column": 6
            },
            "end": {
              "line": 294,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "root",
              "type": "Node",
              "description": "Root node whose `childNodes` will be parsed"
            },
            {
              "name": "templateInfo",
              "type": "!TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "!NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNestedTemplate",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2482,
              "column": 6
            },
            "end": {
              "line": 2492,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateNodeAttributes",
          "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 332,
              "column": 6
            },
            "end": {
              "line": 341,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNodeAttribute",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2430,
              "column": 6
            },
            "end": {
              "line": 2466,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            },
            {
              "name": "name",
              "type": "string",
              "description": "Attribute name"
            },
            {
              "name": "value",
              "type": "string",
              "description": "Attribute value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_contentForTemplate",
          "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 387,
              "column": 6
            },
            "end": {
              "line": 390,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template to retrieve `content` for"
            }
          ],
          "return": {
            "type": "DocumentFragment",
            "desc": "Content fragment"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "createPropertiesForAttributes",
          "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 113,
              "column": 6
            },
            "end": {
              "line": 118,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "addPropertyEffect",
          "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2124,
              "column": 6
            },
            "end": {
              "line": 2126,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createPropertyObserver",
          "description": "Creates a single-property observer for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2137,
              "column": 6
            },
            "end": {
              "line": 2139,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createMethodObserver",
          "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2153,
              "column": 6
            },
            "end": {
              "line": 2155,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createNotifyingProperty",
          "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2164,
              "column": 6
            },
            "end": {
              "line": 2166,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReadOnlyProperty",
          "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2183,
              "column": 6
            },
            "end": {
              "line": 2185,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReflectedProperty",
          "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2194,
              "column": 6
            },
            "end": {
              "line": 2196,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createComputedProperty",
          "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2211,
              "column": 6
            },
            "end": {
              "line": 2213,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "bindTemplate",
          "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2227,
              "column": 6
            },
            "end": {
              "line": 2229,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Template metadata object"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addTemplatePropertyEffect",
          "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2292,
              "column": 6
            },
            "end": {
              "line": 2298,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Template metadata to add effect to"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseBindings",
          "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2527,
              "column": 6
            },
            "end": {
              "line": 2592,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "text",
              "type": "string",
              "description": "Text to parse from attribute or textContent"
            },
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Current template metadata"
            }
          ],
          "return": {
            "type": "Array.<!BindingPart>",
            "desc": "Array of binding part metadata"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_evaluateBinding",
          "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2608,
              "column": 6
            },
            "end": {
              "line": 2625,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "inst",
              "type": "this",
              "description": "Element that should be used as scope for\n  binding dependencies"
            },
            {
              "name": "part",
              "type": "BindingPart",
              "description": "Binding part metadata"
            },
            {
              "name": "path",
              "type": "string",
              "description": "Property/path that triggered this effect"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of current property changes"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value the binding part evaluated to"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "finalize",
          "description": "Called automatically when the first element instance is created to\nensure that class finalization work has been completed.\nMay be called by users to eagerly perform class finalization work\nprior to the creation of the first element instance.\n\nClass finalization work generally includes meta-programming such as\ncreating property accessors and any property effect metadata needed for\nthe features used.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 441,
              "column": 6
            },
            "end": {
              "line": 445,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_processStyleText",
          "description": "Gather style text for the template",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 588,
              "column": 6
            },
            "end": {
              "line": 591,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "is",
              "type": "string",
              "description": "Tag name for this element"
            },
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to process"
            },
            {
              "name": "baseURI",
              "type": "string",
              "description": "Base URI to rebase CSS paths against"
            }
          ],
          "return": {
            "type": "string",
            "desc": "The combined CSS text"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_finalizeTemplate",
          "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 602,
              "column": 6
            },
            "end": {
              "line": 621,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "is",
              "type": "string",
              "description": "Tag name (or type extension name) for this element"
            },
            {
              "name": "ext",
              "type": "string=",
              "description": "For type extensions, the tag name that was extended"
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        }
      ],
      "demos": [
        {
          "url": "demo/h2-textarea/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 106,
          "column": 4
        },
        "end": {
          "line": 273,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "H2Textarea",
      "attributes": [
        {
          "name": "value",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 10
            },
            "end": {
              "line": 115,
              "column": 11
            }
          },
          "metadata": {},
          "type": "(string|number)"
        },
        {
          "name": "rows",
          "description": "The initial number of rows.",
          "sourceRange": {
            "start": {
              "line": 124,
              "column": 10
            },
            "end": {
              "line": 127,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "autocomplete",
          "description": "Bound to the textarea's `autocomplete` attribute.",
          "sourceRange": {
            "start": {
              "line": 132,
              "column": 10
            },
            "end": {
              "line": 135,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "autofocus",
          "description": "Bound to the textarea's `autofocus` attribute.",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 10
            },
            "end": {
              "line": 143,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "inputmode",
          "description": "Bound to the textarea's `inputmode` attribute.",
          "sourceRange": {
            "start": {
              "line": 148,
              "column": 10
            },
            "end": {
              "line": 150,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "placeholder",
          "description": "Bound to the textarea's `placeholder` attribute.",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 10
            },
            "end": {
              "line": 157,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "readonly",
          "description": "Bound to the textarea's `readonly` attribute.",
          "sourceRange": {
            "start": {
              "line": 162,
              "column": 10
            },
            "end": {
              "line": 164,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "required",
          "description": "Set to true to mark the textarea as required.",
          "sourceRange": {
            "start": {
              "line": 169,
              "column": 10
            },
            "end": {
              "line": 171,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "minlength",
          "description": "The minimum length of the input value.",
          "sourceRange": {
            "start": {
              "line": 176,
              "column": 10
            },
            "end": {
              "line": 178,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "maxlength",
          "description": "The maximum length of the input value.",
          "sourceRange": {
            "start": {
              "line": 183,
              "column": 10
            },
            "end": {
              "line": 185,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "label",
          "description": "Bound to the textarea's `aria-label` attribute.",
          "sourceRange": {
            "start": {
              "line": 190,
              "column": 10
            },
            "end": {
              "line": 192,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "prompt",
          "description": "The prompt to show when textarea is invalid.",
          "sourceRange": {
            "start": {
              "line": 196,
              "column": 10
            },
            "end": {
              "line": 198,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "h2-textarea"
    },
    {
      "description": "`h2-button`\n\nExample:\n```html\n<h2-button>enable</h2-button>\n<h2-button disabled>disabled</h2-button>\n<h2-button><iron-icon icon=\"check\"></iron-icon>link</h2-button>\n\n```\n\n## Styling\n\nThe following custom properties and mixins are available for styling:\n\n|Custom property | Description | Default|\n|----------------|-------------|----------|\n|`--h2-button` | Mixin applied to the button | {}",
      "summary": "",
      "path": "h2-button.html",
      "properties": [
        {
          "name": "disabled",
          "type": "boolean",
          "description": "Set to true, if the button is disabled.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 82,
              "column": 10
            },
            "end": {
              "line": 85,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        }
      ],
      "methods": [],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/h2-button/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 74,
          "column": 4
        },
        "end": {
          "line": 92,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "H2Button",
      "attributes": [
        {
          "name": "disabled",
          "description": "Set to true, if the button is disabled.",
          "sourceRange": {
            "start": {
              "line": 82,
              "column": 10
            },
            "end": {
              "line": 85,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "file": "h2-button.html",
            "start": {
              "line": 65,
              "column": 6
            },
            "end": {
              "line": 65,
              "column": 19
            }
          }
        }
      ],
      "tagname": "h2-button"
    },
    {
      "description": "### Usage 1:\n\n```html\n<h2-fetch request=\"{{request}}\" response=\"{{response}}\" error=\"{{error}}\"></h2-fetch>\n\n```\n```\nrequest = {\n  url: \"/path/to/index.do\",\n  method: \"POST\",\n  headers: {\n    \"Cache-Control\": \"no-cache\"\n  }\n}\n```\n### Usage 2:\n\n```\nconst request = {\n  url: \"/path/to/index.do\",\n  method: \"POST\",\n  headers: {\n    \"Cache-Control\": \"no-cache\"\n  }\n};\n\nnew H2Fetch().fetchIt(request)\n  .then(res => res.json())\n  .then(console.log)\n  .catch(console.log);\n```\n### Also, you can mock the responses of your http requests, by following belows:\n#### 1. Import mock_setup.js before the importing of polymer libs.\n\n```html\n<head>\n  ...\n  <script type=\"text/javascript\" src=\"bower_components/h2-elements/utils/mock_setup.js\"></script>\n\n  polymer libs import after here\n</head>\n\n```\n#### 2. Create mockData.js\nFor Example:\n```\nimport {data} from \"./data.js\";\n\nMockDataPool.when(\"POST\", \"/path/to/index.do\")\n  .withExpectedHeader(\"content-type\", \"application/json;charset=utf-8\")\n  .withExpectedHeader(\"Cache-Control\", \"no-cache\")\n  .responseWith({status: 200, body: JSON.stringify(data)});\n```\n\n#### 3. Append a searchParam on your request url to open mock mode.\n\nFor example ``http://127.0.0.1:8000/components/h2-elements/demo/h2-fetch/index.html?mock=/your/path/to/mockData.js``,\n\n``/your/path/to/`` is a relative path to index.html. For example, if index.html and mockData.js are located under a same\nfolder, it can be ``index.html?mock=mockData.js`` or ``index.html?mock=./mockData.js``\n\n`h2-fetch`",
      "summary": "",
      "path": "h2-fetch.html",
      "properties": [
        {
          "name": "request",
          "type": "Object",
          "description": "See [Request API](https://developer.mozilla.org/en-US/docs/Web/API/Request)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 10
            },
            "end": {
              "line": 89,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "error",
          "type": "{content: *}",
          "description": "Error is undefined when window.__mockEnabled is true",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 10
            },
            "end": {
              "line": 98,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "response",
          "type": "Object",
          "description": "See [Response API](https://developer.mozilla.org/en-US/docs/Web/API/Response)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 102,
              "column": 10
            },
            "end": {
              "line": 105,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "handleResponseAs",
          "type": "string",
          "description": "How to handle the response body, the handled result will access as the property 'responseBody'.\njson/text/blob/arrayBuffer",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 10
            },
            "end": {
              "line": 116,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"json\""
        },
        {
          "name": "responseBody",
          "type": "{content: *}",
          "description": "Handled response body.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 122,
              "column": 10
            },
            "end": {
              "line": 125,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "__defaultRequest",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 127,
              "column": 10
            },
            "end": {
              "line": 133,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "__defaultHeaders",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 135,
              "column": 10
            },
            "end": {
              "line": 143,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "defaultValue": "{\"content-type\":\"application/json;charset=utf-8\"}"
        }
      ],
      "methods": [
        {
          "name": "__getCorrectedRequest",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 159,
              "column": 6
            },
            "end": {
              "line": 163,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request"
            }
          ]
        },
        {
          "name": "__requestChange",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 166,
              "column": 6
            },
            "end": {
              "line": 169,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request"
            }
          ]
        },
        {
          "name": "__responseChange",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 171,
              "column": 6
            },
            "end": {
              "line": 187,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "response"
            }
          ]
        },
        {
          "name": "_mockIt",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 189,
              "column": 6
            },
            "end": {
              "line": 200,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_fetchIt",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 202,
              "column": 6
            },
            "end": {
              "line": 207,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "fetchIt",
          "description": "Fetch you request, if window.__mockEnabled == true, you can get your mock response.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 214,
              "column": 6
            },
            "end": {
              "line": 224,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "(Request|object)"
            }
          ],
          "return": {
            "type": "Promise"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/h2-fetch/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 79,
          "column": 4
        },
        "end": {
          "line": 226,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "H2Fetch",
      "attributes": [
        {
          "name": "request",
          "description": "See [Request API](https://developer.mozilla.org/en-US/docs/Web/API/Request)",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 10
            },
            "end": {
              "line": 89,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "error",
          "description": "Error is undefined when window.__mockEnabled is true",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 10
            },
            "end": {
              "line": 98,
              "column": 11
            }
          },
          "metadata": {},
          "type": "{content: *}"
        },
        {
          "name": "response",
          "description": "See [Response API](https://developer.mozilla.org/en-US/docs/Web/API/Response)",
          "sourceRange": {
            "start": {
              "line": 102,
              "column": 10
            },
            "end": {
              "line": 105,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "handle-response-as",
          "description": "How to handle the response body, the handled result will access as the property 'responseBody'.\njson/text/blob/arrayBuffer",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 10
            },
            "end": {
              "line": 116,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "response-body",
          "description": "Handled response body.",
          "sourceRange": {
            "start": {
              "line": 122,
              "column": 10
            },
            "end": {
              "line": 125,
              "column": 11
            }
          },
          "metadata": {},
          "type": "{content: *}"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "error-changed",
          "description": "Fired when the `error` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "response-changed",
          "description": "Fired when the `response` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "response-body-changed",
          "description": "Fired when the `responseBody` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "h2-fetch"
    },
    {
      "description": "```html\n<h2-picker label=\"公司\"\n           multi\n           src=\"/init.do\"\n           keyword-search-src=\"/more_banks.do?keyword=\"></h2-picker>\n\n```\n\n`h2-picker`",
      "summary": "",
      "path": "h2-picker.html",
      "properties": [
        {
          "name": "_pinyinUtil",
          "type": "Object",
          "description": "中文转拼音插件",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 260,
              "column": 10
            },
            "end": {
              "line": 266,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "_cacheSearchUtil",
          "type": "Object",
          "description": "缓存搜索插件",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 270,
              "column": 10
            },
            "end": {
              "line": 276,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "_fetchUtil",
          "type": "Object",
          "description": "发送请求和模拟数据的组件",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 280,
              "column": 10
            },
            "end": {
              "line": 284,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "label",
          "type": "string",
          "description": "标签",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 289,
              "column": 10
            },
            "end": {
              "line": 291,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "value",
          "type": "string",
          "description": "初始选择项和items的value值相对应",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 299,
              "column": 10
            },
            "end": {
              "line": 302,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "selectedValues",
          "type": "array",
          "description": "The selected value objects of this select.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 307,
              "column": 10
            },
            "end": {
              "line": 310,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "src",
          "type": "string",
          "description": "A url for fetching local data, the response data of the request should be json.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 315,
              "column": 10
            },
            "end": {
              "line": 317,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "keywordSearchSrc",
          "type": "string",
          "description": "A url for searching data with user input keywords, the response data of the request should be json.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 322,
              "column": 10
            },
            "end": {
              "line": 324,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "items",
          "type": "array",
          "description": "（本地查询模式）组件初始数据集\n如：[{\"id\": 1, \"label\": \"快塑网\", \"business\": \"塑料\"},{\"id\": 2, \"label\": \"阿里巴巴\", \"business\": \"电商\"}]",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 330,
              "column": 10
            },
            "end": {
              "line": 332,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "displayItems",
          "type": "array",
          "description": "下拉面板当前展示的数据集（默认显示items的前10条）",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 337,
              "column": 10
            },
            "end": {
              "line": 339,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "userInputKeyword",
          "type": "string",
          "description": "用户输入的模糊搜索关键字",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 344,
              "column": 10
            },
            "end": {
              "line": 346,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "searchFields",
          "type": "array",
          "description": "（本地查询模式）模糊搜索的字段字符串数组，无值时，默认将所有字段做成搜索缓存",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 351,
              "column": 10
            },
            "end": {
              "line": 353,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "collapseTableHead",
          "type": "array",
          "description": "下拉面板中展示的字段，默认为[{\"field\": \"label\", \"label\": \"选项\"}]",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 359,
              "column": 10
            },
            "end": {
              "line": 362,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[{\"field\":\"label\",\"label\":\"选项\"}]"
        },
        {
          "name": "attrForLabel",
          "type": "string",
          "description": "已选数据项标签展示字段,默认为\"label\"",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 366,
              "column": 10
            },
            "end": {
              "line": 369,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"label\""
        },
        {
          "name": "attrForValue",
          "type": "string",
          "description": "取值字段,默认为\"value\"",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 373,
              "column": 10
            },
            "end": {
              "line": 376,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"value\""
        },
        {
          "name": "disablePinyinSearch",
          "type": "boolean",
          "description": "是否禁用拼音搜索",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 380,
              "column": 10
            },
            "end": {
              "line": 383,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "required",
          "type": "boolean",
          "description": "Set to true, if the selection is required.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 390,
              "column": 10
            },
            "end": {
              "line": 393,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "readonly",
          "type": "boolean",
          "description": "Set to true, if the picker is readonly.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 399,
              "column": 10
            },
            "end": {
              "line": 402,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "multi",
          "type": "boolean",
          "description": "If true, multiple selections are allowed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 408,
              "column": 10
            },
            "end": {
              "line": 411,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "__focusIndex",
          "type": "number",
          "description": "下拉面板当前选项焦点",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 415,
              "column": 10
            },
            "end": {
              "line": 418,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 436,
              "column": 6
            },
            "end": {
              "line": 445,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_srcChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 447,
              "column": 6
            },
            "end": {
              "line": 461,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "src"
            }
          ]
        },
        {
          "name": "_itemsChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 463,
              "column": 6
            },
            "end": {
              "line": 474,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "items = []"
            }
          ]
        },
        {
          "name": "_userInputKeywordChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 476,
              "column": 6
            },
            "end": {
              "line": 502,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "userInputKeyword"
            }
          ]
        },
        {
          "name": "_selectedValuesChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 504,
              "column": 6
            },
            "end": {
              "line": 507,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_valueChanged",
          "description": "value属性变化监听函数",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 512,
              "column": 6
            },
            "end": {
              "line": 525,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "_selectItemAt",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 527,
              "column": 6
            },
            "end": {
              "line": 532,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "index"
            }
          ]
        },
        {
          "name": "_selectItem",
          "description": "选择选项",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 538,
              "column": 6
            },
            "end": {
              "line": 551,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "_switchFocusItemAt",
          "description": "切换焦点到第n个元素，从0开始",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 558,
              "column": 6
            },
            "end": {
              "line": 571,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "index"
            }
          ]
        },
        {
          "name": "_isPickerCollapseHidden",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 573,
              "column": 6
            },
            "end": {
              "line": 575,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "__openCollapse",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 577,
              "column": 6
            },
            "end": {
              "line": 583,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "{\n    target: {classList}\n}"
            }
          ]
        },
        {
          "name": "__focusOnKeywordInput",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 585,
              "column": 6
            },
            "end": {
              "line": 587,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_selectCollapseItem",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 589,
              "column": 6
            },
            "end": {
              "line": 592,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ]
        },
        {
          "name": "_keyDownHandler",
          "description": "输入框键盘按键事件",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 599,
              "column": 6
            },
            "end": {
              "line": 642,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ]
        },
        {
          "name": "_loadPinyinKeys",
          "description": "给对象根据searchFields给对应的字段做拼音缓存（字段值，字段值全拼和拼音首字母）",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 647,
              "column": 6
            },
            "end": {
              "line": 667,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "searchFields = []"
            }
          ]
        },
        {
          "name": "deleteLastTag",
          "description": "Delete the last selected tag.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 672,
              "column": 6
            },
            "end": {
              "line": 674,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_deleteTag",
          "description": "删除Tag项，事件处理函数",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 679,
              "column": 6
            },
            "end": {
              "line": 683,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_getHotKey",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 685,
              "column": 6
            },
            "end": {
              "line": 687,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "index"
            }
          ]
        },
        {
          "name": "displayCollapse",
          "description": "Open or close the collapse",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 693,
              "column": 6
            },
            "end": {
              "line": 695,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "display",
              "type": "boolean",
              "description": "true to open the collapse."
            }
          ]
        },
        {
          "name": "toggleCollapse",
          "description": "Toggle collapse. Side effect: the picker input will get a focus.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 700,
              "column": 6
            },
            "end": {
              "line": 704,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "doFocus",
          "description": "Set focus to picker.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 709,
              "column": 6
            },
            "end": {
              "line": 711,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "validate",
          "description": "Validate, true if the select is set to be required and this.selectedValues.length > 0, or else false.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 717,
              "column": 6
            },
            "end": {
              "line": 719,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/h2-picker/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 254,
          "column": 4
        },
        "end": {
          "line": 720,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "H2Picker",
      "attributes": [
        {
          "name": "label",
          "description": "标签",
          "sourceRange": {
            "start": {
              "line": 289,
              "column": 10
            },
            "end": {
              "line": 291,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "value",
          "description": "初始选择项和items的value值相对应",
          "sourceRange": {
            "start": {
              "line": 299,
              "column": 10
            },
            "end": {
              "line": 302,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "selected-values",
          "description": "The selected value objects of this select.",
          "sourceRange": {
            "start": {
              "line": 307,
              "column": 10
            },
            "end": {
              "line": 310,
              "column": 11
            }
          },
          "metadata": {},
          "type": "array"
        },
        {
          "name": "src",
          "description": "A url for fetching local data, the response data of the request should be json.",
          "sourceRange": {
            "start": {
              "line": 315,
              "column": 10
            },
            "end": {
              "line": 317,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "keyword-search-src",
          "description": "A url for searching data with user input keywords, the response data of the request should be json.",
          "sourceRange": {
            "start": {
              "line": 322,
              "column": 10
            },
            "end": {
              "line": 324,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "items",
          "description": "（本地查询模式）组件初始数据集\n如：[{\"id\": 1, \"label\": \"快塑网\", \"business\": \"塑料\"},{\"id\": 2, \"label\": \"阿里巴巴\", \"business\": \"电商\"}]",
          "sourceRange": {
            "start": {
              "line": 330,
              "column": 10
            },
            "end": {
              "line": 332,
              "column": 11
            }
          },
          "metadata": {},
          "type": "array"
        },
        {
          "name": "display-items",
          "description": "下拉面板当前展示的数据集（默认显示items的前10条）",
          "sourceRange": {
            "start": {
              "line": 337,
              "column": 10
            },
            "end": {
              "line": 339,
              "column": 11
            }
          },
          "metadata": {},
          "type": "array"
        },
        {
          "name": "user-input-keyword",
          "description": "用户输入的模糊搜索关键字",
          "sourceRange": {
            "start": {
              "line": 344,
              "column": 10
            },
            "end": {
              "line": 346,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "search-fields",
          "description": "（本地查询模式）模糊搜索的字段字符串数组，无值时，默认将所有字段做成搜索缓存",
          "sourceRange": {
            "start": {
              "line": 351,
              "column": 10
            },
            "end": {
              "line": 353,
              "column": 11
            }
          },
          "metadata": {},
          "type": "array"
        },
        {
          "name": "collapse-table-head",
          "description": "下拉面板中展示的字段，默认为[{\"field\": \"label\", \"label\": \"选项\"}]",
          "sourceRange": {
            "start": {
              "line": 359,
              "column": 10
            },
            "end": {
              "line": 362,
              "column": 11
            }
          },
          "metadata": {},
          "type": "array"
        },
        {
          "name": "attr-for-label",
          "description": "已选数据项标签展示字段,默认为\"label\"",
          "sourceRange": {
            "start": {
              "line": 366,
              "column": 10
            },
            "end": {
              "line": 369,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "attr-for-value",
          "description": "取值字段,默认为\"value\"",
          "sourceRange": {
            "start": {
              "line": 373,
              "column": 10
            },
            "end": {
              "line": 376,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "disable-pinyin-search",
          "description": "是否禁用拼音搜索",
          "sourceRange": {
            "start": {
              "line": 380,
              "column": 10
            },
            "end": {
              "line": 383,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "required",
          "description": "Set to true, if the selection is required.",
          "sourceRange": {
            "start": {
              "line": 390,
              "column": 10
            },
            "end": {
              "line": 393,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "readonly",
          "description": "Set to true, if the picker is readonly.",
          "sourceRange": {
            "start": {
              "line": 399,
              "column": 10
            },
            "end": {
              "line": 402,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "multi",
          "description": "If true, multiple selections are allowed.",
          "sourceRange": {
            "start": {
              "line": 408,
              "column": 10
            },
            "end": {
              "line": 411,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "selected-values-changed",
          "description": "Fired when the `selectedValues` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "h2-picker"
    },
    {
      "description": "`h2-image-upload`\n\nExample:\n```html\n<h2-image-upload label=\"上河图\" value=\"{{file}}\"></h2-image-upload>\n<h2-image-upload size-limit=\"1.4M\" value=\"{{file}}\"></h2-image-upload>\n\n```\n## Styling\n\nThe following custom properties and mixins are available for styling:\n\n|Custom property | Description | Default|\n|----------------|-------------|----------|\n|`--h2-image-upload-label` | Mixin applied to the label of image uploader | {}\n|`--h2-image-upload-width` | Mixin applied to width of image uploader | 140px\n|`--h2-image-upload-height` | Mixin applied to height of image uploader | 180px\n|`--h2-image-upload-buttons` | Mixin applied to tool buttons of the uploader | {}",
      "summary": "",
      "path": "h2-image-upload.html",
      "properties": [
        {
          "name": "src",
          "type": "string",
          "description": "The remote uri of image.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 174,
              "column": 10
            },
            "end": {
              "line": 176,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "value",
          "type": "Object",
          "description": "The file object of the image. It will be `undefined` when image is from remote server.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 180,
              "column": 10
            },
            "end": {
              "line": 183,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "label",
          "type": "string",
          "description": "The label of the uploader.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 188,
              "column": 10
            },
            "end": {
              "line": 190,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "required",
          "type": "boolean",
          "description": "Set to true, if the select is required.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 197,
              "column": 10
            },
            "end": {
              "line": 200,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "readonly",
          "type": "boolean",
          "description": "Set to true, if the select is readonly.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 206,
              "column": 10
            },
            "end": {
              "line": 209,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "sizeLimit",
          "type": "string",
          "description": "The max size/length of image allowed to upload.\nSupport pattern:  /^((?:\\d*\\.)?\\d+)([GgMmKk][Bb]?$)/\ni.e 1M, 1Mb, 2Kb",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 217,
              "column": 10
            },
            "end": {
              "line": 219,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "__byteSize",
          "type": "number",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 221,
              "column": 10
            },
            "end": {
              "line": 224,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "accept",
          "type": "string",
          "description": "Bound to input's `accept` attribute.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 230,
              "column": 10
            },
            "end": {
              "line": 233,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"image/gif, image/jpeg, image/png\""
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 247,
              "column": 6
            },
            "end": {
              "line": 268,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "__srcChanged",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 271,
              "column": 6
            },
            "end": {
              "line": 289,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "src"
            }
          ]
        },
        {
          "name": "__parseSizeLimit",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 291,
              "column": 6
            },
            "end": {
              "line": 311,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "sizeLimit"
            }
          ]
        },
        {
          "name": "_triggerChooseFile",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 313,
              "column": 6
            },
            "end": {
              "line": 316,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_chooseFile",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 318,
              "column": 6
            },
            "end": {
              "line": 321,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "__readDataTransfer",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 323,
              "column": 6
            },
            "end": {
              "line": 326,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dataTransfer"
            }
          ]
        },
        {
          "name": "__loadFileData",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 328,
              "column": 6
            },
            "end": {
              "line": 339,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "blob"
            }
          ]
        },
        {
          "name": "cancelSelection",
          "description": "Cancel selection of the image.It will clear the `src` and `value`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 344,
              "column": 6
            },
            "end": {
              "line": 348,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "openViewZoom",
          "description": "Open the view zoom",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 353,
              "column": 6
            },
            "end": {
              "line": 357,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "closeViewZoom",
          "description": "Close the view zoom.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 362,
              "column": 6
            },
            "end": {
              "line": 364,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "validate",
          "description": "Validate, true if the select is set to be required and this.value is a truth-value or else false.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 370,
              "column": 6
            },
            "end": {
              "line": 372,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/h2-image-upload/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 168,
          "column": 4
        },
        "end": {
          "line": 373,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "H2ImageUpload",
      "attributes": [
        {
          "name": "src",
          "description": "The remote uri of image.",
          "sourceRange": {
            "start": {
              "line": 174,
              "column": 10
            },
            "end": {
              "line": 176,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "value",
          "description": "The file object of the image. It will be `undefined` when image is from remote server.",
          "sourceRange": {
            "start": {
              "line": 180,
              "column": 10
            },
            "end": {
              "line": 183,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "label",
          "description": "The label of the uploader.",
          "sourceRange": {
            "start": {
              "line": 188,
              "column": 10
            },
            "end": {
              "line": 190,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "required",
          "description": "Set to true, if the select is required.",
          "sourceRange": {
            "start": {
              "line": 197,
              "column": 10
            },
            "end": {
              "line": 200,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "readonly",
          "description": "Set to true, if the select is readonly.",
          "sourceRange": {
            "start": {
              "line": 206,
              "column": 10
            },
            "end": {
              "line": 209,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "size-limit",
          "description": "The max size/length of image allowed to upload.\nSupport pattern:  /^((?:\\d*\\.)?\\d+)([GgMmKk][Bb]?$)/\ni.e 1M, 1Mb, 2Kb",
          "sourceRange": {
            "start": {
              "line": 217,
              "column": 10
            },
            "end": {
              "line": 219,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "accept",
          "description": "Bound to input's `accept` attribute.",
          "sourceRange": {
            "start": {
              "line": 230,
              "column": 10
            },
            "end": {
              "line": 233,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "h2-image-upload"
    },
    {
      "description": "`h2-image-view`\n\nExample: \n```html\n<h2-image-view src=\"https://test.com/test.jpg\"></h2-image-view>\n```\n```\n## Styling\n\nThe following custom properties and mixins are available for styling:\n\n|Custom property | Description | Default|\n|----------------|-------------|----------|\n|`--h2-image-upload-buttons` | Mixin applied to tool buttons of the uploader | {}",
      "summary": "",
      "path": "h2-image-view.html",
      "properties": [
        {
          "name": "src",
          "type": "string",
          "description": "The remote uri of image.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 101,
              "column": 10
            },
            "end": {
              "line": 104,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_changeSrc\""
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_changeSrc",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 6
            },
            "end": {
              "line": 122,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newValue"
            }
          ]
        },
        {
          "name": "openViewZoom",
          "description": "Open the view zoom",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 128,
              "column": 6
            },
            "end": {
              "line": 132,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "closeViewZoom",
          "description": "Close the view zoom.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 6
            },
            "end": {
              "line": 138,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/h2-image-view/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 95,
          "column": 4
        },
        "end": {
          "line": 140,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "H2ImageView",
      "attributes": [
        {
          "name": "src",
          "description": "The remote uri of image.",
          "sourceRange": {
            "start": {
              "line": 101,
              "column": 10
            },
            "end": {
              "line": 104,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "h2-image-view"
    },
    {
      "description": "```html\n<h2-pagination total=\"30\" limit=\"5\" paging=\"{{paging}}\"></h2-pagination>\n```\n\n`h2-pagination`",
      "summary": "",
      "path": "h2-pagination.html",
      "properties": [
        {
          "name": "__serializing",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 123,
              "column": 8
            },
            "end": {
              "line": 123,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataCounter",
          "type": "number",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1152,
              "column": 8
            },
            "end": {
              "line": 1152,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataEnabled",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 127,
              "column": 8
            },
            "end": {
              "line": 127,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 129,
              "column": 8
            },
            "end": {
              "line": 129,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataInvalid",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 131,
              "column": 8
            },
            "end": {
              "line": 131,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__data",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1134,
              "column": 8
            },
            "end": {
              "line": 1134,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPending",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1136,
              "column": 8
            },
            "end": {
              "line": 1136,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataOld",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1138,
              "column": 8
            },
            "end": {
              "line": 1138,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataProto",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 139,
              "column": 8
            },
            "end": {
              "line": 139,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataHasAccessor",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 141,
              "column": 8
            },
            "end": {
              "line": 141,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataInstanceProps",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 143,
              "column": 8
            },
            "end": {
              "line": 143,
              "column": 33
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataClientsReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1116,
              "column": 8
            },
            "end": {
              "line": 1116,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPendingClients",
          "type": "Array",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1118,
              "column": 8
            },
            "end": {
              "line": 1118,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataToNotify",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1120,
              "column": 8
            },
            "end": {
              "line": 1120,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataLinkedPaths",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1122,
              "column": 8
            },
            "end": {
              "line": 1122,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHasPaths",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1124,
              "column": 8
            },
            "end": {
              "line": 1124,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataCompoundStorage",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1126,
              "column": 8
            },
            "end": {
              "line": 1126,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHost",
          "type": "Polymer_PropertyEffects",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1128,
              "column": 8
            },
            "end": {
              "line": 1128,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataTemp",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1130,
              "column": 8
            },
            "end": {
              "line": 1130,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataClientsInitialized",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1132,
              "column": 8
            },
            "end": {
              "line": 1132,
              "column": 38
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__computeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1140,
              "column": 8
            },
            "end": {
              "line": 1140,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__reflectEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1142,
              "column": 8
            },
            "end": {
              "line": 1142,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__notifyEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1144,
              "column": 8
            },
            "end": {
              "line": 1144,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__propagateEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1146,
              "column": 8
            },
            "end": {
              "line": 1146,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__observeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1148,
              "column": 8
            },
            "end": {
              "line": 1148,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__readOnly",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1150,
              "column": 8
            },
            "end": {
              "line": 1150,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__templateInfo",
          "type": "!TemplateInfo",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1154,
              "column": 8
            },
            "end": {
              "line": 1154,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_template",
          "type": "HTMLTemplateElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 519,
              "column": 8
            },
            "end": {
              "line": 519,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_importPath",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 521,
              "column": 8
            },
            "end": {
              "line": 521,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "rootPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 523,
              "column": 8
            },
            "end": {
              "line": 523,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "importPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 525,
              "column": 8
            },
            "end": {
              "line": 525,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "root",
          "type": "(StampedTemplate|HTMLElement|ShadowRoot)",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 527,
              "column": 8
            },
            "end": {
              "line": 527,
              "column": 18
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "$",
          "type": "!Object.<string, !Node>",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 529,
              "column": 8
            },
            "end": {
              "line": 529,
              "column": 15
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "paging",
          "type": "{start: Number, limit: Number}",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 103,
              "column": 10
            },
            "end": {
              "line": 106,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "limit",
          "type": "number",
          "description": "Max count of single page.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 10
            },
            "end": {
              "line": 115,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "10"
        },
        {
          "name": "total",
          "type": "number",
          "description": "Total count.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 10
            },
            "end": {
              "line": 124,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "totalPageSize",
          "type": "number",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 126,
              "column": 10
            },
            "end": {
              "line": 129,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "__pageIndex",
          "type": "number",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 130,
              "column": 10
            },
            "end": {
              "line": 133,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1"
        }
      ],
      "methods": [
        {
          "name": "_stampTemplate",
          "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2320,
              "column": 6
            },
            "end": {
              "line": 2345,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to stamp"
            }
          ],
          "return": {
            "type": "!StampedTemplate",
            "desc": "Cloned template content"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addMethodEventListenerToNode",
          "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 451,
              "column": 6
            },
            "end": {
              "line": 456,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to add listener on"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of method"
            },
            {
              "name": "context",
              "type": "*=",
              "description": "Context the method will be called on (defaults\n  to `node`)"
            }
          ],
          "return": {
            "type": "Function",
            "desc": "Generated handler function"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_addEventListenerToNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 465,
              "column": 6
            },
            "end": {
              "line": 467,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to add event listener to"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "Function",
              "description": "Listener function to add"
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_removeEventListenerFromNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 476,
              "column": 6
            },
            "end": {
              "line": 478,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to remove event listener from"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "Function",
              "description": "Listener function to remove"
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "attributeChangedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`attributeChangedCallback`.\n\nBy default, attributes declared in `properties` metadata are\ndeserialized using their `type` information to properties of the\nsame name.  \"Dash-cased\" attributes are deserialized to \"camelCase\"\nproperties.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 723,
              "column": 6
            },
            "end": {
              "line": 731,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of attribute."
            },
            {
              "name": "old",
              "type": "?string",
              "description": "Old value of attribute."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "Current value of attribute."
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeProperties",
          "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 543,
              "column": 6
            },
            "end": {
              "line": 577,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeProtoProperties",
          "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1184,
              "column": 6
            },
            "end": {
              "line": 1188,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the prototype"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_initializeInstanceProperties",
          "description": "Overrides `Polymer.PropertyAccessors` implementation to avoid setting\n`_setProperty`'s `shouldNotify: true`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1197,
              "column": 6
            },
            "end": {
              "line": 1206,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the instance"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_ensureAttribute",
          "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 236,
              "column": 6
            },
            "end": {
              "line": 240,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to ensure is set."
            },
            {
              "name": "value",
              "type": "string",
              "description": "of the attribute."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_attributeToProperty",
          "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 252,
              "column": 6
            },
            "end": {
              "line": 258,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to deserialize."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "of the attribute."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "type to deserialize to."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_propertyToAttribute",
          "description": "Serializes a property to its associated attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 267,
              "column": 6
            },
            "end": {
              "line": 273,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name to reflect."
            },
            {
              "name": "attribute",
              "type": "string=",
              "description": "Attribute name to reflect."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Property value to refect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_valueToNodeAttribute",
          "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 287,
              "column": 6
            },
            "end": {
              "line": 294,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Element to set attribute to."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to serialize."
            },
            {
              "name": "attribute",
              "type": "string",
              "description": "Attribute name to serialize to."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_serializeValue",
          "description": "Converts a typed JavaScript value to a string.\n\nThis method is called by Polymer when setting JS property values to\nHTML attributes.  Users may override this method on Polymer element\nprototypes to provide serialization for custom types.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 306,
              "column": 6
            },
            "end": {
              "line": 326,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "*",
              "description": "Property value to serialize."
            }
          ],
          "return": {
            "type": "(string|undefined)",
            "desc": "String serialized from the provided property value."
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_deserializeValue",
          "description": "Converts a string to a typed JavaScript value.\n\nThis method is called by Polymer when reading HTML attribute values to\nJS properties.  Users may override this method on Polymer element\nprototypes to provide deserialization for custom `type`s.  Note,\nthe `type` argument is the value of the `type` field provided in the\n`properties` configuration object for a given property, and is\nby convention the constructor for the type to deserialize.\n\nNote: The return value of `undefined` is used as a sentinel value to\nindicate the attribute should be removed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 387,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "?string",
              "description": "Attribute value to deserialize."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "Type to deserialize the string to."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Typed value deserialized from the provided string."
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_createPropertyAccessor",
          "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.  When calling on\na prototype, any overwritten values are saved in `__dataProto`,\nand it is up to the subclasser to decide how/when to set those\nproperties back into the accessor.  When calling on an instance,\nthe overwritten value is set via `_setPendingProperty`, and the\nuser should call `_invalidateProperties` or `_flushProperties`\nfor the values to take effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 411,
              "column": 6
            },
            "end": {
              "line": 431,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "readOnly",
              "type": "boolean=",
              "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_hasAccessor",
          "description": "Returns true if this library created an accessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 439,
              "column": 6
            },
            "end": {
              "line": 441,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if an accessor was created"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_setProperty",
          "description": "Overrides base implementation to ensure all accessors set `shouldNotify`\nto true, for per-property notification tracking.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1473,
              "column": 6
            },
            "end": {
              "line": 1477,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setPendingProperty",
          "description": "Overrides the `PropertyAccessors` implementation to introduce special\ndirty check logic depending on the property & value being set:\n\n1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n   Stored in `__dataTemp`, dirty checked against `__dataTemp`\n2. Object set to simple property (e.g. 'prop': {...})\n   Stored in `__dataTemp` and `__data`, dirty checked against\n   `__dataTemp` by default implementation of `_shouldPropertyChange`\n3. Primitive value set to simple property (e.g. 'prop': 42)\n   Stored in `__data`, dirty checked against `__data`\n\nThe dirty-check is important to prevent cycles due to two-way\nnotification, but paths and objects are only dirty checked against any\nprevious value set during this turn via a \"temporary cache\" that is\ncleared when the last `_propertiesChanged` exits. This is so:\na. any cached array paths (e.g. 'array.3.prop') may be invalidated\n   due to array mutations like shift/unshift/splice; this is fine\n   since path changes are dirty-checked at user entry points like `set`\nb. dirty-checking for objects only lasts one turn to allow the user\n   to mutate the object in-place and re-set it with the same identity\n   and have all sub-properties re-propagated in a subsequent turn.\n\nThe temp cache is not necessarily sufficient to prevent invalid array\npaths, since a splice can happen during the same turn (with pathological\nuser code); we could introduce a \"fixup\" for temporarily cached array\npaths if needed: https://github.com/Polymer/polymer/issues/4227",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1436,
              "column": 6
            },
            "end": {
              "line": 1465,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "True if property should fire notification\n  event (applies only for `notify: true` properties)"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property changed"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_isPropertyPending",
          "description": "Returns true if the specified property has a pending change.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 493,
              "column": 6
            },
            "end": {
              "line": 495,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if property has a pending change"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_invalidateProperties",
          "description": "Overrides `PropertyAccessor`'s default async queuing of\n`_propertiesChanged`: if `__dataReady` is false (has not yet been\nmanually flushed), the function no-ops; otherwise flushes\n`_propertiesChanged` synchronously.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1487,
              "column": 6
            },
            "end": {
              "line": 1491,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_enableProperties",
          "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 523,
              "column": 6
            },
            "end": {
              "line": 532,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_flushProperties",
          "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 543,
              "column": 6
            },
            "end": {
              "line": 551,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "ready",
          "description": "Stamps the element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 651,
              "column": 6
            },
            "end": {
              "line": 657,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_propertiesChanged",
          "description": "Implements `PropertyAccessors`'s properties changed callback.\n\nRuns each class of effects for the batch of changed properties in\na specific order (compute, propagate, reflect, observe, notify).",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1626,
              "column": 6
            },
            "end": {
              "line": 1659,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "currentProps"
            },
            {
              "name": "changedProps"
            },
            {
              "name": "oldProps"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_shouldPropertyChange",
          "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` for primitive types if a\nstrict equality check fails, and returns `true` for all Object/Arrays.\nThe method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 606,
              "column": 6
            },
            "end": {
              "line": 609,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "value",
              "type": "*",
              "description": "New property value"
            },
            {
              "name": "old",
              "type": "*",
              "description": "Previous property value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Whether the property should be considered a change\n  and enqueue a `_propertiesChanged` callback"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_addPropertyEffect",
          "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1220,
              "column": 6
            },
            "end": {
              "line": 1228,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removePropertyEffect",
          "description": "Removes the given property effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1237,
              "column": 6
            },
            "end": {
              "line": 1243,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property the effect was associated with"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object to remove"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasPropertyEffect",
          "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1254,
              "column": 6
            },
            "end": {
              "line": 1257,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "type",
              "type": "string=",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReadOnlyEffect",
          "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1267,
              "column": 6
            },
            "end": {
              "line": 1269,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasNotifyEffect",
          "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1279,
              "column": 6
            },
            "end": {
              "line": 1281,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReflectEffect",
          "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1291,
              "column": 6
            },
            "end": {
              "line": 1293,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasComputedEffect",
          "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1303,
              "column": 6
            },
            "end": {
              "line": 1305,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setPendingPropertyOrPath",
          "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1337,
              "column": 6
            },
            "end": {
              "line": 1369,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(number|string)>)",
              "description": "Path to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "Set to true if this change should\n cause a property notification event dispatch"
            },
            {
              "name": "isPathNotification",
              "type": "boolean=",
              "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setUnmanagedPropertyToNode",
          "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1391,
              "column": 6
            },
            "end": {
              "line": 1399,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "The node to set a property on"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "The property to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value to set"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_enqueueClient",
          "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1501,
              "column": 6
            },
            "end": {
              "line": 1506,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "client",
              "type": "Object",
              "description": "PropertyEffects client to enqueue"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_flushClients",
          "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1514,
              "column": 6
            },
            "end": {
              "line": 1525,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__enableOrFlushClients",
          "description": "(c) the stamped dom enables.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1539,
              "column": 6
            },
            "end": {
              "line": 1552,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_readyClients",
          "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 668,
              "column": 6
            },
            "end": {
              "line": 677,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "setProperties",
          "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1579,
              "column": 6
            },
            "end": {
              "line": 1590,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
            },
            {
              "name": "setReadOnly",
              "type": "boolean=",
              "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_propagatePropertyChanges",
          "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1670,
              "column": 6
            },
            "end": {
              "line": 1680,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProps",
              "type": "Object",
              "description": "Bag of changed properties"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "linkPaths",
          "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1690,
              "column": 6
            },
            "end": {
              "line": 1695,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "to",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Target path to link."
            },
            {
              "name": "from",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Source path to link."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unlinkPaths",
          "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1706,
              "column": 6
            },
            "end": {
              "line": 1711,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Target path to unlink."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifySplices",
          "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1742,
              "column": 6
            },
            "end": {
              "line": 1746,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "splices",
              "type": "Array",
              "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "get",
          "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1767,
              "column": 6
            },
            "end": {
              "line": 1769,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "set",
          "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1791,
              "column": 6
            },
            "end": {
              "line": 1801,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set at the specified path."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "push",
          "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1817,
              "column": 6
            },
            "end": {
              "line": 1826,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to push onto array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "pop",
          "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1841,
              "column": 6
            },
            "end": {
              "line": 1850,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "splice",
          "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1869,
              "column": 6
            },
            "end": {
              "line": 1886,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "start",
              "type": "number",
              "description": "Index from which to start removing/inserting."
            },
            {
              "name": "deleteCount",
              "type": "number",
              "description": "Number of items to remove."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert into array."
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Array of removed items."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "shift",
          "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1901,
              "column": 6
            },
            "end": {
              "line": 1910,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unshift",
          "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1926,
              "column": 6
            },
            "end": {
              "line": 1934,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert info array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifyPath",
          "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1948,
              "column": 6
            },
            "end": {
              "line": 1965,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Value at the path (optional)."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReadOnlyProperty",
          "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1977,
              "column": 6
            },
            "end": {
              "line": 1984,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createPropertyObserver",
          "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1997,
              "column": 6
            },
            "end": {
              "line": 2007,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createMethodObserver",
          "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2019,
              "column": 6
            },
            "end": {
              "line": 2025,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createNotifyingProperty",
          "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2035,
              "column": 6
            },
            "end": {
              "line": 2043,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReflectedProperty",
          "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2053,
              "column": 6
            },
            "end": {
              "line": 2066,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createComputedProperty",
          "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2079,
              "column": 6
            },
            "end": {
              "line": 2085,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_bindTemplate",
          "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2255,
              "column": 6
            },
            "end": {
              "line": 2278,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            },
            {
              "name": "instanceBinding",
              "type": "boolean=",
              "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removeBoundDom",
          "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2355,
              "column": 6
            },
            "end": {
              "line": 2376,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "!StampedTemplate",
              "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "connectedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 633,
              "column": 6
            },
            "end": {
              "line": 638,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`disconnectedCallback`.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 644,
              "column": 6
            },
            "end": {
              "line": 644,
              "column": 31
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_attachDom",
          "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 691,
              "column": 6
            },
            "end": {
              "line": 707,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "StampedTemplate",
              "description": "to attach to the element."
            }
          ],
          "return": {
            "type": "ShadowRoot",
            "desc": "node to which the dom has been attached."
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "updateStyles",
          "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 750,
              "column": 6
            },
            "end": {
              "line": 754,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "properties",
              "type": "Object=",
              "description": "Bag of custom property key/values to\n  apply to this element."
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "resolveUrl",
          "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 767,
              "column": 6
            },
            "end": {
              "line": 772,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "string",
              "description": "URL to resolve."
            },
            {
              "name": "base",
              "type": "string=",
              "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
            }
          ],
          "return": {
            "type": "string",
            "desc": "Rewritten URL relative to base"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_pageIndexChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 6
            },
            "end": {
              "line": 145,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_calTotalPageSize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 6
            },
            "end": {
              "line": 149,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "total"
            },
            {
              "name": "limit"
            }
          ]
        },
        {
          "name": "first",
          "description": "Go to the first page.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 153,
              "column": 6
            },
            "end": {
              "line": 155,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "prev",
          "description": "Go to previous page.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 160,
              "column": 6
            },
            "end": {
              "line": 164,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "next",
          "description": "Go to next page.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 169,
              "column": 6
            },
            "end": {
              "line": 173,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "last",
          "description": "Go to the last page.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 178,
              "column": 6
            },
            "end": {
              "line": 180,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [
        {
          "name": "_parseTemplate",
          "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 197,
              "column": 6
            },
            "end": {
              "line": 208,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to parse"
            },
            {
              "name": "outerTemplateInfo",
              "type": "TemplateInfo=",
              "description": "Template metadata from the outer\n  template, for parsing nested templates"
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Parsed template metadata"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateContent",
          "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 783,
              "column": 6
            },
            "end": {
              "line": 786,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template"
            },
            {
              "name": "templateInfo"
            },
            {
              "name": "nodeInfo"
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_parseTemplateNode",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2395,
              "column": 6
            },
            "end": {
              "line": 2409,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateChildNodes",
          "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 257,
              "column": 6
            },
            "end": {
              "line": 294,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "root",
              "type": "Node",
              "description": "Root node whose `childNodes` will be parsed"
            },
            {
              "name": "templateInfo",
              "type": "!TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "!NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNestedTemplate",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2482,
              "column": 6
            },
            "end": {
              "line": 2492,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateNodeAttributes",
          "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 332,
              "column": 6
            },
            "end": {
              "line": 341,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNodeAttribute",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2430,
              "column": 6
            },
            "end": {
              "line": 2466,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            },
            {
              "name": "name",
              "type": "string",
              "description": "Attribute name"
            },
            {
              "name": "value",
              "type": "string",
              "description": "Attribute value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_contentForTemplate",
          "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 387,
              "column": 6
            },
            "end": {
              "line": 390,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template to retrieve `content` for"
            }
          ],
          "return": {
            "type": "DocumentFragment",
            "desc": "Content fragment"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "createPropertiesForAttributes",
          "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 113,
              "column": 6
            },
            "end": {
              "line": 118,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "addPropertyEffect",
          "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2124,
              "column": 6
            },
            "end": {
              "line": 2126,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createPropertyObserver",
          "description": "Creates a single-property observer for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2137,
              "column": 6
            },
            "end": {
              "line": 2139,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createMethodObserver",
          "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2153,
              "column": 6
            },
            "end": {
              "line": 2155,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createNotifyingProperty",
          "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2164,
              "column": 6
            },
            "end": {
              "line": 2166,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReadOnlyProperty",
          "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2183,
              "column": 6
            },
            "end": {
              "line": 2185,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReflectedProperty",
          "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2194,
              "column": 6
            },
            "end": {
              "line": 2196,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createComputedProperty",
          "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2211,
              "column": 6
            },
            "end": {
              "line": 2213,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "bindTemplate",
          "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2227,
              "column": 6
            },
            "end": {
              "line": 2229,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Template metadata object"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addTemplatePropertyEffect",
          "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2292,
              "column": 6
            },
            "end": {
              "line": 2298,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Template metadata to add effect to"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseBindings",
          "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2527,
              "column": 6
            },
            "end": {
              "line": 2592,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "text",
              "type": "string",
              "description": "Text to parse from attribute or textContent"
            },
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Current template metadata"
            }
          ],
          "return": {
            "type": "Array.<!BindingPart>",
            "desc": "Array of binding part metadata"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_evaluateBinding",
          "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2608,
              "column": 6
            },
            "end": {
              "line": 2625,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "inst",
              "type": "this",
              "description": "Element that should be used as scope for\n  binding dependencies"
            },
            {
              "name": "part",
              "type": "BindingPart",
              "description": "Binding part metadata"
            },
            {
              "name": "path",
              "type": "string",
              "description": "Property/path that triggered this effect"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of current property changes"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value the binding part evaluated to"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "finalize",
          "description": "Called automatically when the first element instance is created to\nensure that class finalization work has been completed.\nMay be called by users to eagerly perform class finalization work\nprior to the creation of the first element instance.\n\nClass finalization work generally includes meta-programming such as\ncreating property accessors and any property effect metadata needed for\nthe features used.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 441,
              "column": 6
            },
            "end": {
              "line": 445,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_processStyleText",
          "description": "Gather style text for the template",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 588,
              "column": 6
            },
            "end": {
              "line": 591,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "is",
              "type": "string",
              "description": "Tag name for this element"
            },
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to process"
            },
            {
              "name": "baseURI",
              "type": "string",
              "description": "Base URI to rebase CSS paths against"
            }
          ],
          "return": {
            "type": "string",
            "desc": "The combined CSS text"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_finalizeTemplate",
          "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 602,
              "column": 6
            },
            "end": {
              "line": 621,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "is",
              "type": "string",
              "description": "Tag name (or type extension name) for this element"
            },
            {
              "name": "ext",
              "type": "string=",
              "description": "For type extensions, the tag name that was extended"
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        }
      ],
      "demos": [
        {
          "url": "demo/h2-pagination/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 93,
          "column": 4
        },
        "end": {
          "line": 181,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "H2Pagination",
      "attributes": [
        {
          "name": "paging",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 103,
              "column": 10
            },
            "end": {
              "line": 106,
              "column": 11
            }
          },
          "metadata": {},
          "type": "{start: Number, limit: Number}"
        },
        {
          "name": "limit",
          "description": "Max count of single page.",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 10
            },
            "end": {
              "line": 115,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "total",
          "description": "Total count.",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 10
            },
            "end": {
              "line": 124,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "total-page-size",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 126,
              "column": 10
            },
            "end": {
              "line": 129,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "paging-changed",
          "description": "Fired when the `paging` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "h2-pagination"
    },
    {
      "description": "`h2-dialog`\n\nExample:\n```html\n<h2-dialog id=\"dialog\">\n  <div slot=\"container\">\n    Put your Content here inside an element which with [slot=container]\n  </div>\n</h2-dialog>\n<button id=\"btn\" onclick=\"javascript:dialog.open();\">Click to open the Dialog</button>\n```\n## Styling\n\nThe following custom properties and mixins are available for styling:\n\n|Custom property | Description | Default|\n|----------------|-------------|----------|\n|`--h2-dialog-width` | Mixin applied to the width of dialog | 85%\n|`--h2-dialog-height` | Mixin applied to the height of dialog | 90%",
      "summary": "",
      "path": "h2-dialog.html",
      "properties": [
        {
          "name": "title",
          "type": "string",
          "description": "Title of the dialog",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 105,
              "column": 10
            },
            "end": {
              "line": 107,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "stopAutoDismiss",
          "type": "boolean",
          "description": "Set to True to stop auto dismiss.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 10
            },
            "end": {
              "line": 116,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 124,
              "column": 6
            },
            "end": {
              "line": 153,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "open",
          "description": "Open the dialog.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 158,
              "column": 6
            },
            "end": {
              "line": 160,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "close",
          "description": "Close the dialog.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 165,
              "column": 6
            },
            "end": {
              "line": 167,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/h2-dialog/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 99,
          "column": 4
        },
        "end": {
          "line": 168,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "H2Dialog",
      "attributes": [
        {
          "name": "title",
          "description": "Title of the dialog",
          "sourceRange": {
            "start": {
              "line": 105,
              "column": 10
            },
            "end": {
              "line": 107,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "stop-auto-dismiss",
          "description": "Set to True to stop auto dismiss.",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 10
            },
            "end": {
              "line": 116,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "h2-dialog-closed",
          "description": "h2-dialog-closed\nFired when the dialog closed.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "container",
          "range": {
            "file": "h2-dialog.html",
            "start": {
              "line": 88,
              "column": 8
            },
            "end": {
              "line": 88,
              "column": 38
            }
          }
        }
      ],
      "tagname": "h2-dialog"
    },
    {
      "description": "```javascript\n\n<h2-tip id=\"tip\"></h2-tip>\n<h2-tip type=\"success\" message=\"success\" id=\"tip2\"></h2-tip>\n<h2-tip type=\"error\" message=\"error\" id=\"tip3\"></h2-tip>\n<h2-tip type=\"confirm\" message=\"confirm?\" id=\"tip4\"></h2-tip>\n<h2-tip type=\"prompt\" message=\"prompt?\" id=\"tip5\"></h2-tip>\n<script>\n    tip.open();\n    tip.close();\n    tip4.open(\n        () => {\n            alert(\"点击确定！\");\n        }, () => {\n            alert(\"点击取消\");\n        });\n</script>\n```\n\n`h2-tip`",
      "summary": "",
      "path": "h2-tip.html",
      "properties": [
        {
          "name": "__serializing",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 123,
              "column": 8
            },
            "end": {
              "line": 123,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataCounter",
          "type": "number",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1152,
              "column": 8
            },
            "end": {
              "line": 1152,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataEnabled",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 127,
              "column": 8
            },
            "end": {
              "line": 127,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 129,
              "column": 8
            },
            "end": {
              "line": 129,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataInvalid",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 131,
              "column": 8
            },
            "end": {
              "line": 131,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__data",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1134,
              "column": 8
            },
            "end": {
              "line": 1134,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPending",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1136,
              "column": 8
            },
            "end": {
              "line": 1136,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataOld",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1138,
              "column": 8
            },
            "end": {
              "line": 1138,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataProto",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 139,
              "column": 8
            },
            "end": {
              "line": 139,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataHasAccessor",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 141,
              "column": 8
            },
            "end": {
              "line": 141,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataInstanceProps",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 143,
              "column": 8
            },
            "end": {
              "line": 143,
              "column": 33
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataClientsReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1116,
              "column": 8
            },
            "end": {
              "line": 1116,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPendingClients",
          "type": "Array",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1118,
              "column": 8
            },
            "end": {
              "line": 1118,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataToNotify",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1120,
              "column": 8
            },
            "end": {
              "line": 1120,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataLinkedPaths",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1122,
              "column": 8
            },
            "end": {
              "line": 1122,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHasPaths",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1124,
              "column": 8
            },
            "end": {
              "line": 1124,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataCompoundStorage",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1126,
              "column": 8
            },
            "end": {
              "line": 1126,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHost",
          "type": "Polymer_PropertyEffects",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1128,
              "column": 8
            },
            "end": {
              "line": 1128,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataTemp",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1130,
              "column": 8
            },
            "end": {
              "line": 1130,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataClientsInitialized",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1132,
              "column": 8
            },
            "end": {
              "line": 1132,
              "column": 38
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__computeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1140,
              "column": 8
            },
            "end": {
              "line": 1140,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__reflectEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1142,
              "column": 8
            },
            "end": {
              "line": 1142,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__notifyEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1144,
              "column": 8
            },
            "end": {
              "line": 1144,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__propagateEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1146,
              "column": 8
            },
            "end": {
              "line": 1146,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__observeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1148,
              "column": 8
            },
            "end": {
              "line": 1148,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__readOnly",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1150,
              "column": 8
            },
            "end": {
              "line": 1150,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__templateInfo",
          "type": "!TemplateInfo",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1154,
              "column": 8
            },
            "end": {
              "line": 1154,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_template",
          "type": "HTMLTemplateElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 519,
              "column": 8
            },
            "end": {
              "line": 519,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_importPath",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 521,
              "column": 8
            },
            "end": {
              "line": 521,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "rootPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 523,
              "column": 8
            },
            "end": {
              "line": 523,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "importPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 525,
              "column": 8
            },
            "end": {
              "line": 525,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "root",
          "type": "(StampedTemplate|HTMLElement|ShadowRoot)",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 527,
              "column": 8
            },
            "end": {
              "line": 527,
              "column": 18
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "$",
          "type": "!Object.<string, !Node>",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 529,
              "column": 8
            },
            "end": {
              "line": 529,
              "column": 15
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "message",
          "type": "string",
          "description": "提示框提示信息",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 10
            },
            "end": {
              "line": 145,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "type",
          "type": "string",
          "description": "提示框的类型",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 10
            },
            "end": {
              "line": 154,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"alert\""
        },
        {
          "name": "remark",
          "type": "string",
          "description": "prompt类型，确认弹出框中输入信息",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 158,
              "column": 10
            },
            "end": {
              "line": 160,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "okBtn",
          "type": "string",
          "description": "确认按钮文字，默认为“确定”",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 164,
              "column": 10
            },
            "end": {
              "line": 169,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"确定\""
        },
        {
          "name": "noBtn",
          "type": "string",
          "description": "取消按钮文字，默认为“取消”",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 173,
              "column": 10
            },
            "end": {
              "line": 178,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"取消\""
        },
        {
          "name": "okFn",
          "type": "Object",
          "description": "confirm、prompt信息框确认按钮点击回调函数",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 182,
              "column": 10
            },
            "end": {
              "line": 184,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "noFn",
          "type": "Object",
          "description": "confirm、prompt信息框取消按钮点击回调函数",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 188,
              "column": 10
            },
            "end": {
              "line": 190,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "_stampTemplate",
          "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2320,
              "column": 6
            },
            "end": {
              "line": 2345,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to stamp"
            }
          ],
          "return": {
            "type": "!StampedTemplate",
            "desc": "Cloned template content"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addMethodEventListenerToNode",
          "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 451,
              "column": 6
            },
            "end": {
              "line": 456,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to add listener on"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of method"
            },
            {
              "name": "context",
              "type": "*=",
              "description": "Context the method will be called on (defaults\n  to `node`)"
            }
          ],
          "return": {
            "type": "Function",
            "desc": "Generated handler function"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_addEventListenerToNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 465,
              "column": 6
            },
            "end": {
              "line": 467,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to add event listener to"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "Function",
              "description": "Listener function to add"
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_removeEventListenerFromNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 476,
              "column": 6
            },
            "end": {
              "line": 478,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to remove event listener from"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "Function",
              "description": "Listener function to remove"
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "attributeChangedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`attributeChangedCallback`.\n\nBy default, attributes declared in `properties` metadata are\ndeserialized using their `type` information to properties of the\nsame name.  \"Dash-cased\" attributes are deserialized to \"camelCase\"\nproperties.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 723,
              "column": 6
            },
            "end": {
              "line": 731,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of attribute."
            },
            {
              "name": "old",
              "type": "?string",
              "description": "Old value of attribute."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "Current value of attribute."
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeProperties",
          "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 543,
              "column": 6
            },
            "end": {
              "line": 577,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeProtoProperties",
          "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1184,
              "column": 6
            },
            "end": {
              "line": 1188,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the prototype"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_initializeInstanceProperties",
          "description": "Overrides `Polymer.PropertyAccessors` implementation to avoid setting\n`_setProperty`'s `shouldNotify: true`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1197,
              "column": 6
            },
            "end": {
              "line": 1206,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the instance"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_ensureAttribute",
          "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 236,
              "column": 6
            },
            "end": {
              "line": 240,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to ensure is set."
            },
            {
              "name": "value",
              "type": "string",
              "description": "of the attribute."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_attributeToProperty",
          "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 252,
              "column": 6
            },
            "end": {
              "line": 258,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to deserialize."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "of the attribute."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "type to deserialize to."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_propertyToAttribute",
          "description": "Serializes a property to its associated attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 267,
              "column": 6
            },
            "end": {
              "line": 273,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name to reflect."
            },
            {
              "name": "attribute",
              "type": "string=",
              "description": "Attribute name to reflect."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Property value to refect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_valueToNodeAttribute",
          "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 287,
              "column": 6
            },
            "end": {
              "line": 294,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Element to set attribute to."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to serialize."
            },
            {
              "name": "attribute",
              "type": "string",
              "description": "Attribute name to serialize to."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_serializeValue",
          "description": "Converts a typed JavaScript value to a string.\n\nThis method is called by Polymer when setting JS property values to\nHTML attributes.  Users may override this method on Polymer element\nprototypes to provide serialization for custom types.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 306,
              "column": 6
            },
            "end": {
              "line": 326,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "*",
              "description": "Property value to serialize."
            }
          ],
          "return": {
            "type": "(string|undefined)",
            "desc": "String serialized from the provided property value."
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_deserializeValue",
          "description": "Converts a string to a typed JavaScript value.\n\nThis method is called by Polymer when reading HTML attribute values to\nJS properties.  Users may override this method on Polymer element\nprototypes to provide deserialization for custom `type`s.  Note,\nthe `type` argument is the value of the `type` field provided in the\n`properties` configuration object for a given property, and is\nby convention the constructor for the type to deserialize.\n\nNote: The return value of `undefined` is used as a sentinel value to\nindicate the attribute should be removed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 387,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "?string",
              "description": "Attribute value to deserialize."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "Type to deserialize the string to."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Typed value deserialized from the provided string."
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_createPropertyAccessor",
          "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.  When calling on\na prototype, any overwritten values are saved in `__dataProto`,\nand it is up to the subclasser to decide how/when to set those\nproperties back into the accessor.  When calling on an instance,\nthe overwritten value is set via `_setPendingProperty`, and the\nuser should call `_invalidateProperties` or `_flushProperties`\nfor the values to take effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 411,
              "column": 6
            },
            "end": {
              "line": 431,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "readOnly",
              "type": "boolean=",
              "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_hasAccessor",
          "description": "Returns true if this library created an accessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 439,
              "column": 6
            },
            "end": {
              "line": 441,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if an accessor was created"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_setProperty",
          "description": "Overrides base implementation to ensure all accessors set `shouldNotify`\nto true, for per-property notification tracking.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1473,
              "column": 6
            },
            "end": {
              "line": 1477,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setPendingProperty",
          "description": "Overrides the `PropertyAccessors` implementation to introduce special\ndirty check logic depending on the property & value being set:\n\n1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n   Stored in `__dataTemp`, dirty checked against `__dataTemp`\n2. Object set to simple property (e.g. 'prop': {...})\n   Stored in `__dataTemp` and `__data`, dirty checked against\n   `__dataTemp` by default implementation of `_shouldPropertyChange`\n3. Primitive value set to simple property (e.g. 'prop': 42)\n   Stored in `__data`, dirty checked against `__data`\n\nThe dirty-check is important to prevent cycles due to two-way\nnotification, but paths and objects are only dirty checked against any\nprevious value set during this turn via a \"temporary cache\" that is\ncleared when the last `_propertiesChanged` exits. This is so:\na. any cached array paths (e.g. 'array.3.prop') may be invalidated\n   due to array mutations like shift/unshift/splice; this is fine\n   since path changes are dirty-checked at user entry points like `set`\nb. dirty-checking for objects only lasts one turn to allow the user\n   to mutate the object in-place and re-set it with the same identity\n   and have all sub-properties re-propagated in a subsequent turn.\n\nThe temp cache is not necessarily sufficient to prevent invalid array\npaths, since a splice can happen during the same turn (with pathological\nuser code); we could introduce a \"fixup\" for temporarily cached array\npaths if needed: https://github.com/Polymer/polymer/issues/4227",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1436,
              "column": 6
            },
            "end": {
              "line": 1465,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "True if property should fire notification\n  event (applies only for `notify: true` properties)"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property changed"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_isPropertyPending",
          "description": "Returns true if the specified property has a pending change.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 493,
              "column": 6
            },
            "end": {
              "line": 495,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if property has a pending change"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_invalidateProperties",
          "description": "Overrides `PropertyAccessor`'s default async queuing of\n`_propertiesChanged`: if `__dataReady` is false (has not yet been\nmanually flushed), the function no-ops; otherwise flushes\n`_propertiesChanged` synchronously.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1487,
              "column": 6
            },
            "end": {
              "line": 1491,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_enableProperties",
          "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 523,
              "column": 6
            },
            "end": {
              "line": 532,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_flushProperties",
          "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 543,
              "column": 6
            },
            "end": {
              "line": 551,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 264,
              "column": 6
            },
            "end": {
              "line": 280,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_propertiesChanged",
          "description": "Implements `PropertyAccessors`'s properties changed callback.\n\nRuns each class of effects for the batch of changed properties in\na specific order (compute, propagate, reflect, observe, notify).",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1626,
              "column": 6
            },
            "end": {
              "line": 1659,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "currentProps"
            },
            {
              "name": "changedProps"
            },
            {
              "name": "oldProps"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_shouldPropertyChange",
          "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` for primitive types if a\nstrict equality check fails, and returns `true` for all Object/Arrays.\nThe method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 606,
              "column": 6
            },
            "end": {
              "line": 609,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "value",
              "type": "*",
              "description": "New property value"
            },
            {
              "name": "old",
              "type": "*",
              "description": "Previous property value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Whether the property should be considered a change\n  and enqueue a `_propertiesChanged` callback"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_addPropertyEffect",
          "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1220,
              "column": 6
            },
            "end": {
              "line": 1228,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removePropertyEffect",
          "description": "Removes the given property effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1237,
              "column": 6
            },
            "end": {
              "line": 1243,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property the effect was associated with"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object to remove"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasPropertyEffect",
          "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1254,
              "column": 6
            },
            "end": {
              "line": 1257,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "type",
              "type": "string=",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReadOnlyEffect",
          "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1267,
              "column": 6
            },
            "end": {
              "line": 1269,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasNotifyEffect",
          "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1279,
              "column": 6
            },
            "end": {
              "line": 1281,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReflectEffect",
          "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1291,
              "column": 6
            },
            "end": {
              "line": 1293,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasComputedEffect",
          "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1303,
              "column": 6
            },
            "end": {
              "line": 1305,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setPendingPropertyOrPath",
          "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1337,
              "column": 6
            },
            "end": {
              "line": 1369,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(number|string)>)",
              "description": "Path to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "Set to true if this change should\n cause a property notification event dispatch"
            },
            {
              "name": "isPathNotification",
              "type": "boolean=",
              "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setUnmanagedPropertyToNode",
          "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1391,
              "column": 6
            },
            "end": {
              "line": 1399,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "The node to set a property on"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "The property to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value to set"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_enqueueClient",
          "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1501,
              "column": 6
            },
            "end": {
              "line": 1506,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "client",
              "type": "Object",
              "description": "PropertyEffects client to enqueue"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_flushClients",
          "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1514,
              "column": 6
            },
            "end": {
              "line": 1525,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__enableOrFlushClients",
          "description": "(c) the stamped dom enables.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1539,
              "column": 6
            },
            "end": {
              "line": 1552,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_readyClients",
          "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 668,
              "column": 6
            },
            "end": {
              "line": 677,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "setProperties",
          "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1579,
              "column": 6
            },
            "end": {
              "line": 1590,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
            },
            {
              "name": "setReadOnly",
              "type": "boolean=",
              "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_propagatePropertyChanges",
          "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1670,
              "column": 6
            },
            "end": {
              "line": 1680,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProps",
              "type": "Object",
              "description": "Bag of changed properties"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "linkPaths",
          "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1690,
              "column": 6
            },
            "end": {
              "line": 1695,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "to",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Target path to link."
            },
            {
              "name": "from",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Source path to link."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unlinkPaths",
          "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1706,
              "column": 6
            },
            "end": {
              "line": 1711,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Target path to unlink."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifySplices",
          "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1742,
              "column": 6
            },
            "end": {
              "line": 1746,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "splices",
              "type": "Array",
              "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "get",
          "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1767,
              "column": 6
            },
            "end": {
              "line": 1769,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "set",
          "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1791,
              "column": 6
            },
            "end": {
              "line": 1801,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set at the specified path."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "push",
          "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1817,
              "column": 6
            },
            "end": {
              "line": 1826,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to push onto array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "pop",
          "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1841,
              "column": 6
            },
            "end": {
              "line": 1850,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "splice",
          "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1869,
              "column": 6
            },
            "end": {
              "line": 1886,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "start",
              "type": "number",
              "description": "Index from which to start removing/inserting."
            },
            {
              "name": "deleteCount",
              "type": "number",
              "description": "Number of items to remove."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert into array."
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Array of removed items."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "shift",
          "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1901,
              "column": 6
            },
            "end": {
              "line": 1910,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unshift",
          "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1926,
              "column": 6
            },
            "end": {
              "line": 1934,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert info array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifyPath",
          "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1948,
              "column": 6
            },
            "end": {
              "line": 1965,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Value at the path (optional)."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReadOnlyProperty",
          "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1977,
              "column": 6
            },
            "end": {
              "line": 1984,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createPropertyObserver",
          "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1997,
              "column": 6
            },
            "end": {
              "line": 2007,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createMethodObserver",
          "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2019,
              "column": 6
            },
            "end": {
              "line": 2025,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createNotifyingProperty",
          "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2035,
              "column": 6
            },
            "end": {
              "line": 2043,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReflectedProperty",
          "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2053,
              "column": 6
            },
            "end": {
              "line": 2066,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createComputedProperty",
          "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2079,
              "column": 6
            },
            "end": {
              "line": 2085,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_bindTemplate",
          "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2255,
              "column": 6
            },
            "end": {
              "line": 2278,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            },
            {
              "name": "instanceBinding",
              "type": "boolean=",
              "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removeBoundDom",
          "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2355,
              "column": 6
            },
            "end": {
              "line": 2376,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "!StampedTemplate",
              "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "connectedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 633,
              "column": 6
            },
            "end": {
              "line": 638,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`disconnectedCallback`.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 644,
              "column": 6
            },
            "end": {
              "line": 644,
              "column": 31
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_attachDom",
          "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 691,
              "column": 6
            },
            "end": {
              "line": 707,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "StampedTemplate",
              "description": "to attach to the element."
            }
          ],
          "return": {
            "type": "ShadowRoot",
            "desc": "node to which the dom has been attached."
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "updateStyles",
          "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 750,
              "column": 6
            },
            "end": {
              "line": 754,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "properties",
              "type": "Object=",
              "description": "Bag of custom property key/values to\n  apply to this element."
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "resolveUrl",
          "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 767,
              "column": 6
            },
            "end": {
              "line": 772,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "string",
              "description": "URL to resolve."
            },
            {
              "name": "base",
              "type": "string=",
              "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
            }
          ],
          "return": {
            "type": "string",
            "desc": "Rewritten URL relative to base"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_isConfirm",
          "description": "判断是否confirm或prompt类型",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 197,
              "column": 6
            },
            "end": {
              "line": 199,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type"
            }
          ]
        },
        {
          "name": "_isPrompt",
          "description": "判断是否prompt类型",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 204,
              "column": 6
            },
            "end": {
              "line": 206,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type"
            }
          ]
        },
        {
          "name": "cancelFn",
          "description": "点击取消按钮执行的函数，向外抛出cancel-handler事件",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 211,
              "column": 6
            },
            "end": {
              "line": 215,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "confirmFn",
          "description": "点击确认按钮执行的函数，向外抛出confirm-handler事件",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 220,
              "column": 6
            },
            "end": {
              "line": 230,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "__handler",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 232,
              "column": 6
            },
            "end": {
              "line": 238,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "fn"
            }
          ]
        },
        {
          "name": "open",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 240,
              "column": 6
            },
            "end": {
              "line": 258,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "okFn"
            },
            {
              "name": "noFn"
            },
            {
              "name": "type"
            }
          ]
        },
        {
          "name": "close",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 260,
              "column": 6
            },
            "end": {
              "line": 262,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [
        {
          "name": "_parseTemplate",
          "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 197,
              "column": 6
            },
            "end": {
              "line": 208,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to parse"
            },
            {
              "name": "outerTemplateInfo",
              "type": "TemplateInfo=",
              "description": "Template metadata from the outer\n  template, for parsing nested templates"
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Parsed template metadata"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateContent",
          "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 783,
              "column": 6
            },
            "end": {
              "line": 786,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template"
            },
            {
              "name": "templateInfo"
            },
            {
              "name": "nodeInfo"
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_parseTemplateNode",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2395,
              "column": 6
            },
            "end": {
              "line": 2409,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateChildNodes",
          "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 257,
              "column": 6
            },
            "end": {
              "line": 294,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "root",
              "type": "Node",
              "description": "Root node whose `childNodes` will be parsed"
            },
            {
              "name": "templateInfo",
              "type": "!TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "!NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNestedTemplate",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2482,
              "column": 6
            },
            "end": {
              "line": 2492,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateNodeAttributes",
          "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 332,
              "column": 6
            },
            "end": {
              "line": 341,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNodeAttribute",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2430,
              "column": 6
            },
            "end": {
              "line": 2466,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            },
            {
              "name": "name",
              "type": "string",
              "description": "Attribute name"
            },
            {
              "name": "value",
              "type": "string",
              "description": "Attribute value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_contentForTemplate",
          "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 387,
              "column": 6
            },
            "end": {
              "line": 390,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template to retrieve `content` for"
            }
          ],
          "return": {
            "type": "DocumentFragment",
            "desc": "Content fragment"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "createPropertiesForAttributes",
          "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 113,
              "column": 6
            },
            "end": {
              "line": 118,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "addPropertyEffect",
          "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2124,
              "column": 6
            },
            "end": {
              "line": 2126,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createPropertyObserver",
          "description": "Creates a single-property observer for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2137,
              "column": 6
            },
            "end": {
              "line": 2139,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createMethodObserver",
          "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2153,
              "column": 6
            },
            "end": {
              "line": 2155,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createNotifyingProperty",
          "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2164,
              "column": 6
            },
            "end": {
              "line": 2166,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReadOnlyProperty",
          "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2183,
              "column": 6
            },
            "end": {
              "line": 2185,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReflectedProperty",
          "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2194,
              "column": 6
            },
            "end": {
              "line": 2196,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createComputedProperty",
          "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2211,
              "column": 6
            },
            "end": {
              "line": 2213,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "bindTemplate",
          "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2227,
              "column": 6
            },
            "end": {
              "line": 2229,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Template metadata object"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addTemplatePropertyEffect",
          "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2292,
              "column": 6
            },
            "end": {
              "line": 2298,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Template metadata to add effect to"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseBindings",
          "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2527,
              "column": 6
            },
            "end": {
              "line": 2592,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "text",
              "type": "string",
              "description": "Text to parse from attribute or textContent"
            },
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Current template metadata"
            }
          ],
          "return": {
            "type": "Array.<!BindingPart>",
            "desc": "Array of binding part metadata"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_evaluateBinding",
          "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2608,
              "column": 6
            },
            "end": {
              "line": 2625,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "inst",
              "type": "this",
              "description": "Element that should be used as scope for\n  binding dependencies"
            },
            {
              "name": "part",
              "type": "BindingPart",
              "description": "Binding part metadata"
            },
            {
              "name": "path",
              "type": "string",
              "description": "Property/path that triggered this effect"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of current property changes"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value the binding part evaluated to"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "finalize",
          "description": "Called automatically when the first element instance is created to\nensure that class finalization work has been completed.\nMay be called by users to eagerly perform class finalization work\nprior to the creation of the first element instance.\n\nClass finalization work generally includes meta-programming such as\ncreating property accessors and any property effect metadata needed for\nthe features used.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 441,
              "column": 6
            },
            "end": {
              "line": 445,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_processStyleText",
          "description": "Gather style text for the template",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 588,
              "column": 6
            },
            "end": {
              "line": 591,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "is",
              "type": "string",
              "description": "Tag name for this element"
            },
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to process"
            },
            {
              "name": "baseURI",
              "type": "string",
              "description": "Base URI to rebase CSS paths against"
            }
          ],
          "return": {
            "type": "string",
            "desc": "The combined CSS text"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_finalizeTemplate",
          "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 602,
              "column": 6
            },
            "end": {
              "line": 621,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "is",
              "type": "string",
              "description": "Tag name (or type extension name) for this element"
            },
            {
              "name": "ext",
              "type": "string=",
              "description": "For type extensions, the tag name that was extended"
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        }
      ],
      "demos": [
        {
          "url": "demo/h2-tip/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 131,
          "column": 4
        },
        "end": {
          "line": 281,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "H2Tip",
      "attributes": [
        {
          "name": "message",
          "description": "提示框提示信息",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 10
            },
            "end": {
              "line": 145,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "type",
          "description": "提示框的类型",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 10
            },
            "end": {
              "line": 154,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "remark",
          "description": "prompt类型，确认弹出框中输入信息",
          "sourceRange": {
            "start": {
              "line": 158,
              "column": 10
            },
            "end": {
              "line": 160,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "ok-btn",
          "description": "确认按钮文字，默认为“确定”",
          "sourceRange": {
            "start": {
              "line": 164,
              "column": 10
            },
            "end": {
              "line": 169,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "no-btn",
          "description": "取消按钮文字，默认为“取消”",
          "sourceRange": {
            "start": {
              "line": 173,
              "column": 10
            },
            "end": {
              "line": 178,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "ok-fn",
          "description": "confirm、prompt信息框确认按钮点击回调函数",
          "sourceRange": {
            "start": {
              "line": 182,
              "column": 10
            },
            "end": {
              "line": 184,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "no-fn",
          "description": "confirm、prompt信息框取消按钮点击回调函数",
          "sourceRange": {
            "start": {
              "line": 188,
              "column": 10
            },
            "end": {
              "line": 190,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "h2-tip"
    },
    {
      "description": "`h2-button-group`\n\nExample:\n```html\n<h2-button-group label=\"测试\">\n  <div bind-item=\"1\">测试1</div>\n  <div bind-item=\"2\">测试2</div>\n  <div bind-item=\"3\">测试3</div>\n</h2-button-group>\n\n\n<h2-button-group items=\"[[ items ]]\" label=\"测试\" attr-for-label=\"label\"></h2-button-group>\n\nitems = [\n    {label: \"测试1\", value: \"1\"},\n    {label: \"测试2\", value: \"2\"},\n    {label: \"测试3\", value: \"3\"}\n]\n\n```\n\n## Styling\n\nThe following custom properties and mixins are available for styling:\n\n|Custom property | Description | Default|\n|----------------|-------------|----------|\n|`--h2-button-group-button` | Mixin applied to the group button | {}\n|`--h2-button-group-dropdown` | Mixin applied to the group dropdown | {}",
      "summary": "",
      "path": "h2-button-group.html",
      "properties": [
        {
          "name": "label",
          "type": "string",
          "description": "Label of the action group.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 162,
              "column": 10
            },
            "end": {
              "line": 164,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "opened",
          "type": "boolean",
          "description": "Return true if the action group is expanded.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 170,
              "column": 10
            },
            "end": {
              "line": 173,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "expandIcon",
          "type": "string",
          "description": "The icon to show when expanded.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 179,
              "column": 10
            },
            "end": {
              "line": 182,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"arrow-drop-up\""
        },
        {
          "name": "collapseIcon",
          "type": "string",
          "description": "The icon to show when collapsed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 188,
              "column": 10
            },
            "end": {
              "line": 191,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"arrow-drop-down\""
        },
        {
          "name": "items",
          "type": "Array",
          "description": "The dropdown items.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 196,
              "column": 10
            },
            "end": {
              "line": 198,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "attrForLabel",
          "type": "string",
          "description": "Attribute name for label.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 205,
              "column": 10
            },
            "end": {
              "line": 208,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"label\""
        },
        {
          "name": "onItemClick",
          "type": "Object",
          "description": "The Function called when user click on every item on dropdownlist.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 212,
              "column": 10
            },
            "end": {
              "line": 214,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 222,
              "column": 6
            },
            "end": {
              "line": 228,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "open",
          "description": "Expand the group.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 233,
              "column": 6
            },
            "end": {
              "line": 235,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "close",
          "description": "Collpase the group.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 240,
              "column": 6
            },
            "end": {
              "line": 242,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "toggle",
          "description": "Toggle the group.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 247,
              "column": 6
            },
            "end": {
              "line": 249,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "__getIcon",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 251,
              "column": 6
            },
            "end": {
              "line": 253,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "opened"
            }
          ]
        },
        {
          "name": "_onButtonDropdownClick",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 255,
              "column": 6
            },
            "end": {
              "line": 259,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/h2-button-group/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 156,
          "column": 4
        },
        "end": {
          "line": 260,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "H2ButtonGroup",
      "attributes": [
        {
          "name": "label",
          "description": "Label of the action group.",
          "sourceRange": {
            "start": {
              "line": 162,
              "column": 10
            },
            "end": {
              "line": 164,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "opened",
          "description": "Return true if the action group is expanded.",
          "sourceRange": {
            "start": {
              "line": 170,
              "column": 10
            },
            "end": {
              "line": 173,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "expand-icon",
          "description": "The icon to show when expanded.",
          "sourceRange": {
            "start": {
              "line": 179,
              "column": 10
            },
            "end": {
              "line": 182,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "collapse-icon",
          "description": "The icon to show when collapsed.",
          "sourceRange": {
            "start": {
              "line": 188,
              "column": 10
            },
            "end": {
              "line": 191,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "items",
          "description": "The dropdown items.",
          "sourceRange": {
            "start": {
              "line": 196,
              "column": 10
            },
            "end": {
              "line": 198,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "attr-for-label",
          "description": "Attribute name for label.",
          "sourceRange": {
            "start": {
              "line": 205,
              "column": 10
            },
            "end": {
              "line": 208,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "on-item-click",
          "description": "The Function called when user click on every item on dropdownlist.",
          "sourceRange": {
            "start": {
              "line": 212,
              "column": 10
            },
            "end": {
              "line": 214,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "file": "h2-button-group.html",
            "start": {
              "line": 147,
              "column": 6
            },
            "end": {
              "line": 147,
              "column": 19
            }
          }
        }
      ],
      "tagname": "h2-button-group"
    },
    {
      "description": "```html\n\n<h2-grid>\n  <h2-grid-header>\n    <h2-grid-header-cell></h2-grid-header-cell>\n    <h2-grid-header-cell>name</h2-grid-header-cell>\n    <h2-grid-header-cell>age</h2-grid-header-cell>\n    <h2-grid-header-cell>sex</h2-grid-header-cell>\n  </h2-grid-header>\n\n  <h2-grid-body>\n    <h2-grid-row>\n      <h2-grid-cell>zhang san</h2-grid-cell>\n      <h2-grid-cell>li si</h2-grid-cell>\n      <h2-grid-cell>wang wu</h2-grid-cell>\n    </h2-grid-row>\n\n    <h2-grid-row>\n      <h2-grid-cell>zhang san</h2-grid-cell>\n      <h2-grid-cell>li si</h2-grid-cell>\n      <h2-grid-cell>wang wu</h2-grid-cell>\n    </h2-grid-row>\n\n  </h2-grid-body>\n</h2-grid>\n```\n\n`h2-grid`",
      "summary": "",
      "path": "h2-grid.html",
      "properties": [
        {
          "name": "__serializing",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 123,
              "column": 8
            },
            "end": {
              "line": 123,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataCounter",
          "type": "number",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1152,
              "column": 8
            },
            "end": {
              "line": 1152,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataEnabled",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 127,
              "column": 8
            },
            "end": {
              "line": 127,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 129,
              "column": 8
            },
            "end": {
              "line": 129,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataInvalid",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 131,
              "column": 8
            },
            "end": {
              "line": 131,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__data",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1134,
              "column": 8
            },
            "end": {
              "line": 1134,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPending",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1136,
              "column": 8
            },
            "end": {
              "line": 1136,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataOld",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1138,
              "column": 8
            },
            "end": {
              "line": 1138,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataProto",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 139,
              "column": 8
            },
            "end": {
              "line": 139,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataHasAccessor",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 141,
              "column": 8
            },
            "end": {
              "line": 141,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataInstanceProps",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 143,
              "column": 8
            },
            "end": {
              "line": 143,
              "column": 33
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataClientsReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1116,
              "column": 8
            },
            "end": {
              "line": 1116,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPendingClients",
          "type": "Array",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1118,
              "column": 8
            },
            "end": {
              "line": 1118,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataToNotify",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1120,
              "column": 8
            },
            "end": {
              "line": 1120,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataLinkedPaths",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1122,
              "column": 8
            },
            "end": {
              "line": 1122,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHasPaths",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1124,
              "column": 8
            },
            "end": {
              "line": 1124,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataCompoundStorage",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1126,
              "column": 8
            },
            "end": {
              "line": 1126,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHost",
          "type": "Polymer_PropertyEffects",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1128,
              "column": 8
            },
            "end": {
              "line": 1128,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataTemp",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1130,
              "column": 8
            },
            "end": {
              "line": 1130,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataClientsInitialized",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1132,
              "column": 8
            },
            "end": {
              "line": 1132,
              "column": 38
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__computeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1140,
              "column": 8
            },
            "end": {
              "line": 1140,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__reflectEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1142,
              "column": 8
            },
            "end": {
              "line": 1142,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__notifyEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1144,
              "column": 8
            },
            "end": {
              "line": 1144,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__propagateEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1146,
              "column": 8
            },
            "end": {
              "line": 1146,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__observeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1148,
              "column": 8
            },
            "end": {
              "line": 1148,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__readOnly",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1150,
              "column": 8
            },
            "end": {
              "line": 1150,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__templateInfo",
          "type": "!TemplateInfo",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1154,
              "column": 8
            },
            "end": {
              "line": 1154,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_template",
          "type": "HTMLTemplateElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 519,
              "column": 8
            },
            "end": {
              "line": 519,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_importPath",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 521,
              "column": 8
            },
            "end": {
              "line": 521,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "rootPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 523,
              "column": 8
            },
            "end": {
              "line": 523,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "importPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 525,
              "column": 8
            },
            "end": {
              "line": 525,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "root",
          "type": "(StampedTemplate|HTMLElement|ShadowRoot)",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 527,
              "column": 8
            },
            "end": {
              "line": 527,
              "column": 18
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "$",
          "type": "!Object.<string, !Node>",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 529,
              "column": 8
            },
            "end": {
              "line": 529,
              "column": 15
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        }
      ],
      "methods": [
        {
          "name": "_stampTemplate",
          "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2320,
              "column": 6
            },
            "end": {
              "line": 2345,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to stamp"
            }
          ],
          "return": {
            "type": "!StampedTemplate",
            "desc": "Cloned template content"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addMethodEventListenerToNode",
          "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 451,
              "column": 6
            },
            "end": {
              "line": 456,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to add listener on"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of method"
            },
            {
              "name": "context",
              "type": "*=",
              "description": "Context the method will be called on (defaults\n  to `node`)"
            }
          ],
          "return": {
            "type": "Function",
            "desc": "Generated handler function"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_addEventListenerToNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 465,
              "column": 6
            },
            "end": {
              "line": 467,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to add event listener to"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "Function",
              "description": "Listener function to add"
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_removeEventListenerFromNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 476,
              "column": 6
            },
            "end": {
              "line": 478,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to remove event listener from"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "Function",
              "description": "Listener function to remove"
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "attributeChangedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`attributeChangedCallback`.\n\nBy default, attributes declared in `properties` metadata are\ndeserialized using their `type` information to properties of the\nsame name.  \"Dash-cased\" attributes are deserialized to \"camelCase\"\nproperties.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 723,
              "column": 6
            },
            "end": {
              "line": 731,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of attribute."
            },
            {
              "name": "old",
              "type": "?string",
              "description": "Old value of attribute."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "Current value of attribute."
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeProperties",
          "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 543,
              "column": 6
            },
            "end": {
              "line": 577,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeProtoProperties",
          "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1184,
              "column": 6
            },
            "end": {
              "line": 1188,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the prototype"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_initializeInstanceProperties",
          "description": "Overrides `Polymer.PropertyAccessors` implementation to avoid setting\n`_setProperty`'s `shouldNotify: true`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1197,
              "column": 6
            },
            "end": {
              "line": 1206,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the instance"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_ensureAttribute",
          "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 236,
              "column": 6
            },
            "end": {
              "line": 240,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to ensure is set."
            },
            {
              "name": "value",
              "type": "string",
              "description": "of the attribute."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_attributeToProperty",
          "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 252,
              "column": 6
            },
            "end": {
              "line": 258,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to deserialize."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "of the attribute."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "type to deserialize to."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_propertyToAttribute",
          "description": "Serializes a property to its associated attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 267,
              "column": 6
            },
            "end": {
              "line": 273,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name to reflect."
            },
            {
              "name": "attribute",
              "type": "string=",
              "description": "Attribute name to reflect."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Property value to refect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_valueToNodeAttribute",
          "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 287,
              "column": 6
            },
            "end": {
              "line": 294,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Element to set attribute to."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to serialize."
            },
            {
              "name": "attribute",
              "type": "string",
              "description": "Attribute name to serialize to."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_serializeValue",
          "description": "Converts a typed JavaScript value to a string.\n\nThis method is called by Polymer when setting JS property values to\nHTML attributes.  Users may override this method on Polymer element\nprototypes to provide serialization for custom types.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 306,
              "column": 6
            },
            "end": {
              "line": 326,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "*",
              "description": "Property value to serialize."
            }
          ],
          "return": {
            "type": "(string|undefined)",
            "desc": "String serialized from the provided property value."
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_deserializeValue",
          "description": "Converts a string to a typed JavaScript value.\n\nThis method is called by Polymer when reading HTML attribute values to\nJS properties.  Users may override this method on Polymer element\nprototypes to provide deserialization for custom `type`s.  Note,\nthe `type` argument is the value of the `type` field provided in the\n`properties` configuration object for a given property, and is\nby convention the constructor for the type to deserialize.\n\nNote: The return value of `undefined` is used as a sentinel value to\nindicate the attribute should be removed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 387,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "?string",
              "description": "Attribute value to deserialize."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "Type to deserialize the string to."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Typed value deserialized from the provided string."
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_createPropertyAccessor",
          "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.  When calling on\na prototype, any overwritten values are saved in `__dataProto`,\nand it is up to the subclasser to decide how/when to set those\nproperties back into the accessor.  When calling on an instance,\nthe overwritten value is set via `_setPendingProperty`, and the\nuser should call `_invalidateProperties` or `_flushProperties`\nfor the values to take effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 411,
              "column": 6
            },
            "end": {
              "line": 431,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "readOnly",
              "type": "boolean=",
              "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_hasAccessor",
          "description": "Returns true if this library created an accessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 439,
              "column": 6
            },
            "end": {
              "line": 441,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if an accessor was created"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_setProperty",
          "description": "Overrides base implementation to ensure all accessors set `shouldNotify`\nto true, for per-property notification tracking.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1473,
              "column": 6
            },
            "end": {
              "line": 1477,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setPendingProperty",
          "description": "Overrides the `PropertyAccessors` implementation to introduce special\ndirty check logic depending on the property & value being set:\n\n1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n   Stored in `__dataTemp`, dirty checked against `__dataTemp`\n2. Object set to simple property (e.g. 'prop': {...})\n   Stored in `__dataTemp` and `__data`, dirty checked against\n   `__dataTemp` by default implementation of `_shouldPropertyChange`\n3. Primitive value set to simple property (e.g. 'prop': 42)\n   Stored in `__data`, dirty checked against `__data`\n\nThe dirty-check is important to prevent cycles due to two-way\nnotification, but paths and objects are only dirty checked against any\nprevious value set during this turn via a \"temporary cache\" that is\ncleared when the last `_propertiesChanged` exits. This is so:\na. any cached array paths (e.g. 'array.3.prop') may be invalidated\n   due to array mutations like shift/unshift/splice; this is fine\n   since path changes are dirty-checked at user entry points like `set`\nb. dirty-checking for objects only lasts one turn to allow the user\n   to mutate the object in-place and re-set it with the same identity\n   and have all sub-properties re-propagated in a subsequent turn.\n\nThe temp cache is not necessarily sufficient to prevent invalid array\npaths, since a splice can happen during the same turn (with pathological\nuser code); we could introduce a \"fixup\" for temporarily cached array\npaths if needed: https://github.com/Polymer/polymer/issues/4227",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1436,
              "column": 6
            },
            "end": {
              "line": 1465,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "True if property should fire notification\n  event (applies only for `notify: true` properties)"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property changed"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_isPropertyPending",
          "description": "Returns true if the specified property has a pending change.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 493,
              "column": 6
            },
            "end": {
              "line": 495,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if property has a pending change"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_invalidateProperties",
          "description": "Overrides `PropertyAccessor`'s default async queuing of\n`_propertiesChanged`: if `__dataReady` is false (has not yet been\nmanually flushed), the function no-ops; otherwise flushes\n`_propertiesChanged` synchronously.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1487,
              "column": 6
            },
            "end": {
              "line": 1491,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_enableProperties",
          "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 523,
              "column": 6
            },
            "end": {
              "line": 532,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_flushProperties",
          "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 543,
              "column": 6
            },
            "end": {
              "line": 551,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "ready",
          "description": "Stamps the element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 651,
              "column": 6
            },
            "end": {
              "line": 657,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_propertiesChanged",
          "description": "Implements `PropertyAccessors`'s properties changed callback.\n\nRuns each class of effects for the batch of changed properties in\na specific order (compute, propagate, reflect, observe, notify).",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1626,
              "column": 6
            },
            "end": {
              "line": 1659,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "currentProps"
            },
            {
              "name": "changedProps"
            },
            {
              "name": "oldProps"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_shouldPropertyChange",
          "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` for primitive types if a\nstrict equality check fails, and returns `true` for all Object/Arrays.\nThe method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 606,
              "column": 6
            },
            "end": {
              "line": 609,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "value",
              "type": "*",
              "description": "New property value"
            },
            {
              "name": "old",
              "type": "*",
              "description": "Previous property value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Whether the property should be considered a change\n  and enqueue a `_propertiesChanged` callback"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_addPropertyEffect",
          "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1220,
              "column": 6
            },
            "end": {
              "line": 1228,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removePropertyEffect",
          "description": "Removes the given property effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1237,
              "column": 6
            },
            "end": {
              "line": 1243,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property the effect was associated with"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object to remove"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasPropertyEffect",
          "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1254,
              "column": 6
            },
            "end": {
              "line": 1257,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "type",
              "type": "string=",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReadOnlyEffect",
          "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1267,
              "column": 6
            },
            "end": {
              "line": 1269,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasNotifyEffect",
          "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1279,
              "column": 6
            },
            "end": {
              "line": 1281,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReflectEffect",
          "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1291,
              "column": 6
            },
            "end": {
              "line": 1293,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasComputedEffect",
          "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1303,
              "column": 6
            },
            "end": {
              "line": 1305,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setPendingPropertyOrPath",
          "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1337,
              "column": 6
            },
            "end": {
              "line": 1369,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(number|string)>)",
              "description": "Path to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "Set to true if this change should\n cause a property notification event dispatch"
            },
            {
              "name": "isPathNotification",
              "type": "boolean=",
              "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setUnmanagedPropertyToNode",
          "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1391,
              "column": 6
            },
            "end": {
              "line": 1399,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "The node to set a property on"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "The property to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value to set"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_enqueueClient",
          "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1501,
              "column": 6
            },
            "end": {
              "line": 1506,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "client",
              "type": "Object",
              "description": "PropertyEffects client to enqueue"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_flushClients",
          "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1514,
              "column": 6
            },
            "end": {
              "line": 1525,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__enableOrFlushClients",
          "description": "(c) the stamped dom enables.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1539,
              "column": 6
            },
            "end": {
              "line": 1552,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_readyClients",
          "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 668,
              "column": 6
            },
            "end": {
              "line": 677,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "setProperties",
          "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1579,
              "column": 6
            },
            "end": {
              "line": 1590,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
            },
            {
              "name": "setReadOnly",
              "type": "boolean=",
              "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_propagatePropertyChanges",
          "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1670,
              "column": 6
            },
            "end": {
              "line": 1680,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProps",
              "type": "Object",
              "description": "Bag of changed properties"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "linkPaths",
          "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1690,
              "column": 6
            },
            "end": {
              "line": 1695,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "to",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Target path to link."
            },
            {
              "name": "from",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Source path to link."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unlinkPaths",
          "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1706,
              "column": 6
            },
            "end": {
              "line": 1711,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Target path to unlink."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifySplices",
          "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1742,
              "column": 6
            },
            "end": {
              "line": 1746,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "splices",
              "type": "Array",
              "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "get",
          "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1767,
              "column": 6
            },
            "end": {
              "line": 1769,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "set",
          "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1791,
              "column": 6
            },
            "end": {
              "line": 1801,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set at the specified path."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "push",
          "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1817,
              "column": 6
            },
            "end": {
              "line": 1826,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to push onto array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "pop",
          "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1841,
              "column": 6
            },
            "end": {
              "line": 1850,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "splice",
          "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1869,
              "column": 6
            },
            "end": {
              "line": 1886,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "start",
              "type": "number",
              "description": "Index from which to start removing/inserting."
            },
            {
              "name": "deleteCount",
              "type": "number",
              "description": "Number of items to remove."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert into array."
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Array of removed items."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "shift",
          "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1901,
              "column": 6
            },
            "end": {
              "line": 1910,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unshift",
          "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1926,
              "column": 6
            },
            "end": {
              "line": 1934,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert info array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifyPath",
          "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1948,
              "column": 6
            },
            "end": {
              "line": 1965,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Value at the path (optional)."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReadOnlyProperty",
          "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1977,
              "column": 6
            },
            "end": {
              "line": 1984,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createPropertyObserver",
          "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1997,
              "column": 6
            },
            "end": {
              "line": 2007,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createMethodObserver",
          "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2019,
              "column": 6
            },
            "end": {
              "line": 2025,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createNotifyingProperty",
          "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2035,
              "column": 6
            },
            "end": {
              "line": 2043,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReflectedProperty",
          "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2053,
              "column": 6
            },
            "end": {
              "line": 2066,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createComputedProperty",
          "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2079,
              "column": 6
            },
            "end": {
              "line": 2085,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_bindTemplate",
          "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2255,
              "column": 6
            },
            "end": {
              "line": 2278,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            },
            {
              "name": "instanceBinding",
              "type": "boolean=",
              "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removeBoundDom",
          "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2355,
              "column": 6
            },
            "end": {
              "line": 2376,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "!StampedTemplate",
              "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "connectedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 633,
              "column": 6
            },
            "end": {
              "line": 638,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`disconnectedCallback`.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 644,
              "column": 6
            },
            "end": {
              "line": 644,
              "column": 31
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_attachDom",
          "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 691,
              "column": 6
            },
            "end": {
              "line": 707,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "StampedTemplate",
              "description": "to attach to the element."
            }
          ],
          "return": {
            "type": "ShadowRoot",
            "desc": "node to which the dom has been attached."
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "updateStyles",
          "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 750,
              "column": 6
            },
            "end": {
              "line": 754,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "properties",
              "type": "Object=",
              "description": "Bag of custom property key/values to\n  apply to this element."
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "resolveUrl",
          "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 767,
              "column": 6
            },
            "end": {
              "line": 772,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "string",
              "description": "URL to resolve."
            },
            {
              "name": "base",
              "type": "string=",
              "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
            }
          ],
          "return": {
            "type": "string",
            "desc": "Rewritten URL relative to base"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        }
      ],
      "staticMethods": [
        {
          "name": "_parseTemplate",
          "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 197,
              "column": 6
            },
            "end": {
              "line": 208,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to parse"
            },
            {
              "name": "outerTemplateInfo",
              "type": "TemplateInfo=",
              "description": "Template metadata from the outer\n  template, for parsing nested templates"
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Parsed template metadata"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateContent",
          "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 783,
              "column": 6
            },
            "end": {
              "line": 786,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template"
            },
            {
              "name": "templateInfo"
            },
            {
              "name": "nodeInfo"
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_parseTemplateNode",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2395,
              "column": 6
            },
            "end": {
              "line": 2409,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateChildNodes",
          "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 257,
              "column": 6
            },
            "end": {
              "line": 294,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "root",
              "type": "Node",
              "description": "Root node whose `childNodes` will be parsed"
            },
            {
              "name": "templateInfo",
              "type": "!TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "!NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNestedTemplate",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2482,
              "column": 6
            },
            "end": {
              "line": 2492,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateNodeAttributes",
          "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 332,
              "column": 6
            },
            "end": {
              "line": 341,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNodeAttribute",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2430,
              "column": 6
            },
            "end": {
              "line": 2466,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            },
            {
              "name": "name",
              "type": "string",
              "description": "Attribute name"
            },
            {
              "name": "value",
              "type": "string",
              "description": "Attribute value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_contentForTemplate",
          "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 387,
              "column": 6
            },
            "end": {
              "line": 390,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template to retrieve `content` for"
            }
          ],
          "return": {
            "type": "DocumentFragment",
            "desc": "Content fragment"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "createPropertiesForAttributes",
          "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 113,
              "column": 6
            },
            "end": {
              "line": 118,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "addPropertyEffect",
          "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2124,
              "column": 6
            },
            "end": {
              "line": 2126,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createPropertyObserver",
          "description": "Creates a single-property observer for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2137,
              "column": 6
            },
            "end": {
              "line": 2139,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createMethodObserver",
          "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2153,
              "column": 6
            },
            "end": {
              "line": 2155,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createNotifyingProperty",
          "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2164,
              "column": 6
            },
            "end": {
              "line": 2166,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReadOnlyProperty",
          "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2183,
              "column": 6
            },
            "end": {
              "line": 2185,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReflectedProperty",
          "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2194,
              "column": 6
            },
            "end": {
              "line": 2196,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createComputedProperty",
          "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2211,
              "column": 6
            },
            "end": {
              "line": 2213,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "bindTemplate",
          "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2227,
              "column": 6
            },
            "end": {
              "line": 2229,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Template metadata object"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addTemplatePropertyEffect",
          "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2292,
              "column": 6
            },
            "end": {
              "line": 2298,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Template metadata to add effect to"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseBindings",
          "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2527,
              "column": 6
            },
            "end": {
              "line": 2592,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "text",
              "type": "string",
              "description": "Text to parse from attribute or textContent"
            },
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Current template metadata"
            }
          ],
          "return": {
            "type": "Array.<!BindingPart>",
            "desc": "Array of binding part metadata"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_evaluateBinding",
          "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2608,
              "column": 6
            },
            "end": {
              "line": 2625,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "inst",
              "type": "this",
              "description": "Element that should be used as scope for\n  binding dependencies"
            },
            {
              "name": "part",
              "type": "BindingPart",
              "description": "Binding part metadata"
            },
            {
              "name": "path",
              "type": "string",
              "description": "Property/path that triggered this effect"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of current property changes"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value the binding part evaluated to"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "finalize",
          "description": "Called automatically when the first element instance is created to\nensure that class finalization work has been completed.\nMay be called by users to eagerly perform class finalization work\nprior to the creation of the first element instance.\n\nClass finalization work generally includes meta-programming such as\ncreating property accessors and any property effect metadata needed for\nthe features used.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 441,
              "column": 6
            },
            "end": {
              "line": 445,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_processStyleText",
          "description": "Gather style text for the template",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 588,
              "column": 6
            },
            "end": {
              "line": 591,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "is",
              "type": "string",
              "description": "Tag name for this element"
            },
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to process"
            },
            {
              "name": "baseURI",
              "type": "string",
              "description": "Base URI to rebase CSS paths against"
            }
          ],
          "return": {
            "type": "string",
            "desc": "The combined CSS text"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_finalizeTemplate",
          "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 602,
              "column": 6
            },
            "end": {
              "line": 621,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "is",
              "type": "string",
              "description": "Tag name (or type extension name) for this element"
            },
            {
              "name": "ext",
              "type": "string=",
              "description": "For type extensions, the tag name that was extended"
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        }
      ],
      "demos": [
        {
          "url": "demo/h2-grid/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 55,
          "column": 4
        },
        "end": {
          "line": 63,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "H2Grid",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "file": "h2-grid.html",
            "start": {
              "line": 45,
              "column": 4
            },
            "end": {
              "line": 45,
              "column": 17
            }
          }
        }
      ],
      "tagname": "h2-grid"
    },
    {
      "description": "```javascript\n\n<h2-grid-row></h2-grid-row>\n```\n\n`h2-grid-row`",
      "summary": "",
      "path": "h2-grid-row.html",
      "properties": [
        {
          "name": "__serializing",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 123,
              "column": 8
            },
            "end": {
              "line": 123,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataCounter",
          "type": "number",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1152,
              "column": 8
            },
            "end": {
              "line": 1152,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataEnabled",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 127,
              "column": 8
            },
            "end": {
              "line": 127,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 129,
              "column": 8
            },
            "end": {
              "line": 129,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataInvalid",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 131,
              "column": 8
            },
            "end": {
              "line": 131,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__data",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1134,
              "column": 8
            },
            "end": {
              "line": 1134,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPending",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1136,
              "column": 8
            },
            "end": {
              "line": 1136,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataOld",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1138,
              "column": 8
            },
            "end": {
              "line": 1138,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataProto",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 139,
              "column": 8
            },
            "end": {
              "line": 139,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataHasAccessor",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 141,
              "column": 8
            },
            "end": {
              "line": 141,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataInstanceProps",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 143,
              "column": 8
            },
            "end": {
              "line": 143,
              "column": 33
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataClientsReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1116,
              "column": 8
            },
            "end": {
              "line": 1116,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPendingClients",
          "type": "Array",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1118,
              "column": 8
            },
            "end": {
              "line": 1118,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataToNotify",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1120,
              "column": 8
            },
            "end": {
              "line": 1120,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataLinkedPaths",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1122,
              "column": 8
            },
            "end": {
              "line": 1122,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHasPaths",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1124,
              "column": 8
            },
            "end": {
              "line": 1124,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataCompoundStorage",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1126,
              "column": 8
            },
            "end": {
              "line": 1126,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHost",
          "type": "Polymer_PropertyEffects",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1128,
              "column": 8
            },
            "end": {
              "line": 1128,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataTemp",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1130,
              "column": 8
            },
            "end": {
              "line": 1130,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataClientsInitialized",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1132,
              "column": 8
            },
            "end": {
              "line": 1132,
              "column": 38
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__computeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1140,
              "column": 8
            },
            "end": {
              "line": 1140,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__reflectEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1142,
              "column": 8
            },
            "end": {
              "line": 1142,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__notifyEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1144,
              "column": 8
            },
            "end": {
              "line": 1144,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__propagateEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1146,
              "column": 8
            },
            "end": {
              "line": 1146,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__observeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1148,
              "column": 8
            },
            "end": {
              "line": 1148,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__readOnly",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1150,
              "column": 8
            },
            "end": {
              "line": 1150,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__templateInfo",
          "type": "!TemplateInfo",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1154,
              "column": 8
            },
            "end": {
              "line": 1154,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_template",
          "type": "HTMLTemplateElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 519,
              "column": 8
            },
            "end": {
              "line": 519,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_importPath",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 521,
              "column": 8
            },
            "end": {
              "line": 521,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "rootPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 523,
              "column": 8
            },
            "end": {
              "line": 523,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "importPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 525,
              "column": 8
            },
            "end": {
              "line": 525,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "root",
          "type": "(StampedTemplate|HTMLElement|ShadowRoot)",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 527,
              "column": 8
            },
            "end": {
              "line": 527,
              "column": 18
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "$",
          "type": "!Object.<string, !Node>",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 529,
              "column": 8
            },
            "end": {
              "line": 529,
              "column": 15
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "subParam",
          "type": "Object",
          "description": "子页面参数",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 74,
              "column": 10
            },
            "end": {
              "line": 79,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        },
        {
          "name": "open",
          "type": "boolean",
          "description": "子页面是否默认开启",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 10
            },
            "end": {
              "line": 88,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"__defaultOpenChange\""
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "isOpen",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 89,
              "column": 10
            },
            "end": {
              "line": 92,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "subItemDoc",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 93,
              "column": 10
            },
            "end": {
              "line": 98,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        },
        {
          "name": "loadItem",
          "type": "boolean",
          "description": "当前子页面是否已经加载",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 102,
              "column": 10
            },
            "end": {
              "line": 105,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true"
        },
        {
          "name": "expandIcon",
          "type": "string",
          "description": "The icon when expanded.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 109,
              "column": 10
            },
            "end": {
              "line": 112,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"add-circle-outline\""
        },
        {
          "name": "collapseIcon",
          "type": "string",
          "description": "The icon when collapsed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 116,
              "column": 10
            },
            "end": {
              "line": 119,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"remove-circle-outline\""
        }
      ],
      "methods": [
        {
          "name": "_stampTemplate",
          "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2320,
              "column": 6
            },
            "end": {
              "line": 2345,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to stamp"
            }
          ],
          "return": {
            "type": "!StampedTemplate",
            "desc": "Cloned template content"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addMethodEventListenerToNode",
          "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 451,
              "column": 6
            },
            "end": {
              "line": 456,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to add listener on"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of method"
            },
            {
              "name": "context",
              "type": "*=",
              "description": "Context the method will be called on (defaults\n  to `node`)"
            }
          ],
          "return": {
            "type": "Function",
            "desc": "Generated handler function"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_addEventListenerToNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 465,
              "column": 6
            },
            "end": {
              "line": 467,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to add event listener to"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "Function",
              "description": "Listener function to add"
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_removeEventListenerFromNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 476,
              "column": 6
            },
            "end": {
              "line": 478,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to remove event listener from"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "Function",
              "description": "Listener function to remove"
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "attributeChangedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`attributeChangedCallback`.\n\nBy default, attributes declared in `properties` metadata are\ndeserialized using their `type` information to properties of the\nsame name.  \"Dash-cased\" attributes are deserialized to \"camelCase\"\nproperties.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 723,
              "column": 6
            },
            "end": {
              "line": 731,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of attribute."
            },
            {
              "name": "old",
              "type": "?string",
              "description": "Old value of attribute."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "Current value of attribute."
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeProperties",
          "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 543,
              "column": 6
            },
            "end": {
              "line": 577,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeProtoProperties",
          "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1184,
              "column": 6
            },
            "end": {
              "line": 1188,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the prototype"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_initializeInstanceProperties",
          "description": "Overrides `Polymer.PropertyAccessors` implementation to avoid setting\n`_setProperty`'s `shouldNotify: true`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1197,
              "column": 6
            },
            "end": {
              "line": 1206,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the instance"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_ensureAttribute",
          "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 236,
              "column": 6
            },
            "end": {
              "line": 240,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to ensure is set."
            },
            {
              "name": "value",
              "type": "string",
              "description": "of the attribute."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_attributeToProperty",
          "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 252,
              "column": 6
            },
            "end": {
              "line": 258,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to deserialize."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "of the attribute."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "type to deserialize to."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_propertyToAttribute",
          "description": "Serializes a property to its associated attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 267,
              "column": 6
            },
            "end": {
              "line": 273,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name to reflect."
            },
            {
              "name": "attribute",
              "type": "string=",
              "description": "Attribute name to reflect."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Property value to refect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_valueToNodeAttribute",
          "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 287,
              "column": 6
            },
            "end": {
              "line": 294,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Element to set attribute to."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to serialize."
            },
            {
              "name": "attribute",
              "type": "string",
              "description": "Attribute name to serialize to."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_serializeValue",
          "description": "Converts a typed JavaScript value to a string.\n\nThis method is called by Polymer when setting JS property values to\nHTML attributes.  Users may override this method on Polymer element\nprototypes to provide serialization for custom types.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 306,
              "column": 6
            },
            "end": {
              "line": 326,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "*",
              "description": "Property value to serialize."
            }
          ],
          "return": {
            "type": "(string|undefined)",
            "desc": "String serialized from the provided property value."
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_deserializeValue",
          "description": "Converts a string to a typed JavaScript value.\n\nThis method is called by Polymer when reading HTML attribute values to\nJS properties.  Users may override this method on Polymer element\nprototypes to provide deserialization for custom `type`s.  Note,\nthe `type` argument is the value of the `type` field provided in the\n`properties` configuration object for a given property, and is\nby convention the constructor for the type to deserialize.\n\nNote: The return value of `undefined` is used as a sentinel value to\nindicate the attribute should be removed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 387,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "?string",
              "description": "Attribute value to deserialize."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "Type to deserialize the string to."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Typed value deserialized from the provided string."
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_createPropertyAccessor",
          "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.  When calling on\na prototype, any overwritten values are saved in `__dataProto`,\nand it is up to the subclasser to decide how/when to set those\nproperties back into the accessor.  When calling on an instance,\nthe overwritten value is set via `_setPendingProperty`, and the\nuser should call `_invalidateProperties` or `_flushProperties`\nfor the values to take effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 411,
              "column": 6
            },
            "end": {
              "line": 431,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "readOnly",
              "type": "boolean=",
              "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_hasAccessor",
          "description": "Returns true if this library created an accessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 439,
              "column": 6
            },
            "end": {
              "line": 441,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if an accessor was created"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_setProperty",
          "description": "Overrides base implementation to ensure all accessors set `shouldNotify`\nto true, for per-property notification tracking.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1473,
              "column": 6
            },
            "end": {
              "line": 1477,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setPendingProperty",
          "description": "Overrides the `PropertyAccessors` implementation to introduce special\ndirty check logic depending on the property & value being set:\n\n1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n   Stored in `__dataTemp`, dirty checked against `__dataTemp`\n2. Object set to simple property (e.g. 'prop': {...})\n   Stored in `__dataTemp` and `__data`, dirty checked against\n   `__dataTemp` by default implementation of `_shouldPropertyChange`\n3. Primitive value set to simple property (e.g. 'prop': 42)\n   Stored in `__data`, dirty checked against `__data`\n\nThe dirty-check is important to prevent cycles due to two-way\nnotification, but paths and objects are only dirty checked against any\nprevious value set during this turn via a \"temporary cache\" that is\ncleared when the last `_propertiesChanged` exits. This is so:\na. any cached array paths (e.g. 'array.3.prop') may be invalidated\n   due to array mutations like shift/unshift/splice; this is fine\n   since path changes are dirty-checked at user entry points like `set`\nb. dirty-checking for objects only lasts one turn to allow the user\n   to mutate the object in-place and re-set it with the same identity\n   and have all sub-properties re-propagated in a subsequent turn.\n\nThe temp cache is not necessarily sufficient to prevent invalid array\npaths, since a splice can happen during the same turn (with pathological\nuser code); we could introduce a \"fixup\" for temporarily cached array\npaths if needed: https://github.com/Polymer/polymer/issues/4227",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1436,
              "column": 6
            },
            "end": {
              "line": 1465,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "True if property should fire notification\n  event (applies only for `notify: true` properties)"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property changed"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_isPropertyPending",
          "description": "Returns true if the specified property has a pending change.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 493,
              "column": 6
            },
            "end": {
              "line": 495,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if property has a pending change"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_invalidateProperties",
          "description": "Overrides `PropertyAccessor`'s default async queuing of\n`_propertiesChanged`: if `__dataReady` is false (has not yet been\nmanually flushed), the function no-ops; otherwise flushes\n`_propertiesChanged` synchronously.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1487,
              "column": 6
            },
            "end": {
              "line": 1491,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_enableProperties",
          "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 523,
              "column": 6
            },
            "end": {
              "line": 532,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_flushProperties",
          "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 543,
              "column": 6
            },
            "end": {
              "line": 551,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 186,
              "column": 6
            },
            "end": {
              "line": 191,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_propertiesChanged",
          "description": "Implements `PropertyAccessors`'s properties changed callback.\n\nRuns each class of effects for the batch of changed properties in\na specific order (compute, propagate, reflect, observe, notify).",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1626,
              "column": 6
            },
            "end": {
              "line": 1659,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "currentProps"
            },
            {
              "name": "changedProps"
            },
            {
              "name": "oldProps"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_shouldPropertyChange",
          "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` for primitive types if a\nstrict equality check fails, and returns `true` for all Object/Arrays.\nThe method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 606,
              "column": 6
            },
            "end": {
              "line": 609,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "value",
              "type": "*",
              "description": "New property value"
            },
            {
              "name": "old",
              "type": "*",
              "description": "Previous property value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Whether the property should be considered a change\n  and enqueue a `_propertiesChanged` callback"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_addPropertyEffect",
          "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1220,
              "column": 6
            },
            "end": {
              "line": 1228,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removePropertyEffect",
          "description": "Removes the given property effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1237,
              "column": 6
            },
            "end": {
              "line": 1243,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property the effect was associated with"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object to remove"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasPropertyEffect",
          "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1254,
              "column": 6
            },
            "end": {
              "line": 1257,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "type",
              "type": "string=",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReadOnlyEffect",
          "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1267,
              "column": 6
            },
            "end": {
              "line": 1269,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasNotifyEffect",
          "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1279,
              "column": 6
            },
            "end": {
              "line": 1281,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReflectEffect",
          "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1291,
              "column": 6
            },
            "end": {
              "line": 1293,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasComputedEffect",
          "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1303,
              "column": 6
            },
            "end": {
              "line": 1305,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setPendingPropertyOrPath",
          "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1337,
              "column": 6
            },
            "end": {
              "line": 1369,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(number|string)>)",
              "description": "Path to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "Set to true if this change should\n cause a property notification event dispatch"
            },
            {
              "name": "isPathNotification",
              "type": "boolean=",
              "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setUnmanagedPropertyToNode",
          "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1391,
              "column": 6
            },
            "end": {
              "line": 1399,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "The node to set a property on"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "The property to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value to set"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_enqueueClient",
          "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1501,
              "column": 6
            },
            "end": {
              "line": 1506,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "client",
              "type": "Object",
              "description": "PropertyEffects client to enqueue"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_flushClients",
          "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1514,
              "column": 6
            },
            "end": {
              "line": 1525,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__enableOrFlushClients",
          "description": "(c) the stamped dom enables.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1539,
              "column": 6
            },
            "end": {
              "line": 1552,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_readyClients",
          "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 668,
              "column": 6
            },
            "end": {
              "line": 677,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "setProperties",
          "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1579,
              "column": 6
            },
            "end": {
              "line": 1590,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
            },
            {
              "name": "setReadOnly",
              "type": "boolean=",
              "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_propagatePropertyChanges",
          "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1670,
              "column": 6
            },
            "end": {
              "line": 1680,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProps",
              "type": "Object",
              "description": "Bag of changed properties"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "linkPaths",
          "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1690,
              "column": 6
            },
            "end": {
              "line": 1695,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "to",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Target path to link."
            },
            {
              "name": "from",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Source path to link."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unlinkPaths",
          "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1706,
              "column": 6
            },
            "end": {
              "line": 1711,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Target path to unlink."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifySplices",
          "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1742,
              "column": 6
            },
            "end": {
              "line": 1746,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "splices",
              "type": "Array",
              "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "get",
          "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1767,
              "column": 6
            },
            "end": {
              "line": 1769,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "set",
          "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1791,
              "column": 6
            },
            "end": {
              "line": 1801,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set at the specified path."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "push",
          "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1817,
              "column": 6
            },
            "end": {
              "line": 1826,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to push onto array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "pop",
          "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1841,
              "column": 6
            },
            "end": {
              "line": 1850,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "splice",
          "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1869,
              "column": 6
            },
            "end": {
              "line": 1886,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "start",
              "type": "number",
              "description": "Index from which to start removing/inserting."
            },
            {
              "name": "deleteCount",
              "type": "number",
              "description": "Number of items to remove."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert into array."
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Array of removed items."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "shift",
          "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1901,
              "column": 6
            },
            "end": {
              "line": 1910,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unshift",
          "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1926,
              "column": 6
            },
            "end": {
              "line": 1934,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert info array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifyPath",
          "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1948,
              "column": 6
            },
            "end": {
              "line": 1965,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Value at the path (optional)."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReadOnlyProperty",
          "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1977,
              "column": 6
            },
            "end": {
              "line": 1984,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createPropertyObserver",
          "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1997,
              "column": 6
            },
            "end": {
              "line": 2007,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createMethodObserver",
          "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2019,
              "column": 6
            },
            "end": {
              "line": 2025,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createNotifyingProperty",
          "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2035,
              "column": 6
            },
            "end": {
              "line": 2043,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReflectedProperty",
          "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2053,
              "column": 6
            },
            "end": {
              "line": 2066,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createComputedProperty",
          "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2079,
              "column": 6
            },
            "end": {
              "line": 2085,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_bindTemplate",
          "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2255,
              "column": 6
            },
            "end": {
              "line": 2278,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            },
            {
              "name": "instanceBinding",
              "type": "boolean=",
              "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removeBoundDom",
          "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2355,
              "column": 6
            },
            "end": {
              "line": 2376,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "!StampedTemplate",
              "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "connectedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 633,
              "column": 6
            },
            "end": {
              "line": 638,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`disconnectedCallback`.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 644,
              "column": 6
            },
            "end": {
              "line": 644,
              "column": 31
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_attachDom",
          "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 691,
              "column": 6
            },
            "end": {
              "line": 707,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "StampedTemplate",
              "description": "to attach to the element."
            }
          ],
          "return": {
            "type": "ShadowRoot",
            "desc": "node to which the dom has been attached."
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "updateStyles",
          "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 750,
              "column": 6
            },
            "end": {
              "line": 754,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "properties",
              "type": "Object=",
              "description": "Bag of custom property key/values to\n  apply to this element."
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "resolveUrl",
          "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 767,
              "column": 6
            },
            "end": {
              "line": 772,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "string",
              "description": "URL to resolve."
            },
            {
              "name": "base",
              "type": "string=",
              "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
            }
          ],
          "return": {
            "type": "string",
            "desc": "Rewritten URL relative to base"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "openChangeItem",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 134,
              "column": 6
            },
            "end": {
              "line": 136,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "getIcon",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 138,
              "column": 6
            },
            "end": {
              "line": 140,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isOpen"
            }
          ]
        },
        {
          "name": "__defaultOpenChange",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 142,
              "column": 6
            },
            "end": {
              "line": 147,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "open"
            }
          ]
        },
        {
          "name": "addSubItems",
          "description": "向子页面传递参数",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 154,
              "column": 6
            },
            "end": {
              "line": 158,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "subItemDoc"
            },
            {
              "name": "subParam"
            }
          ]
        },
        {
          "name": "isEmptyObject",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 160,
              "column": 6
            },
            "end": {
              "line": 169,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ]
        },
        {
          "name": "openSubItem",
          "description": "打开子页面",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 174,
              "column": 6
            },
            "end": {
              "line": 184,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [
        {
          "name": "_parseTemplate",
          "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 197,
              "column": 6
            },
            "end": {
              "line": 208,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to parse"
            },
            {
              "name": "outerTemplateInfo",
              "type": "TemplateInfo=",
              "description": "Template metadata from the outer\n  template, for parsing nested templates"
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Parsed template metadata"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateContent",
          "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 783,
              "column": 6
            },
            "end": {
              "line": 786,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template"
            },
            {
              "name": "templateInfo"
            },
            {
              "name": "nodeInfo"
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_parseTemplateNode",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2395,
              "column": 6
            },
            "end": {
              "line": 2409,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateChildNodes",
          "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 257,
              "column": 6
            },
            "end": {
              "line": 294,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "root",
              "type": "Node",
              "description": "Root node whose `childNodes` will be parsed"
            },
            {
              "name": "templateInfo",
              "type": "!TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "!NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNestedTemplate",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2482,
              "column": 6
            },
            "end": {
              "line": 2492,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateNodeAttributes",
          "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 332,
              "column": 6
            },
            "end": {
              "line": 341,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNodeAttribute",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2430,
              "column": 6
            },
            "end": {
              "line": 2466,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            },
            {
              "name": "name",
              "type": "string",
              "description": "Attribute name"
            },
            {
              "name": "value",
              "type": "string",
              "description": "Attribute value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_contentForTemplate",
          "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 387,
              "column": 6
            },
            "end": {
              "line": 390,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template to retrieve `content` for"
            }
          ],
          "return": {
            "type": "DocumentFragment",
            "desc": "Content fragment"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "createPropertiesForAttributes",
          "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 113,
              "column": 6
            },
            "end": {
              "line": 118,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "addPropertyEffect",
          "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2124,
              "column": 6
            },
            "end": {
              "line": 2126,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createPropertyObserver",
          "description": "Creates a single-property observer for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2137,
              "column": 6
            },
            "end": {
              "line": 2139,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createMethodObserver",
          "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2153,
              "column": 6
            },
            "end": {
              "line": 2155,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createNotifyingProperty",
          "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2164,
              "column": 6
            },
            "end": {
              "line": 2166,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReadOnlyProperty",
          "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2183,
              "column": 6
            },
            "end": {
              "line": 2185,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReflectedProperty",
          "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2194,
              "column": 6
            },
            "end": {
              "line": 2196,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createComputedProperty",
          "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2211,
              "column": 6
            },
            "end": {
              "line": 2213,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "bindTemplate",
          "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2227,
              "column": 6
            },
            "end": {
              "line": 2229,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Template metadata object"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addTemplatePropertyEffect",
          "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2292,
              "column": 6
            },
            "end": {
              "line": 2298,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Template metadata to add effect to"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseBindings",
          "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2527,
              "column": 6
            },
            "end": {
              "line": 2592,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "text",
              "type": "string",
              "description": "Text to parse from attribute or textContent"
            },
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Current template metadata"
            }
          ],
          "return": {
            "type": "Array.<!BindingPart>",
            "desc": "Array of binding part metadata"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_evaluateBinding",
          "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2608,
              "column": 6
            },
            "end": {
              "line": 2625,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "inst",
              "type": "this",
              "description": "Element that should be used as scope for\n  binding dependencies"
            },
            {
              "name": "part",
              "type": "BindingPart",
              "description": "Binding part metadata"
            },
            {
              "name": "path",
              "type": "string",
              "description": "Property/path that triggered this effect"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of current property changes"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value the binding part evaluated to"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "finalize",
          "description": "Called automatically when the first element instance is created to\nensure that class finalization work has been completed.\nMay be called by users to eagerly perform class finalization work\nprior to the creation of the first element instance.\n\nClass finalization work generally includes meta-programming such as\ncreating property accessors and any property effect metadata needed for\nthe features used.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 441,
              "column": 6
            },
            "end": {
              "line": 445,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_processStyleText",
          "description": "Gather style text for the template",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 588,
              "column": 6
            },
            "end": {
              "line": 591,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "is",
              "type": "string",
              "description": "Tag name for this element"
            },
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to process"
            },
            {
              "name": "baseURI",
              "type": "string",
              "description": "Base URI to rebase CSS paths against"
            }
          ],
          "return": {
            "type": "string",
            "desc": "The combined CSS text"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_finalizeTemplate",
          "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 602,
              "column": 6
            },
            "end": {
              "line": 621,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "is",
              "type": "string",
              "description": "Tag name (or type extension name) for this element"
            },
            {
              "name": "ext",
              "type": "string=",
              "description": "For type extensions, the tag name that was extended"
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 67,
          "column": 4
        },
        "end": {
          "line": 192,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "H2GridRow",
      "attributes": [
        {
          "name": "sub-param",
          "description": "子页面参数",
          "sourceRange": {
            "start": {
              "line": 74,
              "column": 10
            },
            "end": {
              "line": 79,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "open",
          "description": "子页面是否默认开启",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 10
            },
            "end": {
              "line": 88,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "is-open",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 89,
              "column": 10
            },
            "end": {
              "line": 92,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "sub-item-doc",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 93,
              "column": 10
            },
            "end": {
              "line": 98,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "load-item",
          "description": "当前子页面是否已经加载",
          "sourceRange": {
            "start": {
              "line": 102,
              "column": 10
            },
            "end": {
              "line": 105,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "expand-icon",
          "description": "The icon when expanded.",
          "sourceRange": {
            "start": {
              "line": 109,
              "column": 10
            },
            "end": {
              "line": 112,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "collapse-icon",
          "description": "The icon when collapsed.",
          "sourceRange": {
            "start": {
              "line": 116,
              "column": 10
            },
            "end": {
              "line": 119,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "file": "h2-grid-row.html",
            "start": {
              "line": 51,
              "column": 4
            },
            "end": {
              "line": 51,
              "column": 17
            }
          }
        },
        {
          "description": "",
          "name": "subItem",
          "range": {
            "file": "h2-grid-row.html",
            "start": {
              "line": 55,
              "column": 8
            },
            "end": {
              "line": 55,
              "column": 36
            }
          }
        }
      ],
      "tagname": "h2-grid-row"
    },
    {
      "description": "`h2-form`\n\nExample:\n```html\n<h2-form title=\"demo\" action=\"/test.do\">\n  <h2-input class=\"form-input\" label=\"公司名称\" name=\"company\"></h2-input>\n  <h2-input class=\"form-input\" label=\"电话\" name=\"tel\" type=\"tel\" maxlength=\"11\"></h2-input>\n  <h2-input class=\"form-input\" label=\"地址\" name=\"address\"></h2-input>\n  <h2-input class=\"form-input\" label=\"姓名\" name=\"name\"></h2-input>\n  <h2-input class=\"form-input\" label=\"年龄\" name=\"age\" type=\"number\"></h2-input>\n  <h2-button slot=\"form-btn\" form-submit>提交</h2-button>\n</h2-form>\n```\n## Styling\n\nThe following custom properties and mixins are available for styling:\n\n|Custom property | Description | Default|\n|----------------|-------------|----------|\n|`--h2-form-title` | Mixin applied to the head title of form | {}\n|`--h2-form` | Mixin applied to form | {}\n|`--h2-form-button` | Mixin applied to submit button of the form | {}",
      "summary": "",
      "path": "h2-form.html",
      "properties": [
        {
          "name": "title",
          "type": "string",
          "description": "Head title of the form",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 78,
              "column": 10
            },
            "end": {
              "line": 80,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "method",
          "type": "string",
          "description": "Request method,GRT or POST,default POST",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 10
            },
            "end": {
              "line": 89,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"POST\""
        },
        {
          "name": "action",
          "type": "string",
          "description": "The URI of a program that processes the form information",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 10
            },
            "end": {
              "line": 96,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "enctype",
          "type": "string",
          "description": "Enctype is the MIME type of content that is used to submit the form to the server.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 103,
              "column": 10
            },
            "end": {
              "line": 106,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"application/json;charset=utf-8\""
        },
        {
          "name": "novalidate",
          "type": "boolean",
          "description": "Set to true to indicate that the form is not to be validated when submitted",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 10
            },
            "end": {
              "line": 115,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 123,
              "column": 6
            },
            "end": {
              "line": 130,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "submit",
          "description": "Summit the form to server.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 135,
              "column": 6
            },
            "end": {
              "line": 157,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_get",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 159,
              "column": 6
            },
            "end": {
              "line": 170,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "reqData"
            }
          ]
        },
        {
          "name": "_post",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 172,
              "column": 6
            },
            "end": {
              "line": 203,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "reqData"
            }
          ]
        },
        {
          "name": "_successHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 205,
              "column": 6
            },
            "end": {
              "line": 214,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "response"
            }
          ]
        },
        {
          "name": "_errorHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 216,
              "column": 6
            },
            "end": {
              "line": 221,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/h2-form/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 72,
          "column": 4
        },
        "end": {
          "line": 222,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "H2Form",
      "attributes": [
        {
          "name": "title",
          "description": "Head title of the form",
          "sourceRange": {
            "start": {
              "line": 78,
              "column": 10
            },
            "end": {
              "line": 80,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "method",
          "description": "Request method,GRT or POST,default POST",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 10
            },
            "end": {
              "line": 89,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "action",
          "description": "The URI of a program that processes the form information",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 10
            },
            "end": {
              "line": 96,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "enctype",
          "description": "Enctype is the MIME type of content that is used to submit the form to the server.",
          "sourceRange": {
            "start": {
              "line": 103,
              "column": 10
            },
            "end": {
              "line": 106,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "novalidate",
          "description": "Set to true to indicate that the form is not to be validated when submitted",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 10
            },
            "end": {
              "line": 115,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "file": "h2-form.html",
            "start": {
              "line": 59,
              "column": 6
            },
            "end": {
              "line": 59,
              "column": 36
            }
          }
        },
        {
          "description": "",
          "name": "form-btn",
          "range": {
            "file": "h2-form.html",
            "start": {
              "line": 62,
              "column": 6
            },
            "end": {
              "line": 62,
              "column": 33
            }
          }
        }
      ],
      "tagname": "h2-form"
    },
    {
      "description": "```html\n\n<h2-scroll-view>\n  <p>Alice was beginning to get very tired of sitting by her sisteron the bank, and of having nothing to do</p>\n</h2-scroll-view>\n```\n\n`h2-scroll-view`",
      "summary": "",
      "path": "h2-scroll-view.html",
      "properties": [
        {
          "name": "__serializing",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 123,
              "column": 8
            },
            "end": {
              "line": 123,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataCounter",
          "type": "number",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1152,
              "column": 8
            },
            "end": {
              "line": 1152,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataEnabled",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 127,
              "column": 8
            },
            "end": {
              "line": 127,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 129,
              "column": 8
            },
            "end": {
              "line": 129,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataInvalid",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 131,
              "column": 8
            },
            "end": {
              "line": 131,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__data",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1134,
              "column": 8
            },
            "end": {
              "line": 1134,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPending",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1136,
              "column": 8
            },
            "end": {
              "line": 1136,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataOld",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1138,
              "column": 8
            },
            "end": {
              "line": 1138,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataProto",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 139,
              "column": 8
            },
            "end": {
              "line": 139,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataHasAccessor",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 141,
              "column": 8
            },
            "end": {
              "line": 141,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataInstanceProps",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 143,
              "column": 8
            },
            "end": {
              "line": 143,
              "column": 33
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataClientsReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1116,
              "column": 8
            },
            "end": {
              "line": 1116,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPendingClients",
          "type": "Array",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1118,
              "column": 8
            },
            "end": {
              "line": 1118,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataToNotify",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1120,
              "column": 8
            },
            "end": {
              "line": 1120,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataLinkedPaths",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1122,
              "column": 8
            },
            "end": {
              "line": 1122,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHasPaths",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1124,
              "column": 8
            },
            "end": {
              "line": 1124,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataCompoundStorage",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1126,
              "column": 8
            },
            "end": {
              "line": 1126,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHost",
          "type": "Polymer_PropertyEffects",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1128,
              "column": 8
            },
            "end": {
              "line": 1128,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataTemp",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1130,
              "column": 8
            },
            "end": {
              "line": 1130,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataClientsInitialized",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1132,
              "column": 8
            },
            "end": {
              "line": 1132,
              "column": 38
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__computeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1140,
              "column": 8
            },
            "end": {
              "line": 1140,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__reflectEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1142,
              "column": 8
            },
            "end": {
              "line": 1142,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__notifyEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1144,
              "column": 8
            },
            "end": {
              "line": 1144,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__propagateEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1146,
              "column": 8
            },
            "end": {
              "line": 1146,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__observeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1148,
              "column": 8
            },
            "end": {
              "line": 1148,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__readOnly",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1150,
              "column": 8
            },
            "end": {
              "line": 1150,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__templateInfo",
          "type": "!TemplateInfo",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1154,
              "column": 8
            },
            "end": {
              "line": 1154,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_template",
          "type": "HTMLTemplateElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 519,
              "column": 8
            },
            "end": {
              "line": 519,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_importPath",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 521,
              "column": 8
            },
            "end": {
              "line": 521,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "rootPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 523,
              "column": 8
            },
            "end": {
              "line": 523,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "importPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 525,
              "column": 8
            },
            "end": {
              "line": 525,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "root",
          "type": "(StampedTemplate|HTMLElement|ShadowRoot)",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 527,
              "column": 8
            },
            "end": {
              "line": 527,
              "column": 18
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "$",
          "type": "!Object.<string, !Node>",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 529,
              "column": 8
            },
            "end": {
              "line": 529,
              "column": 15
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        }
      ],
      "methods": [
        {
          "name": "_stampTemplate",
          "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2320,
              "column": 6
            },
            "end": {
              "line": 2345,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to stamp"
            }
          ],
          "return": {
            "type": "!StampedTemplate",
            "desc": "Cloned template content"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addMethodEventListenerToNode",
          "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 451,
              "column": 6
            },
            "end": {
              "line": 456,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to add listener on"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of method"
            },
            {
              "name": "context",
              "type": "*=",
              "description": "Context the method will be called on (defaults\n  to `node`)"
            }
          ],
          "return": {
            "type": "Function",
            "desc": "Generated handler function"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_addEventListenerToNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 465,
              "column": 6
            },
            "end": {
              "line": 467,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to add event listener to"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "Function",
              "description": "Listener function to add"
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_removeEventListenerFromNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 476,
              "column": 6
            },
            "end": {
              "line": 478,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to remove event listener from"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "Function",
              "description": "Listener function to remove"
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "attributeChangedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`attributeChangedCallback`.\n\nBy default, attributes declared in `properties` metadata are\ndeserialized using their `type` information to properties of the\nsame name.  \"Dash-cased\" attributes are deserialized to \"camelCase\"\nproperties.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 723,
              "column": 6
            },
            "end": {
              "line": 731,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of attribute."
            },
            {
              "name": "old",
              "type": "?string",
              "description": "Old value of attribute."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "Current value of attribute."
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeProperties",
          "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 543,
              "column": 6
            },
            "end": {
              "line": 577,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeProtoProperties",
          "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1184,
              "column": 6
            },
            "end": {
              "line": 1188,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the prototype"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_initializeInstanceProperties",
          "description": "Overrides `Polymer.PropertyAccessors` implementation to avoid setting\n`_setProperty`'s `shouldNotify: true`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1197,
              "column": 6
            },
            "end": {
              "line": 1206,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the instance"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_ensureAttribute",
          "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 236,
              "column": 6
            },
            "end": {
              "line": 240,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to ensure is set."
            },
            {
              "name": "value",
              "type": "string",
              "description": "of the attribute."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_attributeToProperty",
          "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 252,
              "column": 6
            },
            "end": {
              "line": 258,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to deserialize."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "of the attribute."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "type to deserialize to."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_propertyToAttribute",
          "description": "Serializes a property to its associated attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 267,
              "column": 6
            },
            "end": {
              "line": 273,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name to reflect."
            },
            {
              "name": "attribute",
              "type": "string=",
              "description": "Attribute name to reflect."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Property value to refect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_valueToNodeAttribute",
          "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 287,
              "column": 6
            },
            "end": {
              "line": 294,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Element to set attribute to."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to serialize."
            },
            {
              "name": "attribute",
              "type": "string",
              "description": "Attribute name to serialize to."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_serializeValue",
          "description": "Converts a typed JavaScript value to a string.\n\nThis method is called by Polymer when setting JS property values to\nHTML attributes.  Users may override this method on Polymer element\nprototypes to provide serialization for custom types.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 306,
              "column": 6
            },
            "end": {
              "line": 326,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "*",
              "description": "Property value to serialize."
            }
          ],
          "return": {
            "type": "(string|undefined)",
            "desc": "String serialized from the provided property value."
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_deserializeValue",
          "description": "Converts a string to a typed JavaScript value.\n\nThis method is called by Polymer when reading HTML attribute values to\nJS properties.  Users may override this method on Polymer element\nprototypes to provide deserialization for custom `type`s.  Note,\nthe `type` argument is the value of the `type` field provided in the\n`properties` configuration object for a given property, and is\nby convention the constructor for the type to deserialize.\n\nNote: The return value of `undefined` is used as a sentinel value to\nindicate the attribute should be removed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 387,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "?string",
              "description": "Attribute value to deserialize."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "Type to deserialize the string to."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Typed value deserialized from the provided string."
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_createPropertyAccessor",
          "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.  When calling on\na prototype, any overwritten values are saved in `__dataProto`,\nand it is up to the subclasser to decide how/when to set those\nproperties back into the accessor.  When calling on an instance,\nthe overwritten value is set via `_setPendingProperty`, and the\nuser should call `_invalidateProperties` or `_flushProperties`\nfor the values to take effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 411,
              "column": 6
            },
            "end": {
              "line": 431,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "readOnly",
              "type": "boolean=",
              "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_hasAccessor",
          "description": "Returns true if this library created an accessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 439,
              "column": 6
            },
            "end": {
              "line": 441,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if an accessor was created"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_setProperty",
          "description": "Overrides base implementation to ensure all accessors set `shouldNotify`\nto true, for per-property notification tracking.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1473,
              "column": 6
            },
            "end": {
              "line": 1477,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setPendingProperty",
          "description": "Overrides the `PropertyAccessors` implementation to introduce special\ndirty check logic depending on the property & value being set:\n\n1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n   Stored in `__dataTemp`, dirty checked against `__dataTemp`\n2. Object set to simple property (e.g. 'prop': {...})\n   Stored in `__dataTemp` and `__data`, dirty checked against\n   `__dataTemp` by default implementation of `_shouldPropertyChange`\n3. Primitive value set to simple property (e.g. 'prop': 42)\n   Stored in `__data`, dirty checked against `__data`\n\nThe dirty-check is important to prevent cycles due to two-way\nnotification, but paths and objects are only dirty checked against any\nprevious value set during this turn via a \"temporary cache\" that is\ncleared when the last `_propertiesChanged` exits. This is so:\na. any cached array paths (e.g. 'array.3.prop') may be invalidated\n   due to array mutations like shift/unshift/splice; this is fine\n   since path changes are dirty-checked at user entry points like `set`\nb. dirty-checking for objects only lasts one turn to allow the user\n   to mutate the object in-place and re-set it with the same identity\n   and have all sub-properties re-propagated in a subsequent turn.\n\nThe temp cache is not necessarily sufficient to prevent invalid array\npaths, since a splice can happen during the same turn (with pathological\nuser code); we could introduce a \"fixup\" for temporarily cached array\npaths if needed: https://github.com/Polymer/polymer/issues/4227",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1436,
              "column": 6
            },
            "end": {
              "line": 1465,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "True if property should fire notification\n  event (applies only for `notify: true` properties)"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property changed"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_isPropertyPending",
          "description": "Returns true if the specified property has a pending change.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 493,
              "column": 6
            },
            "end": {
              "line": 495,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if property has a pending change"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_invalidateProperties",
          "description": "Overrides `PropertyAccessor`'s default async queuing of\n`_propertiesChanged`: if `__dataReady` is false (has not yet been\nmanually flushed), the function no-ops; otherwise flushes\n`_propertiesChanged` synchronously.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1487,
              "column": 6
            },
            "end": {
              "line": 1491,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_enableProperties",
          "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 523,
              "column": 6
            },
            "end": {
              "line": 532,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_flushProperties",
          "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 543,
              "column": 6
            },
            "end": {
              "line": 551,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "ready",
          "description": "Stamps the element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 651,
              "column": 6
            },
            "end": {
              "line": 657,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_propertiesChanged",
          "description": "Implements `PropertyAccessors`'s properties changed callback.\n\nRuns each class of effects for the batch of changed properties in\na specific order (compute, propagate, reflect, observe, notify).",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1626,
              "column": 6
            },
            "end": {
              "line": 1659,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "currentProps"
            },
            {
              "name": "changedProps"
            },
            {
              "name": "oldProps"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_shouldPropertyChange",
          "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` for primitive types if a\nstrict equality check fails, and returns `true` for all Object/Arrays.\nThe method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 606,
              "column": 6
            },
            "end": {
              "line": 609,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "value",
              "type": "*",
              "description": "New property value"
            },
            {
              "name": "old",
              "type": "*",
              "description": "Previous property value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Whether the property should be considered a change\n  and enqueue a `_propertiesChanged` callback"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_addPropertyEffect",
          "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1220,
              "column": 6
            },
            "end": {
              "line": 1228,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removePropertyEffect",
          "description": "Removes the given property effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1237,
              "column": 6
            },
            "end": {
              "line": 1243,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property the effect was associated with"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object to remove"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasPropertyEffect",
          "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1254,
              "column": 6
            },
            "end": {
              "line": 1257,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "type",
              "type": "string=",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReadOnlyEffect",
          "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1267,
              "column": 6
            },
            "end": {
              "line": 1269,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasNotifyEffect",
          "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1279,
              "column": 6
            },
            "end": {
              "line": 1281,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReflectEffect",
          "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1291,
              "column": 6
            },
            "end": {
              "line": 1293,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasComputedEffect",
          "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1303,
              "column": 6
            },
            "end": {
              "line": 1305,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setPendingPropertyOrPath",
          "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1337,
              "column": 6
            },
            "end": {
              "line": 1369,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(number|string)>)",
              "description": "Path to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "Set to true if this change should\n cause a property notification event dispatch"
            },
            {
              "name": "isPathNotification",
              "type": "boolean=",
              "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setUnmanagedPropertyToNode",
          "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1391,
              "column": 6
            },
            "end": {
              "line": 1399,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "The node to set a property on"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "The property to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value to set"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_enqueueClient",
          "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1501,
              "column": 6
            },
            "end": {
              "line": 1506,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "client",
              "type": "Object",
              "description": "PropertyEffects client to enqueue"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_flushClients",
          "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1514,
              "column": 6
            },
            "end": {
              "line": 1525,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__enableOrFlushClients",
          "description": "(c) the stamped dom enables.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1539,
              "column": 6
            },
            "end": {
              "line": 1552,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_readyClients",
          "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 668,
              "column": 6
            },
            "end": {
              "line": 677,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "setProperties",
          "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1579,
              "column": 6
            },
            "end": {
              "line": 1590,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
            },
            {
              "name": "setReadOnly",
              "type": "boolean=",
              "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_propagatePropertyChanges",
          "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1670,
              "column": 6
            },
            "end": {
              "line": 1680,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProps",
              "type": "Object",
              "description": "Bag of changed properties"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "linkPaths",
          "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1690,
              "column": 6
            },
            "end": {
              "line": 1695,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "to",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Target path to link."
            },
            {
              "name": "from",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Source path to link."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unlinkPaths",
          "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1706,
              "column": 6
            },
            "end": {
              "line": 1711,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Target path to unlink."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifySplices",
          "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1742,
              "column": 6
            },
            "end": {
              "line": 1746,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "splices",
              "type": "Array",
              "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "get",
          "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1767,
              "column": 6
            },
            "end": {
              "line": 1769,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "set",
          "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1791,
              "column": 6
            },
            "end": {
              "line": 1801,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set at the specified path."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "push",
          "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1817,
              "column": 6
            },
            "end": {
              "line": 1826,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to push onto array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "pop",
          "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1841,
              "column": 6
            },
            "end": {
              "line": 1850,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "splice",
          "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1869,
              "column": 6
            },
            "end": {
              "line": 1886,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "start",
              "type": "number",
              "description": "Index from which to start removing/inserting."
            },
            {
              "name": "deleteCount",
              "type": "number",
              "description": "Number of items to remove."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert into array."
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Array of removed items."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "shift",
          "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1901,
              "column": 6
            },
            "end": {
              "line": 1910,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unshift",
          "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1926,
              "column": 6
            },
            "end": {
              "line": 1934,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert info array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifyPath",
          "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1948,
              "column": 6
            },
            "end": {
              "line": 1965,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Value at the path (optional)."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReadOnlyProperty",
          "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1977,
              "column": 6
            },
            "end": {
              "line": 1984,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createPropertyObserver",
          "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1997,
              "column": 6
            },
            "end": {
              "line": 2007,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createMethodObserver",
          "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2019,
              "column": 6
            },
            "end": {
              "line": 2025,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createNotifyingProperty",
          "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2035,
              "column": 6
            },
            "end": {
              "line": 2043,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReflectedProperty",
          "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2053,
              "column": 6
            },
            "end": {
              "line": 2066,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createComputedProperty",
          "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2079,
              "column": 6
            },
            "end": {
              "line": 2085,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_bindTemplate",
          "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2255,
              "column": 6
            },
            "end": {
              "line": 2278,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            },
            {
              "name": "instanceBinding",
              "type": "boolean=",
              "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removeBoundDom",
          "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2355,
              "column": 6
            },
            "end": {
              "line": 2376,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "!StampedTemplate",
              "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "connectedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 633,
              "column": 6
            },
            "end": {
              "line": 638,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`disconnectedCallback`.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 644,
              "column": 6
            },
            "end": {
              "line": 644,
              "column": 31
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_attachDom",
          "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 691,
              "column": 6
            },
            "end": {
              "line": 707,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "StampedTemplate",
              "description": "to attach to the element."
            }
          ],
          "return": {
            "type": "ShadowRoot",
            "desc": "node to which the dom has been attached."
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "updateStyles",
          "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 750,
              "column": 6
            },
            "end": {
              "line": 754,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "properties",
              "type": "Object=",
              "description": "Bag of custom property key/values to\n  apply to this element."
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "resolveUrl",
          "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 767,
              "column": 6
            },
            "end": {
              "line": 772,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "string",
              "description": "URL to resolve."
            },
            {
              "name": "base",
              "type": "string=",
              "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
            }
          ],
          "return": {
            "type": "string",
            "desc": "Rewritten URL relative to base"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        }
      ],
      "staticMethods": [
        {
          "name": "_parseTemplate",
          "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 197,
              "column": 6
            },
            "end": {
              "line": 208,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to parse"
            },
            {
              "name": "outerTemplateInfo",
              "type": "TemplateInfo=",
              "description": "Template metadata from the outer\n  template, for parsing nested templates"
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Parsed template metadata"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateContent",
          "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 783,
              "column": 6
            },
            "end": {
              "line": 786,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template"
            },
            {
              "name": "templateInfo"
            },
            {
              "name": "nodeInfo"
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_parseTemplateNode",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2395,
              "column": 6
            },
            "end": {
              "line": 2409,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateChildNodes",
          "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 257,
              "column": 6
            },
            "end": {
              "line": 294,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "root",
              "type": "Node",
              "description": "Root node whose `childNodes` will be parsed"
            },
            {
              "name": "templateInfo",
              "type": "!TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "!NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNestedTemplate",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2482,
              "column": 6
            },
            "end": {
              "line": 2492,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateNodeAttributes",
          "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 332,
              "column": 6
            },
            "end": {
              "line": 341,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNodeAttribute",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2430,
              "column": 6
            },
            "end": {
              "line": 2466,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            },
            {
              "name": "name",
              "type": "string",
              "description": "Attribute name"
            },
            {
              "name": "value",
              "type": "string",
              "description": "Attribute value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_contentForTemplate",
          "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 387,
              "column": 6
            },
            "end": {
              "line": 390,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template to retrieve `content` for"
            }
          ],
          "return": {
            "type": "DocumentFragment",
            "desc": "Content fragment"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "createPropertiesForAttributes",
          "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 113,
              "column": 6
            },
            "end": {
              "line": 118,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "addPropertyEffect",
          "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2124,
              "column": 6
            },
            "end": {
              "line": 2126,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createPropertyObserver",
          "description": "Creates a single-property observer for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2137,
              "column": 6
            },
            "end": {
              "line": 2139,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createMethodObserver",
          "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2153,
              "column": 6
            },
            "end": {
              "line": 2155,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createNotifyingProperty",
          "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2164,
              "column": 6
            },
            "end": {
              "line": 2166,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReadOnlyProperty",
          "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2183,
              "column": 6
            },
            "end": {
              "line": 2185,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReflectedProperty",
          "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2194,
              "column": 6
            },
            "end": {
              "line": 2196,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createComputedProperty",
          "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2211,
              "column": 6
            },
            "end": {
              "line": 2213,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "bindTemplate",
          "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2227,
              "column": 6
            },
            "end": {
              "line": 2229,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Template metadata object"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addTemplatePropertyEffect",
          "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2292,
              "column": 6
            },
            "end": {
              "line": 2298,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Template metadata to add effect to"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseBindings",
          "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2527,
              "column": 6
            },
            "end": {
              "line": 2592,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "text",
              "type": "string",
              "description": "Text to parse from attribute or textContent"
            },
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Current template metadata"
            }
          ],
          "return": {
            "type": "Array.<!BindingPart>",
            "desc": "Array of binding part metadata"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_evaluateBinding",
          "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2608,
              "column": 6
            },
            "end": {
              "line": 2625,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "inst",
              "type": "this",
              "description": "Element that should be used as scope for\n  binding dependencies"
            },
            {
              "name": "part",
              "type": "BindingPart",
              "description": "Binding part metadata"
            },
            {
              "name": "path",
              "type": "string",
              "description": "Property/path that triggered this effect"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of current property changes"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value the binding part evaluated to"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "finalize",
          "description": "Called automatically when the first element instance is created to\nensure that class finalization work has been completed.\nMay be called by users to eagerly perform class finalization work\nprior to the creation of the first element instance.\n\nClass finalization work generally includes meta-programming such as\ncreating property accessors and any property effect metadata needed for\nthe features used.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 441,
              "column": 6
            },
            "end": {
              "line": 445,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_processStyleText",
          "description": "Gather style text for the template",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 588,
              "column": 6
            },
            "end": {
              "line": 591,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "is",
              "type": "string",
              "description": "Tag name for this element"
            },
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to process"
            },
            {
              "name": "baseURI",
              "type": "string",
              "description": "Base URI to rebase CSS paths against"
            }
          ],
          "return": {
            "type": "string",
            "desc": "The combined CSS text"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_finalizeTemplate",
          "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 602,
              "column": 6
            },
            "end": {
              "line": 621,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "is",
              "type": "string",
              "description": "Tag name (or type extension name) for this element"
            },
            {
              "name": "ext",
              "type": "string=",
              "description": "For type extensions, the tag name that was extended"
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        }
      ],
      "demos": [
        {
          "url": "demo/h2-scroll-view/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 43,
          "column": 4
        },
        "end": {
          "line": 51,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "H2ScrollView",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "file": "h2-scroll-view.html",
            "start": {
              "line": 31,
              "column": 8
            },
            "end": {
              "line": 31,
              "column": 21
            }
          }
        }
      ],
      "tagname": "h2-scroll-view"
    },
    {
      "description": "```html\n\n<h2-mask label=\"输入框\" class=\"mask\">\n  <h2-input placeholder=\"测试输入\" value=\"Test\"></h2-input>\n</h2-mask>\n```\n\n`h2-mask`",
      "summary": "",
      "path": "h2-mask.html",
      "properties": [
        {
          "name": "value",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 195,
              "column": 10
            },
            "end": {
              "line": 198,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "_valueObj",
          "type": "Object",
          "description": "当前的数据",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 202,
              "column": 10
            },
            "end": {
              "line": 204,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_lastValueObj",
          "type": "Object",
          "description": "最近一次保存的数据",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 208,
              "column": 10
            },
            "end": {
              "line": 210,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_viewValue",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 212,
              "column": 10
            },
            "end": {
              "line": 214,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "label",
          "type": "string",
          "description": "标签",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 219,
              "column": 10
            },
            "end": {
              "line": 221,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "placeholder",
          "type": "string",
          "description": "占位符",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 225,
              "column": 10
            },
            "end": {
              "line": 227,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "required",
          "type": "boolean",
          "description": "Set to true, if the selection is required.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 233,
              "column": 10
            },
            "end": {
              "line": 236,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "attrForDisplay",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 237,
              "column": 10
            },
            "end": {
              "line": 240,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"label\""
        },
        {
          "name": "_slotNode",
          "type": "Object",
          "description": "slot插槽中的组件",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 244,
              "column": 10
            },
            "end": {
              "line": 246,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 258,
              "column": 6
            },
            "end": {
              "line": 309,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_displayEditField",
          "description": "显示编辑区域",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 315,
              "column": 6
            },
            "end": {
              "line": 321,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "display"
            }
          ]
        },
        {
          "name": "__initValueOfSlottedElement",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 323,
              "column": 6
            },
            "end": {
              "line": 329,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "__getValueOfSlottedElement",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 331,
              "column": 6
            },
            "end": {
              "line": 339,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "__resetValueOfSlottedElement",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 341,
              "column": 6
            },
            "end": {
              "line": 344,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "__updateViewer",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 346,
              "column": 6
            },
            "end": {
              "line": 354,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_submit",
          "description": "提交操作",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 360,
              "column": 6
            },
            "end": {
              "line": 365,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_cancel",
          "description": "取消操作",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 371,
              "column": 6
            },
            "end": {
              "line": 376,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/h2-mask/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 192,
          "column": 4
        },
        "end": {
          "line": 377,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "H2Mask",
      "attributes": [
        {
          "name": "value",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 195,
              "column": 10
            },
            "end": {
              "line": 198,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "label",
          "description": "标签",
          "sourceRange": {
            "start": {
              "line": 219,
              "column": 10
            },
            "end": {
              "line": 221,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "placeholder",
          "description": "占位符",
          "sourceRange": {
            "start": {
              "line": 225,
              "column": 10
            },
            "end": {
              "line": 227,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "required",
          "description": "Set to true, if the selection is required.",
          "sourceRange": {
            "start": {
              "line": 233,
              "column": 10
            },
            "end": {
              "line": 236,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "attr-for-display",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 237,
              "column": 10
            },
            "end": {
              "line": 240,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "file": "h2-mask.html",
            "start": {
              "line": 162,
              "column": 8
            },
            "end": {
              "line": 164,
              "column": 15
            }
          }
        }
      ],
      "tagname": "h2-mask"
    },
    {
      "description": "```javascript\n\n<h2-grid-header></h2-grid-header>\n```\n\n`h2-grid-header`",
      "summary": "",
      "path": "h2-grid-header.html",
      "properties": [
        {
          "name": "__serializing",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 123,
              "column": 8
            },
            "end": {
              "line": 123,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataCounter",
          "type": "number",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1152,
              "column": 8
            },
            "end": {
              "line": 1152,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataEnabled",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 127,
              "column": 8
            },
            "end": {
              "line": 127,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 129,
              "column": 8
            },
            "end": {
              "line": 129,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataInvalid",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 131,
              "column": 8
            },
            "end": {
              "line": 131,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__data",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1134,
              "column": 8
            },
            "end": {
              "line": 1134,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPending",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1136,
              "column": 8
            },
            "end": {
              "line": 1136,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataOld",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1138,
              "column": 8
            },
            "end": {
              "line": 1138,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataProto",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 139,
              "column": 8
            },
            "end": {
              "line": 139,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataHasAccessor",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 141,
              "column": 8
            },
            "end": {
              "line": 141,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataInstanceProps",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 143,
              "column": 8
            },
            "end": {
              "line": 143,
              "column": 33
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataClientsReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1116,
              "column": 8
            },
            "end": {
              "line": 1116,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPendingClients",
          "type": "Array",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1118,
              "column": 8
            },
            "end": {
              "line": 1118,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataToNotify",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1120,
              "column": 8
            },
            "end": {
              "line": 1120,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataLinkedPaths",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1122,
              "column": 8
            },
            "end": {
              "line": 1122,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHasPaths",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1124,
              "column": 8
            },
            "end": {
              "line": 1124,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataCompoundStorage",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1126,
              "column": 8
            },
            "end": {
              "line": 1126,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHost",
          "type": "Polymer_PropertyEffects",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1128,
              "column": 8
            },
            "end": {
              "line": 1128,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataTemp",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1130,
              "column": 8
            },
            "end": {
              "line": 1130,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataClientsInitialized",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1132,
              "column": 8
            },
            "end": {
              "line": 1132,
              "column": 38
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__computeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1140,
              "column": 8
            },
            "end": {
              "line": 1140,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__reflectEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1142,
              "column": 8
            },
            "end": {
              "line": 1142,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__notifyEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1144,
              "column": 8
            },
            "end": {
              "line": 1144,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__propagateEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1146,
              "column": 8
            },
            "end": {
              "line": 1146,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__observeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1148,
              "column": 8
            },
            "end": {
              "line": 1148,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__readOnly",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1150,
              "column": 8
            },
            "end": {
              "line": 1150,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__templateInfo",
          "type": "!TemplateInfo",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1154,
              "column": 8
            },
            "end": {
              "line": 1154,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_template",
          "type": "HTMLTemplateElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 519,
              "column": 8
            },
            "end": {
              "line": 519,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_importPath",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 521,
              "column": 8
            },
            "end": {
              "line": 521,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "rootPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 523,
              "column": 8
            },
            "end": {
              "line": 523,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "importPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 525,
              "column": 8
            },
            "end": {
              "line": 525,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "root",
          "type": "(StampedTemplate|HTMLElement|ShadowRoot)",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 527,
              "column": 8
            },
            "end": {
              "line": 527,
              "column": 18
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "$",
          "type": "!Object.<string, !Node>",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 529,
              "column": 8
            },
            "end": {
              "line": 529,
              "column": 15
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        }
      ],
      "methods": [
        {
          "name": "_stampTemplate",
          "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2320,
              "column": 6
            },
            "end": {
              "line": 2345,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to stamp"
            }
          ],
          "return": {
            "type": "!StampedTemplate",
            "desc": "Cloned template content"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addMethodEventListenerToNode",
          "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 451,
              "column": 6
            },
            "end": {
              "line": 456,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to add listener on"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of method"
            },
            {
              "name": "context",
              "type": "*=",
              "description": "Context the method will be called on (defaults\n  to `node`)"
            }
          ],
          "return": {
            "type": "Function",
            "desc": "Generated handler function"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_addEventListenerToNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 465,
              "column": 6
            },
            "end": {
              "line": 467,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to add event listener to"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "Function",
              "description": "Listener function to add"
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_removeEventListenerFromNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 476,
              "column": 6
            },
            "end": {
              "line": 478,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to remove event listener from"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "Function",
              "description": "Listener function to remove"
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "attributeChangedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`attributeChangedCallback`.\n\nBy default, attributes declared in `properties` metadata are\ndeserialized using their `type` information to properties of the\nsame name.  \"Dash-cased\" attributes are deserialized to \"camelCase\"\nproperties.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 723,
              "column": 6
            },
            "end": {
              "line": 731,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of attribute."
            },
            {
              "name": "old",
              "type": "?string",
              "description": "Old value of attribute."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "Current value of attribute."
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeProperties",
          "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 543,
              "column": 6
            },
            "end": {
              "line": 577,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeProtoProperties",
          "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1184,
              "column": 6
            },
            "end": {
              "line": 1188,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the prototype"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_initializeInstanceProperties",
          "description": "Overrides `Polymer.PropertyAccessors` implementation to avoid setting\n`_setProperty`'s `shouldNotify: true`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1197,
              "column": 6
            },
            "end": {
              "line": 1206,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the instance"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_ensureAttribute",
          "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 236,
              "column": 6
            },
            "end": {
              "line": 240,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to ensure is set."
            },
            {
              "name": "value",
              "type": "string",
              "description": "of the attribute."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_attributeToProperty",
          "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 252,
              "column": 6
            },
            "end": {
              "line": 258,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to deserialize."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "of the attribute."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "type to deserialize to."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_propertyToAttribute",
          "description": "Serializes a property to its associated attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 267,
              "column": 6
            },
            "end": {
              "line": 273,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name to reflect."
            },
            {
              "name": "attribute",
              "type": "string=",
              "description": "Attribute name to reflect."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Property value to refect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_valueToNodeAttribute",
          "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 287,
              "column": 6
            },
            "end": {
              "line": 294,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Element to set attribute to."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to serialize."
            },
            {
              "name": "attribute",
              "type": "string",
              "description": "Attribute name to serialize to."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_serializeValue",
          "description": "Converts a typed JavaScript value to a string.\n\nThis method is called by Polymer when setting JS property values to\nHTML attributes.  Users may override this method on Polymer element\nprototypes to provide serialization for custom types.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 306,
              "column": 6
            },
            "end": {
              "line": 326,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "*",
              "description": "Property value to serialize."
            }
          ],
          "return": {
            "type": "(string|undefined)",
            "desc": "String serialized from the provided property value."
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_deserializeValue",
          "description": "Converts a string to a typed JavaScript value.\n\nThis method is called by Polymer when reading HTML attribute values to\nJS properties.  Users may override this method on Polymer element\nprototypes to provide deserialization for custom `type`s.  Note,\nthe `type` argument is the value of the `type` field provided in the\n`properties` configuration object for a given property, and is\nby convention the constructor for the type to deserialize.\n\nNote: The return value of `undefined` is used as a sentinel value to\nindicate the attribute should be removed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 387,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "?string",
              "description": "Attribute value to deserialize."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "Type to deserialize the string to."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Typed value deserialized from the provided string."
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_createPropertyAccessor",
          "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.  When calling on\na prototype, any overwritten values are saved in `__dataProto`,\nand it is up to the subclasser to decide how/when to set those\nproperties back into the accessor.  When calling on an instance,\nthe overwritten value is set via `_setPendingProperty`, and the\nuser should call `_invalidateProperties` or `_flushProperties`\nfor the values to take effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 411,
              "column": 6
            },
            "end": {
              "line": 431,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "readOnly",
              "type": "boolean=",
              "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_hasAccessor",
          "description": "Returns true if this library created an accessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 439,
              "column": 6
            },
            "end": {
              "line": 441,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if an accessor was created"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_setProperty",
          "description": "Overrides base implementation to ensure all accessors set `shouldNotify`\nto true, for per-property notification tracking.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1473,
              "column": 6
            },
            "end": {
              "line": 1477,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setPendingProperty",
          "description": "Overrides the `PropertyAccessors` implementation to introduce special\ndirty check logic depending on the property & value being set:\n\n1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n   Stored in `__dataTemp`, dirty checked against `__dataTemp`\n2. Object set to simple property (e.g. 'prop': {...})\n   Stored in `__dataTemp` and `__data`, dirty checked against\n   `__dataTemp` by default implementation of `_shouldPropertyChange`\n3. Primitive value set to simple property (e.g. 'prop': 42)\n   Stored in `__data`, dirty checked against `__data`\n\nThe dirty-check is important to prevent cycles due to two-way\nnotification, but paths and objects are only dirty checked against any\nprevious value set during this turn via a \"temporary cache\" that is\ncleared when the last `_propertiesChanged` exits. This is so:\na. any cached array paths (e.g. 'array.3.prop') may be invalidated\n   due to array mutations like shift/unshift/splice; this is fine\n   since path changes are dirty-checked at user entry points like `set`\nb. dirty-checking for objects only lasts one turn to allow the user\n   to mutate the object in-place and re-set it with the same identity\n   and have all sub-properties re-propagated in a subsequent turn.\n\nThe temp cache is not necessarily sufficient to prevent invalid array\npaths, since a splice can happen during the same turn (with pathological\nuser code); we could introduce a \"fixup\" for temporarily cached array\npaths if needed: https://github.com/Polymer/polymer/issues/4227",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1436,
              "column": 6
            },
            "end": {
              "line": 1465,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "True if property should fire notification\n  event (applies only for `notify: true` properties)"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property changed"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_isPropertyPending",
          "description": "Returns true if the specified property has a pending change.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 493,
              "column": 6
            },
            "end": {
              "line": 495,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if property has a pending change"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_invalidateProperties",
          "description": "Overrides `PropertyAccessor`'s default async queuing of\n`_propertiesChanged`: if `__dataReady` is false (has not yet been\nmanually flushed), the function no-ops; otherwise flushes\n`_propertiesChanged` synchronously.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1487,
              "column": 6
            },
            "end": {
              "line": 1491,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_enableProperties",
          "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 523,
              "column": 6
            },
            "end": {
              "line": 532,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_flushProperties",
          "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 543,
              "column": 6
            },
            "end": {
              "line": 551,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "ready",
          "description": "Stamps the element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 651,
              "column": 6
            },
            "end": {
              "line": 657,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_propertiesChanged",
          "description": "Implements `PropertyAccessors`'s properties changed callback.\n\nRuns each class of effects for the batch of changed properties in\na specific order (compute, propagate, reflect, observe, notify).",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1626,
              "column": 6
            },
            "end": {
              "line": 1659,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "currentProps"
            },
            {
              "name": "changedProps"
            },
            {
              "name": "oldProps"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_shouldPropertyChange",
          "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` for primitive types if a\nstrict equality check fails, and returns `true` for all Object/Arrays.\nThe method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 606,
              "column": 6
            },
            "end": {
              "line": 609,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "value",
              "type": "*",
              "description": "New property value"
            },
            {
              "name": "old",
              "type": "*",
              "description": "Previous property value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Whether the property should be considered a change\n  and enqueue a `_propertiesChanged` callback"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_addPropertyEffect",
          "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1220,
              "column": 6
            },
            "end": {
              "line": 1228,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removePropertyEffect",
          "description": "Removes the given property effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1237,
              "column": 6
            },
            "end": {
              "line": 1243,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property the effect was associated with"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object to remove"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasPropertyEffect",
          "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1254,
              "column": 6
            },
            "end": {
              "line": 1257,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "type",
              "type": "string=",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReadOnlyEffect",
          "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1267,
              "column": 6
            },
            "end": {
              "line": 1269,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasNotifyEffect",
          "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1279,
              "column": 6
            },
            "end": {
              "line": 1281,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReflectEffect",
          "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1291,
              "column": 6
            },
            "end": {
              "line": 1293,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasComputedEffect",
          "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1303,
              "column": 6
            },
            "end": {
              "line": 1305,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setPendingPropertyOrPath",
          "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1337,
              "column": 6
            },
            "end": {
              "line": 1369,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(number|string)>)",
              "description": "Path to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "Set to true if this change should\n cause a property notification event dispatch"
            },
            {
              "name": "isPathNotification",
              "type": "boolean=",
              "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setUnmanagedPropertyToNode",
          "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1391,
              "column": 6
            },
            "end": {
              "line": 1399,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "The node to set a property on"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "The property to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value to set"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_enqueueClient",
          "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1501,
              "column": 6
            },
            "end": {
              "line": 1506,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "client",
              "type": "Object",
              "description": "PropertyEffects client to enqueue"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_flushClients",
          "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1514,
              "column": 6
            },
            "end": {
              "line": 1525,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__enableOrFlushClients",
          "description": "(c) the stamped dom enables.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1539,
              "column": 6
            },
            "end": {
              "line": 1552,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_readyClients",
          "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 668,
              "column": 6
            },
            "end": {
              "line": 677,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "setProperties",
          "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1579,
              "column": 6
            },
            "end": {
              "line": 1590,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
            },
            {
              "name": "setReadOnly",
              "type": "boolean=",
              "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_propagatePropertyChanges",
          "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1670,
              "column": 6
            },
            "end": {
              "line": 1680,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProps",
              "type": "Object",
              "description": "Bag of changed properties"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "linkPaths",
          "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1690,
              "column": 6
            },
            "end": {
              "line": 1695,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "to",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Target path to link."
            },
            {
              "name": "from",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Source path to link."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unlinkPaths",
          "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1706,
              "column": 6
            },
            "end": {
              "line": 1711,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Target path to unlink."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifySplices",
          "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1742,
              "column": 6
            },
            "end": {
              "line": 1746,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "splices",
              "type": "Array",
              "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "get",
          "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1767,
              "column": 6
            },
            "end": {
              "line": 1769,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "set",
          "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1791,
              "column": 6
            },
            "end": {
              "line": 1801,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set at the specified path."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "push",
          "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1817,
              "column": 6
            },
            "end": {
              "line": 1826,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to push onto array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "pop",
          "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1841,
              "column": 6
            },
            "end": {
              "line": 1850,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "splice",
          "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1869,
              "column": 6
            },
            "end": {
              "line": 1886,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "start",
              "type": "number",
              "description": "Index from which to start removing/inserting."
            },
            {
              "name": "deleteCount",
              "type": "number",
              "description": "Number of items to remove."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert into array."
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Array of removed items."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "shift",
          "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1901,
              "column": 6
            },
            "end": {
              "line": 1910,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unshift",
          "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1926,
              "column": 6
            },
            "end": {
              "line": 1934,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert info array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifyPath",
          "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1948,
              "column": 6
            },
            "end": {
              "line": 1965,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Value at the path (optional)."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReadOnlyProperty",
          "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1977,
              "column": 6
            },
            "end": {
              "line": 1984,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createPropertyObserver",
          "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1997,
              "column": 6
            },
            "end": {
              "line": 2007,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createMethodObserver",
          "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2019,
              "column": 6
            },
            "end": {
              "line": 2025,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createNotifyingProperty",
          "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2035,
              "column": 6
            },
            "end": {
              "line": 2043,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReflectedProperty",
          "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2053,
              "column": 6
            },
            "end": {
              "line": 2066,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createComputedProperty",
          "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2079,
              "column": 6
            },
            "end": {
              "line": 2085,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_bindTemplate",
          "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2255,
              "column": 6
            },
            "end": {
              "line": 2278,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            },
            {
              "name": "instanceBinding",
              "type": "boolean=",
              "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removeBoundDom",
          "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2355,
              "column": 6
            },
            "end": {
              "line": 2376,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "!StampedTemplate",
              "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "connectedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 633,
              "column": 6
            },
            "end": {
              "line": 638,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`disconnectedCallback`.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 644,
              "column": 6
            },
            "end": {
              "line": 644,
              "column": 31
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_attachDom",
          "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 691,
              "column": 6
            },
            "end": {
              "line": 707,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "StampedTemplate",
              "description": "to attach to the element."
            }
          ],
          "return": {
            "type": "ShadowRoot",
            "desc": "node to which the dom has been attached."
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "updateStyles",
          "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 750,
              "column": 6
            },
            "end": {
              "line": 754,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "properties",
              "type": "Object=",
              "description": "Bag of custom property key/values to\n  apply to this element."
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "resolveUrl",
          "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 767,
              "column": 6
            },
            "end": {
              "line": 772,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "string",
              "description": "URL to resolve."
            },
            {
              "name": "base",
              "type": "string=",
              "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
            }
          ],
          "return": {
            "type": "string",
            "desc": "Rewritten URL relative to base"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        }
      ],
      "staticMethods": [
        {
          "name": "_parseTemplate",
          "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 197,
              "column": 6
            },
            "end": {
              "line": 208,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to parse"
            },
            {
              "name": "outerTemplateInfo",
              "type": "TemplateInfo=",
              "description": "Template metadata from the outer\n  template, for parsing nested templates"
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Parsed template metadata"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateContent",
          "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 783,
              "column": 6
            },
            "end": {
              "line": 786,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template"
            },
            {
              "name": "templateInfo"
            },
            {
              "name": "nodeInfo"
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_parseTemplateNode",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2395,
              "column": 6
            },
            "end": {
              "line": 2409,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateChildNodes",
          "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 257,
              "column": 6
            },
            "end": {
              "line": 294,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "root",
              "type": "Node",
              "description": "Root node whose `childNodes` will be parsed"
            },
            {
              "name": "templateInfo",
              "type": "!TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "!NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNestedTemplate",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2482,
              "column": 6
            },
            "end": {
              "line": 2492,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateNodeAttributes",
          "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 332,
              "column": 6
            },
            "end": {
              "line": 341,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNodeAttribute",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2430,
              "column": 6
            },
            "end": {
              "line": 2466,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            },
            {
              "name": "name",
              "type": "string",
              "description": "Attribute name"
            },
            {
              "name": "value",
              "type": "string",
              "description": "Attribute value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_contentForTemplate",
          "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 387,
              "column": 6
            },
            "end": {
              "line": 390,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template to retrieve `content` for"
            }
          ],
          "return": {
            "type": "DocumentFragment",
            "desc": "Content fragment"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "createPropertiesForAttributes",
          "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 113,
              "column": 6
            },
            "end": {
              "line": 118,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "addPropertyEffect",
          "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2124,
              "column": 6
            },
            "end": {
              "line": 2126,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createPropertyObserver",
          "description": "Creates a single-property observer for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2137,
              "column": 6
            },
            "end": {
              "line": 2139,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createMethodObserver",
          "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2153,
              "column": 6
            },
            "end": {
              "line": 2155,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createNotifyingProperty",
          "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2164,
              "column": 6
            },
            "end": {
              "line": 2166,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReadOnlyProperty",
          "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2183,
              "column": 6
            },
            "end": {
              "line": 2185,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReflectedProperty",
          "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2194,
              "column": 6
            },
            "end": {
              "line": 2196,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createComputedProperty",
          "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2211,
              "column": 6
            },
            "end": {
              "line": 2213,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "bindTemplate",
          "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2227,
              "column": 6
            },
            "end": {
              "line": 2229,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Template metadata object"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addTemplatePropertyEffect",
          "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2292,
              "column": 6
            },
            "end": {
              "line": 2298,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Template metadata to add effect to"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseBindings",
          "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2527,
              "column": 6
            },
            "end": {
              "line": 2592,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "text",
              "type": "string",
              "description": "Text to parse from attribute or textContent"
            },
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Current template metadata"
            }
          ],
          "return": {
            "type": "Array.<!BindingPart>",
            "desc": "Array of binding part metadata"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_evaluateBinding",
          "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2608,
              "column": 6
            },
            "end": {
              "line": 2625,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "inst",
              "type": "this",
              "description": "Element that should be used as scope for\n  binding dependencies"
            },
            {
              "name": "part",
              "type": "BindingPart",
              "description": "Binding part metadata"
            },
            {
              "name": "path",
              "type": "string",
              "description": "Property/path that triggered this effect"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of current property changes"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value the binding part evaluated to"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "finalize",
          "description": "Called automatically when the first element instance is created to\nensure that class finalization work has been completed.\nMay be called by users to eagerly perform class finalization work\nprior to the creation of the first element instance.\n\nClass finalization work generally includes meta-programming such as\ncreating property accessors and any property effect metadata needed for\nthe features used.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 441,
              "column": 6
            },
            "end": {
              "line": 445,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_processStyleText",
          "description": "Gather style text for the template",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 588,
              "column": 6
            },
            "end": {
              "line": 591,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "is",
              "type": "string",
              "description": "Tag name for this element"
            },
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to process"
            },
            {
              "name": "baseURI",
              "type": "string",
              "description": "Base URI to rebase CSS paths against"
            }
          ],
          "return": {
            "type": "string",
            "desc": "The combined CSS text"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_finalizeTemplate",
          "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 602,
              "column": 6
            },
            "end": {
              "line": 621,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "is",
              "type": "string",
              "description": "Tag name (or type extension name) for this element"
            },
            {
              "name": "ext",
              "type": "string=",
              "description": "For type extensions, the tag name that was extended"
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 39,
          "column": 4
        },
        "end": {
          "line": 47,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "H2GridHeader",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "file": "h2-grid-header.html",
            "start": {
              "line": 28,
              "column": 6
            },
            "end": {
              "line": 28,
              "column": 19
            }
          }
        }
      ],
      "tagname": "h2-grid-header"
    },
    {
      "description": "```javascript\n\n<h2-grid-header-cell></h2-grid-header-cell>\n```\n\n`h2-grid-header-cell`",
      "summary": "",
      "path": "h2-grid-header-cell.html",
      "properties": [
        {
          "name": "__serializing",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 123,
              "column": 8
            },
            "end": {
              "line": 123,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataCounter",
          "type": "number",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1152,
              "column": 8
            },
            "end": {
              "line": 1152,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataEnabled",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 127,
              "column": 8
            },
            "end": {
              "line": 127,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 129,
              "column": 8
            },
            "end": {
              "line": 129,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataInvalid",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 131,
              "column": 8
            },
            "end": {
              "line": 131,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__data",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1134,
              "column": 8
            },
            "end": {
              "line": 1134,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPending",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1136,
              "column": 8
            },
            "end": {
              "line": 1136,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataOld",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1138,
              "column": 8
            },
            "end": {
              "line": 1138,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataProto",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 139,
              "column": 8
            },
            "end": {
              "line": 139,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataHasAccessor",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 141,
              "column": 8
            },
            "end": {
              "line": 141,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataInstanceProps",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 143,
              "column": 8
            },
            "end": {
              "line": 143,
              "column": 33
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataClientsReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1116,
              "column": 8
            },
            "end": {
              "line": 1116,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPendingClients",
          "type": "Array",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1118,
              "column": 8
            },
            "end": {
              "line": 1118,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataToNotify",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1120,
              "column": 8
            },
            "end": {
              "line": 1120,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataLinkedPaths",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1122,
              "column": 8
            },
            "end": {
              "line": 1122,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHasPaths",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1124,
              "column": 8
            },
            "end": {
              "line": 1124,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataCompoundStorage",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1126,
              "column": 8
            },
            "end": {
              "line": 1126,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHost",
          "type": "Polymer_PropertyEffects",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1128,
              "column": 8
            },
            "end": {
              "line": 1128,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataTemp",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1130,
              "column": 8
            },
            "end": {
              "line": 1130,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataClientsInitialized",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1132,
              "column": 8
            },
            "end": {
              "line": 1132,
              "column": 38
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__computeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1140,
              "column": 8
            },
            "end": {
              "line": 1140,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__reflectEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1142,
              "column": 8
            },
            "end": {
              "line": 1142,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__notifyEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1144,
              "column": 8
            },
            "end": {
              "line": 1144,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__propagateEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1146,
              "column": 8
            },
            "end": {
              "line": 1146,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__observeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1148,
              "column": 8
            },
            "end": {
              "line": 1148,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__readOnly",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1150,
              "column": 8
            },
            "end": {
              "line": 1150,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__templateInfo",
          "type": "!TemplateInfo",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1154,
              "column": 8
            },
            "end": {
              "line": 1154,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_template",
          "type": "HTMLTemplateElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 519,
              "column": 8
            },
            "end": {
              "line": 519,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_importPath",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 521,
              "column": 8
            },
            "end": {
              "line": 521,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "rootPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 523,
              "column": 8
            },
            "end": {
              "line": 523,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "importPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 525,
              "column": 8
            },
            "end": {
              "line": 525,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "root",
          "type": "(StampedTemplate|HTMLElement|ShadowRoot)",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 527,
              "column": 8
            },
            "end": {
              "line": 527,
              "column": 18
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "$",
          "type": "!Object.<string, !Node>",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 529,
              "column": 8
            },
            "end": {
              "line": 529,
              "column": 15
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        }
      ],
      "methods": [
        {
          "name": "_stampTemplate",
          "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2320,
              "column": 6
            },
            "end": {
              "line": 2345,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to stamp"
            }
          ],
          "return": {
            "type": "!StampedTemplate",
            "desc": "Cloned template content"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addMethodEventListenerToNode",
          "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 451,
              "column": 6
            },
            "end": {
              "line": 456,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to add listener on"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of method"
            },
            {
              "name": "context",
              "type": "*=",
              "description": "Context the method will be called on (defaults\n  to `node`)"
            }
          ],
          "return": {
            "type": "Function",
            "desc": "Generated handler function"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_addEventListenerToNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 465,
              "column": 6
            },
            "end": {
              "line": 467,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to add event listener to"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "Function",
              "description": "Listener function to add"
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_removeEventListenerFromNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 476,
              "column": 6
            },
            "end": {
              "line": 478,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to remove event listener from"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "Function",
              "description": "Listener function to remove"
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "attributeChangedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`attributeChangedCallback`.\n\nBy default, attributes declared in `properties` metadata are\ndeserialized using their `type` information to properties of the\nsame name.  \"Dash-cased\" attributes are deserialized to \"camelCase\"\nproperties.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 723,
              "column": 6
            },
            "end": {
              "line": 731,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of attribute."
            },
            {
              "name": "old",
              "type": "?string",
              "description": "Old value of attribute."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "Current value of attribute."
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeProperties",
          "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 543,
              "column": 6
            },
            "end": {
              "line": 577,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeProtoProperties",
          "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1184,
              "column": 6
            },
            "end": {
              "line": 1188,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the prototype"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_initializeInstanceProperties",
          "description": "Overrides `Polymer.PropertyAccessors` implementation to avoid setting\n`_setProperty`'s `shouldNotify: true`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1197,
              "column": 6
            },
            "end": {
              "line": 1206,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the instance"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_ensureAttribute",
          "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 236,
              "column": 6
            },
            "end": {
              "line": 240,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to ensure is set."
            },
            {
              "name": "value",
              "type": "string",
              "description": "of the attribute."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_attributeToProperty",
          "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 252,
              "column": 6
            },
            "end": {
              "line": 258,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to deserialize."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "of the attribute."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "type to deserialize to."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_propertyToAttribute",
          "description": "Serializes a property to its associated attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 267,
              "column": 6
            },
            "end": {
              "line": 273,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name to reflect."
            },
            {
              "name": "attribute",
              "type": "string=",
              "description": "Attribute name to reflect."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Property value to refect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_valueToNodeAttribute",
          "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 287,
              "column": 6
            },
            "end": {
              "line": 294,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Element to set attribute to."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to serialize."
            },
            {
              "name": "attribute",
              "type": "string",
              "description": "Attribute name to serialize to."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_serializeValue",
          "description": "Converts a typed JavaScript value to a string.\n\nThis method is called by Polymer when setting JS property values to\nHTML attributes.  Users may override this method on Polymer element\nprototypes to provide serialization for custom types.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 306,
              "column": 6
            },
            "end": {
              "line": 326,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "*",
              "description": "Property value to serialize."
            }
          ],
          "return": {
            "type": "(string|undefined)",
            "desc": "String serialized from the provided property value."
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_deserializeValue",
          "description": "Converts a string to a typed JavaScript value.\n\nThis method is called by Polymer when reading HTML attribute values to\nJS properties.  Users may override this method on Polymer element\nprototypes to provide deserialization for custom `type`s.  Note,\nthe `type` argument is the value of the `type` field provided in the\n`properties` configuration object for a given property, and is\nby convention the constructor for the type to deserialize.\n\nNote: The return value of `undefined` is used as a sentinel value to\nindicate the attribute should be removed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 387,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "?string",
              "description": "Attribute value to deserialize."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "Type to deserialize the string to."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Typed value deserialized from the provided string."
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_createPropertyAccessor",
          "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.  When calling on\na prototype, any overwritten values are saved in `__dataProto`,\nand it is up to the subclasser to decide how/when to set those\nproperties back into the accessor.  When calling on an instance,\nthe overwritten value is set via `_setPendingProperty`, and the\nuser should call `_invalidateProperties` or `_flushProperties`\nfor the values to take effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 411,
              "column": 6
            },
            "end": {
              "line": 431,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "readOnly",
              "type": "boolean=",
              "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_hasAccessor",
          "description": "Returns true if this library created an accessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 439,
              "column": 6
            },
            "end": {
              "line": 441,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if an accessor was created"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_setProperty",
          "description": "Overrides base implementation to ensure all accessors set `shouldNotify`\nto true, for per-property notification tracking.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1473,
              "column": 6
            },
            "end": {
              "line": 1477,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setPendingProperty",
          "description": "Overrides the `PropertyAccessors` implementation to introduce special\ndirty check logic depending on the property & value being set:\n\n1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n   Stored in `__dataTemp`, dirty checked against `__dataTemp`\n2. Object set to simple property (e.g. 'prop': {...})\n   Stored in `__dataTemp` and `__data`, dirty checked against\n   `__dataTemp` by default implementation of `_shouldPropertyChange`\n3. Primitive value set to simple property (e.g. 'prop': 42)\n   Stored in `__data`, dirty checked against `__data`\n\nThe dirty-check is important to prevent cycles due to two-way\nnotification, but paths and objects are only dirty checked against any\nprevious value set during this turn via a \"temporary cache\" that is\ncleared when the last `_propertiesChanged` exits. This is so:\na. any cached array paths (e.g. 'array.3.prop') may be invalidated\n   due to array mutations like shift/unshift/splice; this is fine\n   since path changes are dirty-checked at user entry points like `set`\nb. dirty-checking for objects only lasts one turn to allow the user\n   to mutate the object in-place and re-set it with the same identity\n   and have all sub-properties re-propagated in a subsequent turn.\n\nThe temp cache is not necessarily sufficient to prevent invalid array\npaths, since a splice can happen during the same turn (with pathological\nuser code); we could introduce a \"fixup\" for temporarily cached array\npaths if needed: https://github.com/Polymer/polymer/issues/4227",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1436,
              "column": 6
            },
            "end": {
              "line": 1465,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "True if property should fire notification\n  event (applies only for `notify: true` properties)"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property changed"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_isPropertyPending",
          "description": "Returns true if the specified property has a pending change.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 493,
              "column": 6
            },
            "end": {
              "line": 495,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if property has a pending change"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_invalidateProperties",
          "description": "Overrides `PropertyAccessor`'s default async queuing of\n`_propertiesChanged`: if `__dataReady` is false (has not yet been\nmanually flushed), the function no-ops; otherwise flushes\n`_propertiesChanged` synchronously.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1487,
              "column": 6
            },
            "end": {
              "line": 1491,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_enableProperties",
          "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 523,
              "column": 6
            },
            "end": {
              "line": 532,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_flushProperties",
          "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 543,
              "column": 6
            },
            "end": {
              "line": 551,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "ready",
          "description": "Stamps the element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 651,
              "column": 6
            },
            "end": {
              "line": 657,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_propertiesChanged",
          "description": "Implements `PropertyAccessors`'s properties changed callback.\n\nRuns each class of effects for the batch of changed properties in\na specific order (compute, propagate, reflect, observe, notify).",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1626,
              "column": 6
            },
            "end": {
              "line": 1659,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "currentProps"
            },
            {
              "name": "changedProps"
            },
            {
              "name": "oldProps"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_shouldPropertyChange",
          "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` for primitive types if a\nstrict equality check fails, and returns `true` for all Object/Arrays.\nThe method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 606,
              "column": 6
            },
            "end": {
              "line": 609,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "value",
              "type": "*",
              "description": "New property value"
            },
            {
              "name": "old",
              "type": "*",
              "description": "Previous property value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Whether the property should be considered a change\n  and enqueue a `_propertiesChanged` callback"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_addPropertyEffect",
          "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1220,
              "column": 6
            },
            "end": {
              "line": 1228,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removePropertyEffect",
          "description": "Removes the given property effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1237,
              "column": 6
            },
            "end": {
              "line": 1243,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property the effect was associated with"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object to remove"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasPropertyEffect",
          "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1254,
              "column": 6
            },
            "end": {
              "line": 1257,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "type",
              "type": "string=",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReadOnlyEffect",
          "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1267,
              "column": 6
            },
            "end": {
              "line": 1269,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasNotifyEffect",
          "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1279,
              "column": 6
            },
            "end": {
              "line": 1281,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReflectEffect",
          "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1291,
              "column": 6
            },
            "end": {
              "line": 1293,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasComputedEffect",
          "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1303,
              "column": 6
            },
            "end": {
              "line": 1305,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setPendingPropertyOrPath",
          "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1337,
              "column": 6
            },
            "end": {
              "line": 1369,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(number|string)>)",
              "description": "Path to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "Set to true if this change should\n cause a property notification event dispatch"
            },
            {
              "name": "isPathNotification",
              "type": "boolean=",
              "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setUnmanagedPropertyToNode",
          "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1391,
              "column": 6
            },
            "end": {
              "line": 1399,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "The node to set a property on"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "The property to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value to set"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_enqueueClient",
          "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1501,
              "column": 6
            },
            "end": {
              "line": 1506,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "client",
              "type": "Object",
              "description": "PropertyEffects client to enqueue"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_flushClients",
          "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1514,
              "column": 6
            },
            "end": {
              "line": 1525,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__enableOrFlushClients",
          "description": "(c) the stamped dom enables.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1539,
              "column": 6
            },
            "end": {
              "line": 1552,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_readyClients",
          "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 668,
              "column": 6
            },
            "end": {
              "line": 677,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "setProperties",
          "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1579,
              "column": 6
            },
            "end": {
              "line": 1590,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
            },
            {
              "name": "setReadOnly",
              "type": "boolean=",
              "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_propagatePropertyChanges",
          "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1670,
              "column": 6
            },
            "end": {
              "line": 1680,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProps",
              "type": "Object",
              "description": "Bag of changed properties"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "linkPaths",
          "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1690,
              "column": 6
            },
            "end": {
              "line": 1695,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "to",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Target path to link."
            },
            {
              "name": "from",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Source path to link."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unlinkPaths",
          "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1706,
              "column": 6
            },
            "end": {
              "line": 1711,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Target path to unlink."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifySplices",
          "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1742,
              "column": 6
            },
            "end": {
              "line": 1746,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "splices",
              "type": "Array",
              "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "get",
          "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1767,
              "column": 6
            },
            "end": {
              "line": 1769,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "set",
          "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1791,
              "column": 6
            },
            "end": {
              "line": 1801,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set at the specified path."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "push",
          "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1817,
              "column": 6
            },
            "end": {
              "line": 1826,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to push onto array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "pop",
          "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1841,
              "column": 6
            },
            "end": {
              "line": 1850,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "splice",
          "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1869,
              "column": 6
            },
            "end": {
              "line": 1886,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "start",
              "type": "number",
              "description": "Index from which to start removing/inserting."
            },
            {
              "name": "deleteCount",
              "type": "number",
              "description": "Number of items to remove."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert into array."
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Array of removed items."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "shift",
          "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1901,
              "column": 6
            },
            "end": {
              "line": 1910,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unshift",
          "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1926,
              "column": 6
            },
            "end": {
              "line": 1934,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert info array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifyPath",
          "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1948,
              "column": 6
            },
            "end": {
              "line": 1965,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Value at the path (optional)."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReadOnlyProperty",
          "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1977,
              "column": 6
            },
            "end": {
              "line": 1984,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createPropertyObserver",
          "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1997,
              "column": 6
            },
            "end": {
              "line": 2007,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createMethodObserver",
          "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2019,
              "column": 6
            },
            "end": {
              "line": 2025,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createNotifyingProperty",
          "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2035,
              "column": 6
            },
            "end": {
              "line": 2043,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReflectedProperty",
          "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2053,
              "column": 6
            },
            "end": {
              "line": 2066,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createComputedProperty",
          "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2079,
              "column": 6
            },
            "end": {
              "line": 2085,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_bindTemplate",
          "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2255,
              "column": 6
            },
            "end": {
              "line": 2278,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            },
            {
              "name": "instanceBinding",
              "type": "boolean=",
              "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removeBoundDom",
          "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2355,
              "column": 6
            },
            "end": {
              "line": 2376,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "!StampedTemplate",
              "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "connectedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 633,
              "column": 6
            },
            "end": {
              "line": 638,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`disconnectedCallback`.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 644,
              "column": 6
            },
            "end": {
              "line": 644,
              "column": 31
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_attachDom",
          "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 691,
              "column": 6
            },
            "end": {
              "line": 707,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "StampedTemplate",
              "description": "to attach to the element."
            }
          ],
          "return": {
            "type": "ShadowRoot",
            "desc": "node to which the dom has been attached."
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "updateStyles",
          "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 750,
              "column": 6
            },
            "end": {
              "line": 754,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "properties",
              "type": "Object=",
              "description": "Bag of custom property key/values to\n  apply to this element."
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "resolveUrl",
          "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 767,
              "column": 6
            },
            "end": {
              "line": 772,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "string",
              "description": "URL to resolve."
            },
            {
              "name": "base",
              "type": "string=",
              "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
            }
          ],
          "return": {
            "type": "string",
            "desc": "Rewritten URL relative to base"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        }
      ],
      "staticMethods": [
        {
          "name": "_parseTemplate",
          "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 197,
              "column": 6
            },
            "end": {
              "line": 208,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to parse"
            },
            {
              "name": "outerTemplateInfo",
              "type": "TemplateInfo=",
              "description": "Template metadata from the outer\n  template, for parsing nested templates"
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Parsed template metadata"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateContent",
          "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 783,
              "column": 6
            },
            "end": {
              "line": 786,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template"
            },
            {
              "name": "templateInfo"
            },
            {
              "name": "nodeInfo"
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_parseTemplateNode",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2395,
              "column": 6
            },
            "end": {
              "line": 2409,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateChildNodes",
          "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 257,
              "column": 6
            },
            "end": {
              "line": 294,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "root",
              "type": "Node",
              "description": "Root node whose `childNodes` will be parsed"
            },
            {
              "name": "templateInfo",
              "type": "!TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "!NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNestedTemplate",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2482,
              "column": 6
            },
            "end": {
              "line": 2492,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateNodeAttributes",
          "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 332,
              "column": 6
            },
            "end": {
              "line": 341,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNodeAttribute",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2430,
              "column": 6
            },
            "end": {
              "line": 2466,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            },
            {
              "name": "name",
              "type": "string",
              "description": "Attribute name"
            },
            {
              "name": "value",
              "type": "string",
              "description": "Attribute value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_contentForTemplate",
          "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 387,
              "column": 6
            },
            "end": {
              "line": 390,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template to retrieve `content` for"
            }
          ],
          "return": {
            "type": "DocumentFragment",
            "desc": "Content fragment"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "createPropertiesForAttributes",
          "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 113,
              "column": 6
            },
            "end": {
              "line": 118,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "addPropertyEffect",
          "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2124,
              "column": 6
            },
            "end": {
              "line": 2126,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createPropertyObserver",
          "description": "Creates a single-property observer for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2137,
              "column": 6
            },
            "end": {
              "line": 2139,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createMethodObserver",
          "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2153,
              "column": 6
            },
            "end": {
              "line": 2155,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createNotifyingProperty",
          "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2164,
              "column": 6
            },
            "end": {
              "line": 2166,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReadOnlyProperty",
          "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2183,
              "column": 6
            },
            "end": {
              "line": 2185,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReflectedProperty",
          "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2194,
              "column": 6
            },
            "end": {
              "line": 2196,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createComputedProperty",
          "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2211,
              "column": 6
            },
            "end": {
              "line": 2213,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "bindTemplate",
          "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2227,
              "column": 6
            },
            "end": {
              "line": 2229,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Template metadata object"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addTemplatePropertyEffect",
          "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2292,
              "column": 6
            },
            "end": {
              "line": 2298,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Template metadata to add effect to"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseBindings",
          "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2527,
              "column": 6
            },
            "end": {
              "line": 2592,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "text",
              "type": "string",
              "description": "Text to parse from attribute or textContent"
            },
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Current template metadata"
            }
          ],
          "return": {
            "type": "Array.<!BindingPart>",
            "desc": "Array of binding part metadata"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_evaluateBinding",
          "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2608,
              "column": 6
            },
            "end": {
              "line": 2625,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "inst",
              "type": "this",
              "description": "Element that should be used as scope for\n  binding dependencies"
            },
            {
              "name": "part",
              "type": "BindingPart",
              "description": "Binding part metadata"
            },
            {
              "name": "path",
              "type": "string",
              "description": "Property/path that triggered this effect"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of current property changes"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value the binding part evaluated to"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "finalize",
          "description": "Called automatically when the first element instance is created to\nensure that class finalization work has been completed.\nMay be called by users to eagerly perform class finalization work\nprior to the creation of the first element instance.\n\nClass finalization work generally includes meta-programming such as\ncreating property accessors and any property effect metadata needed for\nthe features used.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 441,
              "column": 6
            },
            "end": {
              "line": 445,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_processStyleText",
          "description": "Gather style text for the template",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 588,
              "column": 6
            },
            "end": {
              "line": 591,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "is",
              "type": "string",
              "description": "Tag name for this element"
            },
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to process"
            },
            {
              "name": "baseURI",
              "type": "string",
              "description": "Base URI to rebase CSS paths against"
            }
          ],
          "return": {
            "type": "string",
            "desc": "The combined CSS text"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_finalizeTemplate",
          "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 602,
              "column": 6
            },
            "end": {
              "line": 621,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "is",
              "type": "string",
              "description": "Tag name (or type extension name) for this element"
            },
            {
              "name": "ext",
              "type": "string=",
              "description": "For type extensions, the tag name that was extended"
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 34,
          "column": 4
        },
        "end": {
          "line": 42,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "H2GridHeaderCell",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "file": "h2-grid-header-cell.html",
            "start": {
              "line": 25,
              "column": 4
            },
            "end": {
              "line": 25,
              "column": 17
            }
          }
        }
      ],
      "tagname": "h2-grid-header-cell"
    },
    {
      "description": "```javascript\n\n<h2-grid-body></h2-grid-body>\n```\n\n`h2-grid-body`",
      "summary": "",
      "path": "h2-grid-body.html",
      "properties": [
        {
          "name": "__serializing",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 123,
              "column": 8
            },
            "end": {
              "line": 123,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataCounter",
          "type": "number",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1152,
              "column": 8
            },
            "end": {
              "line": 1152,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataEnabled",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 127,
              "column": 8
            },
            "end": {
              "line": 127,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 129,
              "column": 8
            },
            "end": {
              "line": 129,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataInvalid",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 131,
              "column": 8
            },
            "end": {
              "line": 131,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__data",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1134,
              "column": 8
            },
            "end": {
              "line": 1134,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPending",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1136,
              "column": 8
            },
            "end": {
              "line": 1136,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataOld",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1138,
              "column": 8
            },
            "end": {
              "line": 1138,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataProto",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 139,
              "column": 8
            },
            "end": {
              "line": 139,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataHasAccessor",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 141,
              "column": 8
            },
            "end": {
              "line": 141,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataInstanceProps",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 143,
              "column": 8
            },
            "end": {
              "line": 143,
              "column": 33
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataClientsReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1116,
              "column": 8
            },
            "end": {
              "line": 1116,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPendingClients",
          "type": "Array",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1118,
              "column": 8
            },
            "end": {
              "line": 1118,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataToNotify",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1120,
              "column": 8
            },
            "end": {
              "line": 1120,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataLinkedPaths",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1122,
              "column": 8
            },
            "end": {
              "line": 1122,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHasPaths",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1124,
              "column": 8
            },
            "end": {
              "line": 1124,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataCompoundStorage",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1126,
              "column": 8
            },
            "end": {
              "line": 1126,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHost",
          "type": "Polymer_PropertyEffects",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1128,
              "column": 8
            },
            "end": {
              "line": 1128,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataTemp",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1130,
              "column": 8
            },
            "end": {
              "line": 1130,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataClientsInitialized",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1132,
              "column": 8
            },
            "end": {
              "line": 1132,
              "column": 38
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__computeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1140,
              "column": 8
            },
            "end": {
              "line": 1140,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__reflectEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1142,
              "column": 8
            },
            "end": {
              "line": 1142,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__notifyEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1144,
              "column": 8
            },
            "end": {
              "line": 1144,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__propagateEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1146,
              "column": 8
            },
            "end": {
              "line": 1146,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__observeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1148,
              "column": 8
            },
            "end": {
              "line": 1148,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__readOnly",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1150,
              "column": 8
            },
            "end": {
              "line": 1150,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__templateInfo",
          "type": "!TemplateInfo",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1154,
              "column": 8
            },
            "end": {
              "line": 1154,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_template",
          "type": "HTMLTemplateElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 519,
              "column": 8
            },
            "end": {
              "line": 519,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_importPath",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 521,
              "column": 8
            },
            "end": {
              "line": 521,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "rootPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 523,
              "column": 8
            },
            "end": {
              "line": 523,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "importPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 525,
              "column": 8
            },
            "end": {
              "line": 525,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "root",
          "type": "(StampedTemplate|HTMLElement|ShadowRoot)",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 527,
              "column": 8
            },
            "end": {
              "line": 527,
              "column": 18
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "$",
          "type": "!Object.<string, !Node>",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 529,
              "column": 8
            },
            "end": {
              "line": 529,
              "column": 15
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        }
      ],
      "methods": [
        {
          "name": "_stampTemplate",
          "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2320,
              "column": 6
            },
            "end": {
              "line": 2345,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to stamp"
            }
          ],
          "return": {
            "type": "!StampedTemplate",
            "desc": "Cloned template content"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addMethodEventListenerToNode",
          "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 451,
              "column": 6
            },
            "end": {
              "line": 456,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to add listener on"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of method"
            },
            {
              "name": "context",
              "type": "*=",
              "description": "Context the method will be called on (defaults\n  to `node`)"
            }
          ],
          "return": {
            "type": "Function",
            "desc": "Generated handler function"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_addEventListenerToNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 465,
              "column": 6
            },
            "end": {
              "line": 467,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to add event listener to"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "Function",
              "description": "Listener function to add"
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_removeEventListenerFromNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 476,
              "column": 6
            },
            "end": {
              "line": 478,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to remove event listener from"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "Function",
              "description": "Listener function to remove"
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "attributeChangedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`attributeChangedCallback`.\n\nBy default, attributes declared in `properties` metadata are\ndeserialized using their `type` information to properties of the\nsame name.  \"Dash-cased\" attributes are deserialized to \"camelCase\"\nproperties.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 723,
              "column": 6
            },
            "end": {
              "line": 731,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of attribute."
            },
            {
              "name": "old",
              "type": "?string",
              "description": "Old value of attribute."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "Current value of attribute."
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeProperties",
          "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 543,
              "column": 6
            },
            "end": {
              "line": 577,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeProtoProperties",
          "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1184,
              "column": 6
            },
            "end": {
              "line": 1188,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the prototype"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_initializeInstanceProperties",
          "description": "Overrides `Polymer.PropertyAccessors` implementation to avoid setting\n`_setProperty`'s `shouldNotify: true`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1197,
              "column": 6
            },
            "end": {
              "line": 1206,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the instance"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_ensureAttribute",
          "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 236,
              "column": 6
            },
            "end": {
              "line": 240,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to ensure is set."
            },
            {
              "name": "value",
              "type": "string",
              "description": "of the attribute."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_attributeToProperty",
          "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 252,
              "column": 6
            },
            "end": {
              "line": 258,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to deserialize."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "of the attribute."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "type to deserialize to."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_propertyToAttribute",
          "description": "Serializes a property to its associated attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 267,
              "column": 6
            },
            "end": {
              "line": 273,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name to reflect."
            },
            {
              "name": "attribute",
              "type": "string=",
              "description": "Attribute name to reflect."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Property value to refect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_valueToNodeAttribute",
          "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 287,
              "column": 6
            },
            "end": {
              "line": 294,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Element to set attribute to."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to serialize."
            },
            {
              "name": "attribute",
              "type": "string",
              "description": "Attribute name to serialize to."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_serializeValue",
          "description": "Converts a typed JavaScript value to a string.\n\nThis method is called by Polymer when setting JS property values to\nHTML attributes.  Users may override this method on Polymer element\nprototypes to provide serialization for custom types.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 306,
              "column": 6
            },
            "end": {
              "line": 326,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "*",
              "description": "Property value to serialize."
            }
          ],
          "return": {
            "type": "(string|undefined)",
            "desc": "String serialized from the provided property value."
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_deserializeValue",
          "description": "Converts a string to a typed JavaScript value.\n\nThis method is called by Polymer when reading HTML attribute values to\nJS properties.  Users may override this method on Polymer element\nprototypes to provide deserialization for custom `type`s.  Note,\nthe `type` argument is the value of the `type` field provided in the\n`properties` configuration object for a given property, and is\nby convention the constructor for the type to deserialize.\n\nNote: The return value of `undefined` is used as a sentinel value to\nindicate the attribute should be removed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 387,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "?string",
              "description": "Attribute value to deserialize."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "Type to deserialize the string to."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Typed value deserialized from the provided string."
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_createPropertyAccessor",
          "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.  When calling on\na prototype, any overwritten values are saved in `__dataProto`,\nand it is up to the subclasser to decide how/when to set those\nproperties back into the accessor.  When calling on an instance,\nthe overwritten value is set via `_setPendingProperty`, and the\nuser should call `_invalidateProperties` or `_flushProperties`\nfor the values to take effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 411,
              "column": 6
            },
            "end": {
              "line": 431,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "readOnly",
              "type": "boolean=",
              "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_hasAccessor",
          "description": "Returns true if this library created an accessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 439,
              "column": 6
            },
            "end": {
              "line": 441,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if an accessor was created"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_setProperty",
          "description": "Overrides base implementation to ensure all accessors set `shouldNotify`\nto true, for per-property notification tracking.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1473,
              "column": 6
            },
            "end": {
              "line": 1477,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setPendingProperty",
          "description": "Overrides the `PropertyAccessors` implementation to introduce special\ndirty check logic depending on the property & value being set:\n\n1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n   Stored in `__dataTemp`, dirty checked against `__dataTemp`\n2. Object set to simple property (e.g. 'prop': {...})\n   Stored in `__dataTemp` and `__data`, dirty checked against\n   `__dataTemp` by default implementation of `_shouldPropertyChange`\n3. Primitive value set to simple property (e.g. 'prop': 42)\n   Stored in `__data`, dirty checked against `__data`\n\nThe dirty-check is important to prevent cycles due to two-way\nnotification, but paths and objects are only dirty checked against any\nprevious value set during this turn via a \"temporary cache\" that is\ncleared when the last `_propertiesChanged` exits. This is so:\na. any cached array paths (e.g. 'array.3.prop') may be invalidated\n   due to array mutations like shift/unshift/splice; this is fine\n   since path changes are dirty-checked at user entry points like `set`\nb. dirty-checking for objects only lasts one turn to allow the user\n   to mutate the object in-place and re-set it with the same identity\n   and have all sub-properties re-propagated in a subsequent turn.\n\nThe temp cache is not necessarily sufficient to prevent invalid array\npaths, since a splice can happen during the same turn (with pathological\nuser code); we could introduce a \"fixup\" for temporarily cached array\npaths if needed: https://github.com/Polymer/polymer/issues/4227",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1436,
              "column": 6
            },
            "end": {
              "line": 1465,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "True if property should fire notification\n  event (applies only for `notify: true` properties)"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property changed"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_isPropertyPending",
          "description": "Returns true if the specified property has a pending change.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 493,
              "column": 6
            },
            "end": {
              "line": 495,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if property has a pending change"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_invalidateProperties",
          "description": "Overrides `PropertyAccessor`'s default async queuing of\n`_propertiesChanged`: if `__dataReady` is false (has not yet been\nmanually flushed), the function no-ops; otherwise flushes\n`_propertiesChanged` synchronously.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1487,
              "column": 6
            },
            "end": {
              "line": 1491,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_enableProperties",
          "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 523,
              "column": 6
            },
            "end": {
              "line": 532,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_flushProperties",
          "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 543,
              "column": 6
            },
            "end": {
              "line": 551,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "ready",
          "description": "Stamps the element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 651,
              "column": 6
            },
            "end": {
              "line": 657,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_propertiesChanged",
          "description": "Implements `PropertyAccessors`'s properties changed callback.\n\nRuns each class of effects for the batch of changed properties in\na specific order (compute, propagate, reflect, observe, notify).",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1626,
              "column": 6
            },
            "end": {
              "line": 1659,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "currentProps"
            },
            {
              "name": "changedProps"
            },
            {
              "name": "oldProps"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_shouldPropertyChange",
          "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` for primitive types if a\nstrict equality check fails, and returns `true` for all Object/Arrays.\nThe method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 606,
              "column": 6
            },
            "end": {
              "line": 609,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "value",
              "type": "*",
              "description": "New property value"
            },
            {
              "name": "old",
              "type": "*",
              "description": "Previous property value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Whether the property should be considered a change\n  and enqueue a `_propertiesChanged` callback"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_addPropertyEffect",
          "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1220,
              "column": 6
            },
            "end": {
              "line": 1228,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removePropertyEffect",
          "description": "Removes the given property effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1237,
              "column": 6
            },
            "end": {
              "line": 1243,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property the effect was associated with"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object to remove"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasPropertyEffect",
          "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1254,
              "column": 6
            },
            "end": {
              "line": 1257,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "type",
              "type": "string=",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReadOnlyEffect",
          "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1267,
              "column": 6
            },
            "end": {
              "line": 1269,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasNotifyEffect",
          "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1279,
              "column": 6
            },
            "end": {
              "line": 1281,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReflectEffect",
          "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1291,
              "column": 6
            },
            "end": {
              "line": 1293,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasComputedEffect",
          "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1303,
              "column": 6
            },
            "end": {
              "line": 1305,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setPendingPropertyOrPath",
          "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1337,
              "column": 6
            },
            "end": {
              "line": 1369,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(number|string)>)",
              "description": "Path to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "Set to true if this change should\n cause a property notification event dispatch"
            },
            {
              "name": "isPathNotification",
              "type": "boolean=",
              "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setUnmanagedPropertyToNode",
          "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1391,
              "column": 6
            },
            "end": {
              "line": 1399,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "The node to set a property on"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "The property to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value to set"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_enqueueClient",
          "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1501,
              "column": 6
            },
            "end": {
              "line": 1506,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "client",
              "type": "Object",
              "description": "PropertyEffects client to enqueue"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_flushClients",
          "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1514,
              "column": 6
            },
            "end": {
              "line": 1525,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__enableOrFlushClients",
          "description": "(c) the stamped dom enables.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1539,
              "column": 6
            },
            "end": {
              "line": 1552,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_readyClients",
          "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 668,
              "column": 6
            },
            "end": {
              "line": 677,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "setProperties",
          "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1579,
              "column": 6
            },
            "end": {
              "line": 1590,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
            },
            {
              "name": "setReadOnly",
              "type": "boolean=",
              "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_propagatePropertyChanges",
          "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1670,
              "column": 6
            },
            "end": {
              "line": 1680,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProps",
              "type": "Object",
              "description": "Bag of changed properties"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "linkPaths",
          "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1690,
              "column": 6
            },
            "end": {
              "line": 1695,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "to",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Target path to link."
            },
            {
              "name": "from",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Source path to link."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unlinkPaths",
          "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1706,
              "column": 6
            },
            "end": {
              "line": 1711,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Target path to unlink."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifySplices",
          "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1742,
              "column": 6
            },
            "end": {
              "line": 1746,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "splices",
              "type": "Array",
              "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "get",
          "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1767,
              "column": 6
            },
            "end": {
              "line": 1769,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "set",
          "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1791,
              "column": 6
            },
            "end": {
              "line": 1801,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set at the specified path."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "push",
          "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1817,
              "column": 6
            },
            "end": {
              "line": 1826,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to push onto array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "pop",
          "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1841,
              "column": 6
            },
            "end": {
              "line": 1850,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "splice",
          "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1869,
              "column": 6
            },
            "end": {
              "line": 1886,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "start",
              "type": "number",
              "description": "Index from which to start removing/inserting."
            },
            {
              "name": "deleteCount",
              "type": "number",
              "description": "Number of items to remove."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert into array."
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Array of removed items."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "shift",
          "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1901,
              "column": 6
            },
            "end": {
              "line": 1910,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unshift",
          "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1926,
              "column": 6
            },
            "end": {
              "line": 1934,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert info array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifyPath",
          "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1948,
              "column": 6
            },
            "end": {
              "line": 1965,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Value at the path (optional)."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReadOnlyProperty",
          "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1977,
              "column": 6
            },
            "end": {
              "line": 1984,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createPropertyObserver",
          "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1997,
              "column": 6
            },
            "end": {
              "line": 2007,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createMethodObserver",
          "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2019,
              "column": 6
            },
            "end": {
              "line": 2025,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createNotifyingProperty",
          "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2035,
              "column": 6
            },
            "end": {
              "line": 2043,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReflectedProperty",
          "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2053,
              "column": 6
            },
            "end": {
              "line": 2066,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createComputedProperty",
          "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2079,
              "column": 6
            },
            "end": {
              "line": 2085,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_bindTemplate",
          "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2255,
              "column": 6
            },
            "end": {
              "line": 2278,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            },
            {
              "name": "instanceBinding",
              "type": "boolean=",
              "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removeBoundDom",
          "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2355,
              "column": 6
            },
            "end": {
              "line": 2376,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "!StampedTemplate",
              "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "connectedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 633,
              "column": 6
            },
            "end": {
              "line": 638,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`disconnectedCallback`.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 644,
              "column": 6
            },
            "end": {
              "line": 644,
              "column": 31
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_attachDom",
          "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 691,
              "column": 6
            },
            "end": {
              "line": 707,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "StampedTemplate",
              "description": "to attach to the element."
            }
          ],
          "return": {
            "type": "ShadowRoot",
            "desc": "node to which the dom has been attached."
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "updateStyles",
          "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 750,
              "column": 6
            },
            "end": {
              "line": 754,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "properties",
              "type": "Object=",
              "description": "Bag of custom property key/values to\n  apply to this element."
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "resolveUrl",
          "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 767,
              "column": 6
            },
            "end": {
              "line": 772,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "string",
              "description": "URL to resolve."
            },
            {
              "name": "base",
              "type": "string=",
              "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
            }
          ],
          "return": {
            "type": "string",
            "desc": "Rewritten URL relative to base"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        }
      ],
      "staticMethods": [
        {
          "name": "_parseTemplate",
          "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 197,
              "column": 6
            },
            "end": {
              "line": 208,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to parse"
            },
            {
              "name": "outerTemplateInfo",
              "type": "TemplateInfo=",
              "description": "Template metadata from the outer\n  template, for parsing nested templates"
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Parsed template metadata"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateContent",
          "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 783,
              "column": 6
            },
            "end": {
              "line": 786,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template"
            },
            {
              "name": "templateInfo"
            },
            {
              "name": "nodeInfo"
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_parseTemplateNode",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2395,
              "column": 6
            },
            "end": {
              "line": 2409,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateChildNodes",
          "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 257,
              "column": 6
            },
            "end": {
              "line": 294,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "root",
              "type": "Node",
              "description": "Root node whose `childNodes` will be parsed"
            },
            {
              "name": "templateInfo",
              "type": "!TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "!NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNestedTemplate",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2482,
              "column": 6
            },
            "end": {
              "line": 2492,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateNodeAttributes",
          "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 332,
              "column": 6
            },
            "end": {
              "line": 341,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNodeAttribute",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2430,
              "column": 6
            },
            "end": {
              "line": 2466,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            },
            {
              "name": "name",
              "type": "string",
              "description": "Attribute name"
            },
            {
              "name": "value",
              "type": "string",
              "description": "Attribute value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_contentForTemplate",
          "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 387,
              "column": 6
            },
            "end": {
              "line": 390,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template to retrieve `content` for"
            }
          ],
          "return": {
            "type": "DocumentFragment",
            "desc": "Content fragment"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "createPropertiesForAttributes",
          "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 113,
              "column": 6
            },
            "end": {
              "line": 118,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "addPropertyEffect",
          "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2124,
              "column": 6
            },
            "end": {
              "line": 2126,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createPropertyObserver",
          "description": "Creates a single-property observer for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2137,
              "column": 6
            },
            "end": {
              "line": 2139,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createMethodObserver",
          "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2153,
              "column": 6
            },
            "end": {
              "line": 2155,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createNotifyingProperty",
          "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2164,
              "column": 6
            },
            "end": {
              "line": 2166,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReadOnlyProperty",
          "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2183,
              "column": 6
            },
            "end": {
              "line": 2185,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReflectedProperty",
          "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2194,
              "column": 6
            },
            "end": {
              "line": 2196,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createComputedProperty",
          "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2211,
              "column": 6
            },
            "end": {
              "line": 2213,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "bindTemplate",
          "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2227,
              "column": 6
            },
            "end": {
              "line": 2229,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Template metadata object"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addTemplatePropertyEffect",
          "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2292,
              "column": 6
            },
            "end": {
              "line": 2298,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Template metadata to add effect to"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseBindings",
          "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2527,
              "column": 6
            },
            "end": {
              "line": 2592,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "text",
              "type": "string",
              "description": "Text to parse from attribute or textContent"
            },
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Current template metadata"
            }
          ],
          "return": {
            "type": "Array.<!BindingPart>",
            "desc": "Array of binding part metadata"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_evaluateBinding",
          "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2608,
              "column": 6
            },
            "end": {
              "line": 2625,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "inst",
              "type": "this",
              "description": "Element that should be used as scope for\n  binding dependencies"
            },
            {
              "name": "part",
              "type": "BindingPart",
              "description": "Binding part metadata"
            },
            {
              "name": "path",
              "type": "string",
              "description": "Property/path that triggered this effect"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of current property changes"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value the binding part evaluated to"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "finalize",
          "description": "Called automatically when the first element instance is created to\nensure that class finalization work has been completed.\nMay be called by users to eagerly perform class finalization work\nprior to the creation of the first element instance.\n\nClass finalization work generally includes meta-programming such as\ncreating property accessors and any property effect metadata needed for\nthe features used.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 441,
              "column": 6
            },
            "end": {
              "line": 445,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_processStyleText",
          "description": "Gather style text for the template",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 588,
              "column": 6
            },
            "end": {
              "line": 591,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "is",
              "type": "string",
              "description": "Tag name for this element"
            },
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to process"
            },
            {
              "name": "baseURI",
              "type": "string",
              "description": "Base URI to rebase CSS paths against"
            }
          ],
          "return": {
            "type": "string",
            "desc": "The combined CSS text"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_finalizeTemplate",
          "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 602,
              "column": 6
            },
            "end": {
              "line": 621,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "is",
              "type": "string",
              "description": "Tag name (or type extension name) for this element"
            },
            {
              "name": "ext",
              "type": "string=",
              "description": "For type extensions, the tag name that was extended"
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 27,
          "column": 4
        },
        "end": {
          "line": 35,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "H2GridBody",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "file": "h2-grid-body.html",
            "start": {
              "line": 18,
              "column": 4
            },
            "end": {
              "line": 18,
              "column": 17
            }
          }
        }
      ],
      "tagname": "h2-grid-body"
    },
    {
      "description": "```javascript\n\n<h2-grid-cell></h2-grid-cell>\n```\n\n`h2-grid-cell`",
      "summary": "",
      "path": "h2-grid-cell.html",
      "properties": [
        {
          "name": "__serializing",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 123,
              "column": 8
            },
            "end": {
              "line": 123,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataCounter",
          "type": "number",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1152,
              "column": 8
            },
            "end": {
              "line": 1152,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataEnabled",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 127,
              "column": 8
            },
            "end": {
              "line": 127,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 129,
              "column": 8
            },
            "end": {
              "line": 129,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataInvalid",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 131,
              "column": 8
            },
            "end": {
              "line": 131,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__data",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1134,
              "column": 8
            },
            "end": {
              "line": 1134,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPending",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1136,
              "column": 8
            },
            "end": {
              "line": 1136,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataOld",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1138,
              "column": 8
            },
            "end": {
              "line": 1138,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataProto",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 139,
              "column": 8
            },
            "end": {
              "line": 139,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataHasAccessor",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 141,
              "column": 8
            },
            "end": {
              "line": 141,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataInstanceProps",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 143,
              "column": 8
            },
            "end": {
              "line": 143,
              "column": 33
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataClientsReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1116,
              "column": 8
            },
            "end": {
              "line": 1116,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPendingClients",
          "type": "Array",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1118,
              "column": 8
            },
            "end": {
              "line": 1118,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataToNotify",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1120,
              "column": 8
            },
            "end": {
              "line": 1120,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataLinkedPaths",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1122,
              "column": 8
            },
            "end": {
              "line": 1122,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHasPaths",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1124,
              "column": 8
            },
            "end": {
              "line": 1124,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataCompoundStorage",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1126,
              "column": 8
            },
            "end": {
              "line": 1126,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHost",
          "type": "Polymer_PropertyEffects",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1128,
              "column": 8
            },
            "end": {
              "line": 1128,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataTemp",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1130,
              "column": 8
            },
            "end": {
              "line": 1130,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataClientsInitialized",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1132,
              "column": 8
            },
            "end": {
              "line": 1132,
              "column": 38
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__computeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1140,
              "column": 8
            },
            "end": {
              "line": 1140,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__reflectEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1142,
              "column": 8
            },
            "end": {
              "line": 1142,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__notifyEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1144,
              "column": 8
            },
            "end": {
              "line": 1144,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__propagateEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1146,
              "column": 8
            },
            "end": {
              "line": 1146,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__observeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1148,
              "column": 8
            },
            "end": {
              "line": 1148,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__readOnly",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1150,
              "column": 8
            },
            "end": {
              "line": 1150,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__templateInfo",
          "type": "!TemplateInfo",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1154,
              "column": 8
            },
            "end": {
              "line": 1154,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_template",
          "type": "HTMLTemplateElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 519,
              "column": 8
            },
            "end": {
              "line": 519,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_importPath",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 521,
              "column": 8
            },
            "end": {
              "line": 521,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "rootPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 523,
              "column": 8
            },
            "end": {
              "line": 523,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "importPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 525,
              "column": 8
            },
            "end": {
              "line": 525,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "root",
          "type": "(StampedTemplate|HTMLElement|ShadowRoot)",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 527,
              "column": 8
            },
            "end": {
              "line": 527,
              "column": 18
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "$",
          "type": "!Object.<string, !Node>",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 529,
              "column": 8
            },
            "end": {
              "line": 529,
              "column": 15
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        }
      ],
      "methods": [
        {
          "name": "_stampTemplate",
          "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2320,
              "column": 6
            },
            "end": {
              "line": 2345,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to stamp"
            }
          ],
          "return": {
            "type": "!StampedTemplate",
            "desc": "Cloned template content"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addMethodEventListenerToNode",
          "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 451,
              "column": 6
            },
            "end": {
              "line": 456,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to add listener on"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of method"
            },
            {
              "name": "context",
              "type": "*=",
              "description": "Context the method will be called on (defaults\n  to `node`)"
            }
          ],
          "return": {
            "type": "Function",
            "desc": "Generated handler function"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_addEventListenerToNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 465,
              "column": 6
            },
            "end": {
              "line": 467,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to add event listener to"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "Function",
              "description": "Listener function to add"
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_removeEventListenerFromNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 476,
              "column": 6
            },
            "end": {
              "line": 478,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to remove event listener from"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "Function",
              "description": "Listener function to remove"
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "attributeChangedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`attributeChangedCallback`.\n\nBy default, attributes declared in `properties` metadata are\ndeserialized using their `type` information to properties of the\nsame name.  \"Dash-cased\" attributes are deserialized to \"camelCase\"\nproperties.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 723,
              "column": 6
            },
            "end": {
              "line": 731,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of attribute."
            },
            {
              "name": "old",
              "type": "?string",
              "description": "Old value of attribute."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "Current value of attribute."
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeProperties",
          "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 543,
              "column": 6
            },
            "end": {
              "line": 577,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeProtoProperties",
          "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1184,
              "column": 6
            },
            "end": {
              "line": 1188,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the prototype"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_initializeInstanceProperties",
          "description": "Overrides `Polymer.PropertyAccessors` implementation to avoid setting\n`_setProperty`'s `shouldNotify: true`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1197,
              "column": 6
            },
            "end": {
              "line": 1206,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the instance"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_ensureAttribute",
          "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 236,
              "column": 6
            },
            "end": {
              "line": 240,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to ensure is set."
            },
            {
              "name": "value",
              "type": "string",
              "description": "of the attribute."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_attributeToProperty",
          "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 252,
              "column": 6
            },
            "end": {
              "line": 258,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to deserialize."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "of the attribute."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "type to deserialize to."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_propertyToAttribute",
          "description": "Serializes a property to its associated attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 267,
              "column": 6
            },
            "end": {
              "line": 273,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name to reflect."
            },
            {
              "name": "attribute",
              "type": "string=",
              "description": "Attribute name to reflect."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Property value to refect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_valueToNodeAttribute",
          "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 287,
              "column": 6
            },
            "end": {
              "line": 294,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Element to set attribute to."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to serialize."
            },
            {
              "name": "attribute",
              "type": "string",
              "description": "Attribute name to serialize to."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_serializeValue",
          "description": "Converts a typed JavaScript value to a string.\n\nThis method is called by Polymer when setting JS property values to\nHTML attributes.  Users may override this method on Polymer element\nprototypes to provide serialization for custom types.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 306,
              "column": 6
            },
            "end": {
              "line": 326,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "*",
              "description": "Property value to serialize."
            }
          ],
          "return": {
            "type": "(string|undefined)",
            "desc": "String serialized from the provided property value."
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_deserializeValue",
          "description": "Converts a string to a typed JavaScript value.\n\nThis method is called by Polymer when reading HTML attribute values to\nJS properties.  Users may override this method on Polymer element\nprototypes to provide deserialization for custom `type`s.  Note,\nthe `type` argument is the value of the `type` field provided in the\n`properties` configuration object for a given property, and is\nby convention the constructor for the type to deserialize.\n\nNote: The return value of `undefined` is used as a sentinel value to\nindicate the attribute should be removed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 387,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "?string",
              "description": "Attribute value to deserialize."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "Type to deserialize the string to."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Typed value deserialized from the provided string."
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_createPropertyAccessor",
          "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.  When calling on\na prototype, any overwritten values are saved in `__dataProto`,\nand it is up to the subclasser to decide how/when to set those\nproperties back into the accessor.  When calling on an instance,\nthe overwritten value is set via `_setPendingProperty`, and the\nuser should call `_invalidateProperties` or `_flushProperties`\nfor the values to take effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 411,
              "column": 6
            },
            "end": {
              "line": 431,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "readOnly",
              "type": "boolean=",
              "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_hasAccessor",
          "description": "Returns true if this library created an accessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 439,
              "column": 6
            },
            "end": {
              "line": 441,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if an accessor was created"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_setProperty",
          "description": "Overrides base implementation to ensure all accessors set `shouldNotify`\nto true, for per-property notification tracking.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1473,
              "column": 6
            },
            "end": {
              "line": 1477,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setPendingProperty",
          "description": "Overrides the `PropertyAccessors` implementation to introduce special\ndirty check logic depending on the property & value being set:\n\n1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n   Stored in `__dataTemp`, dirty checked against `__dataTemp`\n2. Object set to simple property (e.g. 'prop': {...})\n   Stored in `__dataTemp` and `__data`, dirty checked against\n   `__dataTemp` by default implementation of `_shouldPropertyChange`\n3. Primitive value set to simple property (e.g. 'prop': 42)\n   Stored in `__data`, dirty checked against `__data`\n\nThe dirty-check is important to prevent cycles due to two-way\nnotification, but paths and objects are only dirty checked against any\nprevious value set during this turn via a \"temporary cache\" that is\ncleared when the last `_propertiesChanged` exits. This is so:\na. any cached array paths (e.g. 'array.3.prop') may be invalidated\n   due to array mutations like shift/unshift/splice; this is fine\n   since path changes are dirty-checked at user entry points like `set`\nb. dirty-checking for objects only lasts one turn to allow the user\n   to mutate the object in-place and re-set it with the same identity\n   and have all sub-properties re-propagated in a subsequent turn.\n\nThe temp cache is not necessarily sufficient to prevent invalid array\npaths, since a splice can happen during the same turn (with pathological\nuser code); we could introduce a \"fixup\" for temporarily cached array\npaths if needed: https://github.com/Polymer/polymer/issues/4227",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1436,
              "column": 6
            },
            "end": {
              "line": 1465,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "True if property should fire notification\n  event (applies only for `notify: true` properties)"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property changed"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_isPropertyPending",
          "description": "Returns true if the specified property has a pending change.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 493,
              "column": 6
            },
            "end": {
              "line": 495,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if property has a pending change"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_invalidateProperties",
          "description": "Overrides `PropertyAccessor`'s default async queuing of\n`_propertiesChanged`: if `__dataReady` is false (has not yet been\nmanually flushed), the function no-ops; otherwise flushes\n`_propertiesChanged` synchronously.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1487,
              "column": 6
            },
            "end": {
              "line": 1491,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_enableProperties",
          "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 523,
              "column": 6
            },
            "end": {
              "line": 532,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_flushProperties",
          "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 543,
              "column": 6
            },
            "end": {
              "line": 551,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "ready",
          "description": "Stamps the element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 651,
              "column": 6
            },
            "end": {
              "line": 657,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_propertiesChanged",
          "description": "Implements `PropertyAccessors`'s properties changed callback.\n\nRuns each class of effects for the batch of changed properties in\na specific order (compute, propagate, reflect, observe, notify).",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1626,
              "column": 6
            },
            "end": {
              "line": 1659,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "currentProps"
            },
            {
              "name": "changedProps"
            },
            {
              "name": "oldProps"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_shouldPropertyChange",
          "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` for primitive types if a\nstrict equality check fails, and returns `true` for all Object/Arrays.\nThe method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 606,
              "column": 6
            },
            "end": {
              "line": 609,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "value",
              "type": "*",
              "description": "New property value"
            },
            {
              "name": "old",
              "type": "*",
              "description": "Previous property value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Whether the property should be considered a change\n  and enqueue a `_propertiesChanged` callback"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_addPropertyEffect",
          "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1220,
              "column": 6
            },
            "end": {
              "line": 1228,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removePropertyEffect",
          "description": "Removes the given property effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1237,
              "column": 6
            },
            "end": {
              "line": 1243,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property the effect was associated with"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object to remove"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasPropertyEffect",
          "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1254,
              "column": 6
            },
            "end": {
              "line": 1257,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "type",
              "type": "string=",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReadOnlyEffect",
          "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1267,
              "column": 6
            },
            "end": {
              "line": 1269,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasNotifyEffect",
          "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1279,
              "column": 6
            },
            "end": {
              "line": 1281,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReflectEffect",
          "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1291,
              "column": 6
            },
            "end": {
              "line": 1293,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasComputedEffect",
          "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1303,
              "column": 6
            },
            "end": {
              "line": 1305,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setPendingPropertyOrPath",
          "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1337,
              "column": 6
            },
            "end": {
              "line": 1369,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(number|string)>)",
              "description": "Path to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "Set to true if this change should\n cause a property notification event dispatch"
            },
            {
              "name": "isPathNotification",
              "type": "boolean=",
              "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setUnmanagedPropertyToNode",
          "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1391,
              "column": 6
            },
            "end": {
              "line": 1399,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "The node to set a property on"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "The property to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value to set"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_enqueueClient",
          "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1501,
              "column": 6
            },
            "end": {
              "line": 1506,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "client",
              "type": "Object",
              "description": "PropertyEffects client to enqueue"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_flushClients",
          "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1514,
              "column": 6
            },
            "end": {
              "line": 1525,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__enableOrFlushClients",
          "description": "(c) the stamped dom enables.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1539,
              "column": 6
            },
            "end": {
              "line": 1552,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_readyClients",
          "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 668,
              "column": 6
            },
            "end": {
              "line": 677,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "setProperties",
          "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1579,
              "column": 6
            },
            "end": {
              "line": 1590,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
            },
            {
              "name": "setReadOnly",
              "type": "boolean=",
              "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_propagatePropertyChanges",
          "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1670,
              "column": 6
            },
            "end": {
              "line": 1680,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProps",
              "type": "Object",
              "description": "Bag of changed properties"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "linkPaths",
          "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1690,
              "column": 6
            },
            "end": {
              "line": 1695,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "to",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Target path to link."
            },
            {
              "name": "from",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Source path to link."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unlinkPaths",
          "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1706,
              "column": 6
            },
            "end": {
              "line": 1711,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Target path to unlink."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifySplices",
          "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1742,
              "column": 6
            },
            "end": {
              "line": 1746,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "splices",
              "type": "Array",
              "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "get",
          "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1767,
              "column": 6
            },
            "end": {
              "line": 1769,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "set",
          "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1791,
              "column": 6
            },
            "end": {
              "line": 1801,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set at the specified path."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "push",
          "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1817,
              "column": 6
            },
            "end": {
              "line": 1826,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to push onto array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "pop",
          "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1841,
              "column": 6
            },
            "end": {
              "line": 1850,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "splice",
          "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1869,
              "column": 6
            },
            "end": {
              "line": 1886,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "start",
              "type": "number",
              "description": "Index from which to start removing/inserting."
            },
            {
              "name": "deleteCount",
              "type": "number",
              "description": "Number of items to remove."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert into array."
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Array of removed items."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "shift",
          "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1901,
              "column": 6
            },
            "end": {
              "line": 1910,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unshift",
          "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1926,
              "column": 6
            },
            "end": {
              "line": 1934,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert info array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifyPath",
          "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1948,
              "column": 6
            },
            "end": {
              "line": 1965,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Value at the path (optional)."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReadOnlyProperty",
          "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1977,
              "column": 6
            },
            "end": {
              "line": 1984,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createPropertyObserver",
          "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1997,
              "column": 6
            },
            "end": {
              "line": 2007,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createMethodObserver",
          "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2019,
              "column": 6
            },
            "end": {
              "line": 2025,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createNotifyingProperty",
          "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2035,
              "column": 6
            },
            "end": {
              "line": 2043,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReflectedProperty",
          "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2053,
              "column": 6
            },
            "end": {
              "line": 2066,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createComputedProperty",
          "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2079,
              "column": 6
            },
            "end": {
              "line": 2085,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_bindTemplate",
          "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2255,
              "column": 6
            },
            "end": {
              "line": 2278,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            },
            {
              "name": "instanceBinding",
              "type": "boolean=",
              "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removeBoundDom",
          "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2355,
              "column": 6
            },
            "end": {
              "line": 2376,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "!StampedTemplate",
              "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "connectedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 633,
              "column": 6
            },
            "end": {
              "line": 638,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`disconnectedCallback`.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 644,
              "column": 6
            },
            "end": {
              "line": 644,
              "column": 31
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_attachDom",
          "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 691,
              "column": 6
            },
            "end": {
              "line": 707,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "StampedTemplate",
              "description": "to attach to the element."
            }
          ],
          "return": {
            "type": "ShadowRoot",
            "desc": "node to which the dom has been attached."
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "updateStyles",
          "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 750,
              "column": 6
            },
            "end": {
              "line": 754,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "properties",
              "type": "Object=",
              "description": "Bag of custom property key/values to\n  apply to this element."
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "resolveUrl",
          "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 767,
              "column": 6
            },
            "end": {
              "line": 772,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "string",
              "description": "URL to resolve."
            },
            {
              "name": "base",
              "type": "string=",
              "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
            }
          ],
          "return": {
            "type": "string",
            "desc": "Rewritten URL relative to base"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        }
      ],
      "staticMethods": [
        {
          "name": "_parseTemplate",
          "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 197,
              "column": 6
            },
            "end": {
              "line": 208,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to parse"
            },
            {
              "name": "outerTemplateInfo",
              "type": "TemplateInfo=",
              "description": "Template metadata from the outer\n  template, for parsing nested templates"
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Parsed template metadata"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateContent",
          "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 783,
              "column": 6
            },
            "end": {
              "line": 786,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template"
            },
            {
              "name": "templateInfo"
            },
            {
              "name": "nodeInfo"
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_parseTemplateNode",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2395,
              "column": 6
            },
            "end": {
              "line": 2409,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateChildNodes",
          "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 257,
              "column": 6
            },
            "end": {
              "line": 294,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "root",
              "type": "Node",
              "description": "Root node whose `childNodes` will be parsed"
            },
            {
              "name": "templateInfo",
              "type": "!TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "!NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNestedTemplate",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2482,
              "column": 6
            },
            "end": {
              "line": 2492,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateNodeAttributes",
          "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 332,
              "column": 6
            },
            "end": {
              "line": 341,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNodeAttribute",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2430,
              "column": 6
            },
            "end": {
              "line": 2466,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            },
            {
              "name": "name",
              "type": "string",
              "description": "Attribute name"
            },
            {
              "name": "value",
              "type": "string",
              "description": "Attribute value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_contentForTemplate",
          "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 387,
              "column": 6
            },
            "end": {
              "line": 390,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template to retrieve `content` for"
            }
          ],
          "return": {
            "type": "DocumentFragment",
            "desc": "Content fragment"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "createPropertiesForAttributes",
          "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 113,
              "column": 6
            },
            "end": {
              "line": 118,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "addPropertyEffect",
          "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2124,
              "column": 6
            },
            "end": {
              "line": 2126,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createPropertyObserver",
          "description": "Creates a single-property observer for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2137,
              "column": 6
            },
            "end": {
              "line": 2139,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createMethodObserver",
          "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2153,
              "column": 6
            },
            "end": {
              "line": 2155,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createNotifyingProperty",
          "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2164,
              "column": 6
            },
            "end": {
              "line": 2166,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReadOnlyProperty",
          "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2183,
              "column": 6
            },
            "end": {
              "line": 2185,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReflectedProperty",
          "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2194,
              "column": 6
            },
            "end": {
              "line": 2196,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createComputedProperty",
          "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2211,
              "column": 6
            },
            "end": {
              "line": 2213,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "bindTemplate",
          "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2227,
              "column": 6
            },
            "end": {
              "line": 2229,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Template metadata object"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addTemplatePropertyEffect",
          "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2292,
              "column": 6
            },
            "end": {
              "line": 2298,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Template metadata to add effect to"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseBindings",
          "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2527,
              "column": 6
            },
            "end": {
              "line": 2592,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "text",
              "type": "string",
              "description": "Text to parse from attribute or textContent"
            },
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Current template metadata"
            }
          ],
          "return": {
            "type": "Array.<!BindingPart>",
            "desc": "Array of binding part metadata"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_evaluateBinding",
          "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2608,
              "column": 6
            },
            "end": {
              "line": 2625,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "inst",
              "type": "this",
              "description": "Element that should be used as scope for\n  binding dependencies"
            },
            {
              "name": "part",
              "type": "BindingPart",
              "description": "Binding part metadata"
            },
            {
              "name": "path",
              "type": "string",
              "description": "Property/path that triggered this effect"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of current property changes"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value the binding part evaluated to"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "finalize",
          "description": "Called automatically when the first element instance is created to\nensure that class finalization work has been completed.\nMay be called by users to eagerly perform class finalization work\nprior to the creation of the first element instance.\n\nClass finalization work generally includes meta-programming such as\ncreating property accessors and any property effect metadata needed for\nthe features used.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 441,
              "column": 6
            },
            "end": {
              "line": 445,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_processStyleText",
          "description": "Gather style text for the template",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 588,
              "column": 6
            },
            "end": {
              "line": 591,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "is",
              "type": "string",
              "description": "Tag name for this element"
            },
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to process"
            },
            {
              "name": "baseURI",
              "type": "string",
              "description": "Base URI to rebase CSS paths against"
            }
          ],
          "return": {
            "type": "string",
            "desc": "The combined CSS text"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_finalizeTemplate",
          "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 602,
              "column": 6
            },
            "end": {
              "line": 621,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "is",
              "type": "string",
              "description": "Tag name (or type extension name) for this element"
            },
            {
              "name": "ext",
              "type": "string=",
              "description": "For type extensions, the tag name that was extended"
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 36,
          "column": 4
        },
        "end": {
          "line": 44,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "H2GridCell",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "file": "h2-grid-cell.html",
            "start": {
              "line": 26,
              "column": 6
            },
            "end": {
              "line": 26,
              "column": 19
            }
          }
        }
      ],
      "tagname": "h2-grid-cell"
    }
  ],
  "metadata": {
    "polymer": {
      "behaviors": [
        {
          "description": "",
          "summary": "",
          "path": "behaviors/base-behavior.html",
          "properties": [],
          "methods": [
            {
              "name": "isOneOf",
              "description": "判断第一个参数是否与后面的某个参数相等， 使用Object.is() 进行判断",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 12,
                  "column": 4
                },
                "end": {
                  "line": 19,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args",
                  "type": "...*",
                  "rest": true
                }
              ],
              "return": {
                "type": "Boolean"
              }
            },
            {
              "name": "isEqual",
              "description": "判断两个值是否相等，使用 `Object.is` 判断。",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 27,
                  "column": 4
                },
                "end": {
                  "line": 29,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "left",
                  "type": "*"
                },
                {
                  "name": "right",
                  "type": "*"
                }
              ],
              "return": {
                "type": "Boolean"
              }
            },
            {
              "name": "isFunction",
              "description": "函数判断",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 37,
                  "column": 4
                },
                "end": {
                  "line": 39,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "fn",
                  "type": "*"
                }
              ],
              "return": {
                "type": "Boolean"
              }
            },
            {
              "name": "orElse",
              "description": "Return the first giving arg which is not ``undefined``, ``null``, ``NaN`` , ``false`` ,``0`` or ``''``.\n\neg.\n```\norElse(undefined, null, \"foo\")  // \"foo\"\norElse(0, 1)  // 1\norElse(\"bar\", \"foo\")  // \"bar\"\n```",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 53,
                  "column": 4
                },
                "end": {
                  "line": 56,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "args",
                  "type": "...*",
                  "rest": true
                }
              ],
              "return": {
                "type": "*"
              }
            },
            {
              "name": "getValueByKey",
              "description": "通过key查询对象中的值",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 65,
                  "column": 4
                },
                "end": {
                  "line": 67,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "model",
                  "type": "Object"
                },
                {
                  "name": "key",
                  "type": "String"
                },
                {
                  "name": "defVal",
                  "type": "String",
                  "defaultValue": "''",
                  "description": "支持任何符合json格式的字符串"
                }
              ],
              "return": {
                "type": "*"
              }
            },
            {
              "name": "getValueOrElse",
              "description": "等价于 model[key1 || key2 || ...]",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 75,
                  "column": 4
                },
                "end": {
                  "line": 78,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "model",
                  "type": "Object"
                },
                {
                  "name": "keys",
                  "type": "...String",
                  "rest": true
                }
              ],
              "return": {
                "type": "*"
              }
            },
            {
              "name": "getValueOrElseNull",
              "description": "等价于 model[key1 || key2 || ...] 如果找不到值，返回null",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 85,
                  "column": 4
                },
                "end": {
                  "line": 88,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "model",
                  "type": "Object"
                },
                {
                  "name": "keys",
                  "type": "...String",
                  "rest": true
                }
              ],
              "return": {
                "type": "*"
              }
            },
            {
              "name": "getValueByPath",
              "description": "通过路径获取对象字段值",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 96,
                  "column": 4
                },
                "end": {
                  "line": 108,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "model",
                  "type": "Object",
                  "description": "eg. { foo: { bar: 1} }"
                },
                {
                  "name": "path",
                  "type": "String",
                  "defaultValue": "''",
                  "description": "eg. \"foo.bar\""
                },
                {
                  "name": "defVal",
                  "type": "String",
                  "description": "支持任何符合json格式的字符串"
                }
              ],
              "return": {
                "type": "*"
              }
            },
            {
              "name": "toBoolean",
              "description": "To boolean.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 114,
                  "column": 4
                },
                "end": {
                  "line": 116,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "val",
                  "type": "*"
                }
              ]
            },
            {
              "name": "showLoading",
              "description": "添加loading",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 120,
                  "column": 4
                },
                "end": {
                  "line": 137,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "hideLoading",
              "description": "消除loading",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 142,
                  "column": 4
                },
                "end": {
                  "line": 147,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "throwNotFoundError",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 149,
                  "column": 4
                },
                "end": {
                  "line": 151,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "string"
                }
              ]
            },
            {
              "name": "debounce",
              "description": "防抖，wait时间后执行fn",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 159,
                  "column": 4
                },
                "end": {
                  "line": 161,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "jobName"
                },
                {
                  "name": "fn"
                },
                {
                  "name": "wait"
                }
              ]
            },
            {
              "name": "throttle",
              "description": "每隔wait时间执行fn",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 166,
                  "column": 4
                },
                "end": {
                  "line": 168,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "fn"
                },
                {
                  "name": "wait"
                },
                {
                  "name": "options"
                }
              ]
            },
            {
              "name": "deepClone",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 170,
                  "column": 4
                },
                "end": {
                  "line": 172,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 6,
              "column": 2
            },
            "end": {
              "line": 173,
              "column": 3
            }
          },
          "privacy": "public",
          "name": "BaseBehavior",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "提供公共的格式化方法",
          "summary": "",
          "path": "behaviors/format-behavior.html",
          "properties": [],
          "methods": [
            {
              "name": "formatDate",
              "description": "格式化日期",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 15,
                  "column": 4
                },
                "end": {
                  "line": 39,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "date",
                  "description": "时间戳（毫秒）"
                },
                {
                  "name": "fmt",
                  "description": "显示格式，默认为'yyyy-MM-dd HH:mm:ss'"
                },
                {
                  "name": "emptyReturn",
                  "description": "默认空值返回数据"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 7,
              "column": 2
            },
            "end": {
              "line": 40,
              "column": 4
            }
          },
          "privacy": "public",
          "name": "FormatBehavior",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "Some ajax methods base on fetch api.",
          "summary": "",
          "path": "behaviors/ajax-behavior.html",
          "properties": [],
          "methods": [
            {
              "name": "query",
              "description": "GET 请求\n\n例子：\n```javascript\n1. 直接传递一个Request 实例\n const req = new Request('/test?foo=1&bar=2', {method: 'GET'});\n this.query(req, console.log );\n\n2. 直接传递一个url\n this.query('/test', console.log);\n\n3. 直接传递一个包含url、data内容的对象\n this.query({\n      url: '/test',\n      data: { foo:1, bar:2 },\n      handleAs: 'json'\n  }, console.log, console.log );\n```\n******************************************************",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 43,
                  "column": 4
                },
                "end": {
                  "line": 66,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "input",
                  "type": "(string|Request|Object)",
                  "description": "     支持3种类型： String|Request|Object\n     1. Request实例\n     2. string：请求url\n     3: Object： 对象结构要求 { url , data, handleAs}\n         url：必填项\n         data：可选\n         handleAs：string, 可选，默认值是\"json\"， 取值范围: text|json|blob|formData|arrayBuffers"
                },
                {
                  "name": "succCallback",
                  "type": "Function",
                  "description": "callback whenever query success"
                },
                {
                  "name": "failCallback",
                  "type": "Function",
                  "description": "callback whenever query fail"
                }
              ],
              "return": {}
            },
            {
              "name": "post",
              "description": "POST 请求\n\n```javascript\n1. 直接传递一个Request 实例\n const req = new Request('/test?foo=1&bar=2', {method: 'POST'});\n this.post(req, console.log );\n\n2. 直接传递一个url\n this.post('/test', console.log);\n\n3. 直接传递一个包含url、data内容的对象\n this.post({\n      url: '/test',\n      data: { foo:1, bar:2 }\n  }, console.log, console.log );\n\n 4. 上传文件\n const formData = new FormData();\n formData.append('file1', new File([], 'filename'));\n this.post({\n     url: '/upload',\n     data: formData\n }, console.log, console.log );\n\n 5. 发送json格式的数据\n this.post({\n     url: '/upload',\n     data: {foo:1,bar:2},\n     sendAsJson: true\n }, console.log, console.log );\n```\n******************************************************",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 116,
                  "column": 4
                },
                "end": {
                  "line": 141,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "input",
                  "type": "(string|Request|Object)",
                  "description": "     支持3种类型： String|Request|Object\n     1. Request实例\n     2. string：请求url\n     3: Object： 对象结构要求 { url , data, handleAs, sendAsJson}\n         url：必填项\n         data：可选\n         handleAs：string, 可选，默认值是\"json\"， 取值范围: text|json|blob|formData|arrayBuffer\n         sendAsJson：boolean 可选，默认值是false"
                },
                {
                  "name": "succCallback",
                  "type": "Function",
                  "description": "callback whenever post success"
                },
                {
                  "name": "failCallback",
                  "type": "Function",
                  "description": "callback whenever post fail"
                }
              ],
              "return": {
                "type": "*"
              }
            },
            {
              "name": "__get",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 144,
                  "column": 4
                },
                "end": {
                  "line": 155,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "handleAs"
                },
                {
                  "name": "{url, data}"
                },
                {
                  "name": "succCallback"
                },
                {
                  "name": "failCallback"
                }
              ]
            },
            {
              "name": "__post",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 157,
                  "column": 4
                },
                "end": {
                  "line": 180,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "handleAs"
                },
                {
                  "name": "{url, data, sendAsJson}"
                },
                {
                  "name": "succCallback"
                },
                {
                  "name": "failCallback"
                }
              ]
            },
            {
              "name": "__fetch",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 182,
                  "column": 4
                },
                "end": {
                  "line": 205,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "handleAs"
                },
                {
                  "name": "request"
                },
                {
                  "name": "succCallback"
                },
                {
                  "name": "failCallback"
                }
              ]
            },
            {
              "name": "__consume",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 207,
                  "column": 4
                },
                "end": {
                  "line": 221,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "reader"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 7,
              "column": 2
            },
            "end": {
              "line": 222,
              "column": 4
            }
          },
          "privacy": "public",
          "name": "AjaxBehaviorImpl",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "",
          "summary": "",
          "path": "behaviors/tip-behavior.html",
          "properties": [
            {
              "name": "hTip",
              "type": "Object",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 11,
                  "column": 4
                },
                "end": {
                  "line": 85,
                  "column": 5
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 8,
              "column": 2
            },
            "end": {
              "line": 86,
              "column": 4
            }
          },
          "privacy": "public",
          "name": "TipBehavior",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        }
      ]
    }
  },
  "classes": [
    {
      "description": "Created by SkyLin on 2017/11/8.",
      "summary": "",
      "path": "resource/plugin/pinyinUtil.js",
      "properties": [],
      "methods": [
        {
          "name": "convert2CompletePinyin",
          "description": "汉字转全拼",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 23,
              "column": 4
            },
            "end": {
              "line": 38,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "userInput",
              "description": "用户输入关键字(允许输入英文字母和中文)"
            }
          ],
          "return": {
            "type": "*"
          }
        },
        {
          "name": "convert2PinyinAbbreviation",
          "description": "汉字转拼音首字母",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 45,
              "column": 4
            },
            "end": {
              "line": 75,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "userInput",
              "description": "用户输入关键字(允许输入英文字母和中文)"
            }
          ],
          "return": {
            "type": "*"
          }
        },
        {
          "name": "_handlePolyphone",
          "description": "处理多音字，并去重\n1.['hen', 'xing heng xing hang'] 转换成 ['hen xing', 'hen heng', 'hen hang']\n2.['D', 'ZCZ', 'F']转换成['DZF', 'DCF']",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 4
            },
            "end": {
              "line": 101,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "arr",
              "description": "字符串数组"
            },
            {
              "name": "splitter",
              "defaultValue": "''",
              "description": "字符串分隔符"
            }
          ],
          "return": {
            "type": "[string]"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 102,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "PinyinUtil"
    },
    {
      "description": "缓存搜索的插件\n\n缓存数据结构_cacheItems:\n[{item: {label:\"快塑网\",business:\"塑料\"}, searches: [\"快塑网\",\"KUAISUWANG\",\"KSW\",\"塑料\",\"SULIAO\",\"SL\"],matchCount:0},\n {item: {label:\"京东\",business:\"电商\"}, searches: [\"京东\",\"JINGDONG\",\"JD\",\"电商\",\"DIANSHANG\",\"DS\"],matchCount:0 }]",
      "summary": "",
      "path": "resource/plugin/cacheSearchUtil.js",
      "properties": [],
      "methods": [
        {
          "name": "search",
          "description": "查询",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 18,
              "column": 4
            },
            "end": {
              "line": 36,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "keyword",
              "defaultValue": "''",
              "description": "关键字"
            }
          ],
          "return": {
            "type": "Array.<*>"
          }
        },
        {
          "name": "addCacheItem",
          "description": "新增缓存项",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 43,
              "column": 4
            },
            "end": {
              "line": 45,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item",
              "description": "缓存对象POJO 如:{label:\"快塑网\",business:\"塑料\"}"
            },
            {
              "name": "searches",
              "description": "缓存对象搜索关键字符串数组，包含了item的特定字段值，特定字段的全拼、简拼字符串,如：[\"快塑网\",\"KUAISUWANG\",\"KSW\",\"塑料\",\"SULIAO\",\"SL\"]"
            }
          ]
        },
        {
          "name": "resetCache",
          "description": "重置索引缓存",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 50,
              "column": 4
            },
            "end": {
              "line": 52,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 8,
          "column": 0
        },
        "end": {
          "line": 53,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "CacheSearchUtil"
    }
  ]
}
